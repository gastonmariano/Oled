
blackpill 411ceu6 screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d15c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c08  0800d300  0800d300  0001d300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df08  0800df08  00020378  2**0
                  CONTENTS
  4 .ARM          00000008  0800df08  0800df08  0001df08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df10  0800df10  00020378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df10  0800df10  0001df10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df14  0800df14  0001df14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  0800df18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000265c  20000378  0800e290  00020378  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200029d4  0800e290  000229d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020378  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013fae  00000000  00000000  000203eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bb9  00000000  00000000  00034399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  00037f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cf8  00000000  00000000  000390b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a435  00000000  00000000  00039da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f2d  00000000  00000000  000541dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cb0a  00000000  00000000  0006c10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000580c  00000000  00000000  000f8c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000fe420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000378 	.word	0x20000378
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d2e4 	.word	0x0800d2e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000037c 	.word	0x2000037c
 80001dc:	0800d2e4 	.word	0x0800d2e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a2c      	ldr	r2, [pc, #176]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a25      	ldr	r2, [pc, #148]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <MX_GPIO_Init+0xd0>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f40:	4811      	ldr	r0, [pc, #68]	; (8000f88 <MX_GPIO_Init+0xd4>)
 8000f42:	f001 ff11 	bl	8002d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480a      	ldr	r0, [pc, #40]	; (8000f88 <MX_GPIO_Init+0xd4>)
 8000f60:	f001 fd7e 	bl	8002a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f64:	2320      	movs	r3, #32
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_GPIO_Init+0xd8>)
 8000f78:	f001 fd72 	bl	8002a60 <HAL_GPIO_Init>

}
 8000f7c:	bf00      	nop
 8000f7e:	3728      	adds	r7, #40	; 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020400 	.word	0x40020400

08000f90 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000f96:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <MX_I2C1_Init+0x54>)
 8000f98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000f9c:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <MX_I2C1_Init+0x58>)
 8000f9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fce:	f001 fee5 	bl	8002d9c <HAL_I2C_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fd8:	f000 fbfa 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000394 	.word	0x20000394
 8000fe4:	40005400 	.word	0x40005400
 8000fe8:	000186a0 	.word	0x000186a0

08000fec <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <MX_I2C2_Init+0x50>)
 8000ff2:	4a13      	ldr	r2, [pc, #76]	; (8001040 <MX_I2C2_Init+0x54>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_I2C2_Init+0x50>)
 8000ff8:	4a12      	ldr	r2, [pc, #72]	; (8001044 <MX_I2C2_Init+0x58>)
 8000ffa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_I2C2_Init+0x50>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_I2C2_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_I2C2_Init+0x50>)
 800100a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800100e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <MX_I2C2_Init+0x50>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_I2C2_Init+0x50>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <MX_I2C2_Init+0x50>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_I2C2_Init+0x50>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <MX_I2C2_Init+0x50>)
 800102a:	f001 feb7 	bl	8002d9c <HAL_I2C_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001034:	f000 fbcc 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200003e8 	.word	0x200003e8
 8001040:	40005800 	.word	0x40005800
 8001044:	00061a80 	.word	0x00061a80

08001048 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a3a      	ldr	r2, [pc, #232]	; (8001150 <HAL_I2C_MspInit+0x108>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d12c      	bne.n	80010c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <HAL_I2C_MspInit+0x10c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a38      	ldr	r2, [pc, #224]	; (8001154 <HAL_I2C_MspInit+0x10c>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b36      	ldr	r3, [pc, #216]	; (8001154 <HAL_I2C_MspInit+0x10c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001086:	23c0      	movs	r3, #192	; 0xc0
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800108a:	2312      	movs	r3, #18
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001096:	2304      	movs	r3, #4
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	482d      	ldr	r0, [pc, #180]	; (8001158 <HAL_I2C_MspInit+0x110>)
 80010a2:	f001 fcdd 	bl	8002a60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <HAL_I2C_MspInit+0x10c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a29      	ldr	r2, [pc, #164]	; (8001154 <HAL_I2C_MspInit+0x10c>)
 80010b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b27      	ldr	r3, [pc, #156]	; (8001154 <HAL_I2C_MspInit+0x10c>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80010c2:	e041      	b.n	8001148 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a24      	ldr	r2, [pc, #144]	; (800115c <HAL_I2C_MspInit+0x114>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d13c      	bne.n	8001148 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <HAL_I2C_MspInit+0x10c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a1f      	ldr	r2, [pc, #124]	; (8001154 <HAL_I2C_MspInit+0x10c>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <HAL_I2C_MspInit+0x10c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f0:	2312      	movs	r3, #18
 80010f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010fc:	2304      	movs	r3, #4
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	4619      	mov	r1, r3
 8001106:	4814      	ldr	r0, [pc, #80]	; (8001158 <HAL_I2C_MspInit+0x110>)
 8001108:	f001 fcaa 	bl	8002a60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800110c:	2308      	movs	r3, #8
 800110e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001110:	2312      	movs	r3, #18
 8001112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800111c:	2309      	movs	r3, #9
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	480c      	ldr	r0, [pc, #48]	; (8001158 <HAL_I2C_MspInit+0x110>)
 8001128:	f001 fc9a 	bl	8002a60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_I2C_MspInit+0x10c>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_I2C_MspInit+0x10c>)
 8001136:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800113a:	6413      	str	r3, [r2, #64]	; 0x40
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_I2C_MspInit+0x10c>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	bf00      	nop
 800114a:	3730      	adds	r7, #48	; 0x30
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40005400 	.word	0x40005400
 8001154:	40023800 	.word	0x40023800
 8001158:	40020400 	.word	0x40020400
 800115c:	40005800 	.word	0x40005800

08001160 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800116a:	4a38      	ldr	r2, [pc, #224]	; (800124c <HD44780_Init+0xec>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001170:	4b37      	ldr	r3, [pc, #220]	; (8001250 <HD44780_Init+0xf0>)
 8001172:	2208      	movs	r2, #8
 8001174:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001176:	4b37      	ldr	r3, [pc, #220]	; (8001254 <HD44780_Init+0xf4>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800117c:	4b33      	ldr	r3, [pc, #204]	; (800124c <HD44780_Init+0xec>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d907      	bls.n	8001194 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001184:	4b33      	ldr	r3, [pc, #204]	; (8001254 <HD44780_Init+0xf4>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	f043 0308 	orr.w	r3, r3, #8
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b31      	ldr	r3, [pc, #196]	; (8001254 <HD44780_Init+0xf4>)
 8001190:	701a      	strb	r2, [r3, #0]
 8001192:	e006      	b.n	80011a2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001194:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <HD44780_Init+0xf4>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <HD44780_Init+0xf4>)
 80011a0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80011a2:	f000 f985 	bl	80014b0 <DelayInit>
  HAL_Delay(50);
 80011a6:	2032      	movs	r0, #50	; 0x32
 80011a8:	f001 fb24 	bl	80027f4 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80011ac:	4b28      	ldr	r3, [pc, #160]	; (8001250 <HD44780_Init+0xf0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 f943 	bl	800143c <ExpanderWrite>
  HAL_Delay(1000);
 80011b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ba:	f001 fb1b 	bl	80027f4 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80011be:	2030      	movs	r0, #48	; 0x30
 80011c0:	f000 f92b 	bl	800141a <Write4Bits>
  DelayUS(4500);
 80011c4:	f241 1094 	movw	r0, #4500	; 0x1194
 80011c8:	f000 f99c 	bl	8001504 <DelayUS>

  Write4Bits(0x03 << 4);
 80011cc:	2030      	movs	r0, #48	; 0x30
 80011ce:	f000 f924 	bl	800141a <Write4Bits>
  DelayUS(4500);
 80011d2:	f241 1094 	movw	r0, #4500	; 0x1194
 80011d6:	f000 f995 	bl	8001504 <DelayUS>

  Write4Bits(0x03 << 4);
 80011da:	2030      	movs	r0, #48	; 0x30
 80011dc:	f000 f91d 	bl	800141a <Write4Bits>
  DelayUS(4500);
 80011e0:	f241 1094 	movw	r0, #4500	; 0x1194
 80011e4:	f000 f98e 	bl	8001504 <DelayUS>

  Write4Bits(0x02 << 4);
 80011e8:	2020      	movs	r0, #32
 80011ea:	f000 f916 	bl	800141a <Write4Bits>
  DelayUS(100);
 80011ee:	2064      	movs	r0, #100	; 0x64
 80011f0:	f000 f988 	bl	8001504 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HD44780_Init+0xf4>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	f043 0320 	orr.w	r3, r3, #32
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f8ce 	bl	80013a0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HD44780_Init+0xf8>)
 8001206:	2204      	movs	r2, #4
 8001208:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800120a:	f000 f875 	bl	80012f8 <HD44780_Display>
  HD44780_Clear();
 800120e:	f000 f82b 	bl	8001268 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HD44780_Init+0xfc>)
 8001214:	2202      	movs	r2, #2
 8001216:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <HD44780_Init+0xfc>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f8bc 	bl	80013a0 <SendCommand>
  DelayUS(4500);
 8001228:	f241 1094 	movw	r0, #4500	; 0x1194
 800122c:	f000 f96a 	bl	8001504 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001230:	490b      	ldr	r1, [pc, #44]	; (8001260 <HD44780_Init+0x100>)
 8001232:	2000      	movs	r0, #0
 8001234:	f000 f876 	bl	8001324 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001238:	490a      	ldr	r1, [pc, #40]	; (8001264 <HD44780_Init+0x104>)
 800123a:	2001      	movs	r0, #1
 800123c:	f000 f872 	bl	8001324 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001240:	f000 f81d 	bl	800127e <HD44780_Home>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2000043f 	.word	0x2000043f
 8001250:	20000440 	.word	0x20000440
 8001254:	2000043c 	.word	0x2000043c
 8001258:	2000043d 	.word	0x2000043d
 800125c:	2000043e 	.word	0x2000043e
 8001260:	20000000 	.word	0x20000000
 8001264:	20000008 	.word	0x20000008

08001268 <HD44780_Clear>:

void HD44780_Clear()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800126c:	2001      	movs	r0, #1
 800126e:	f000 f897 	bl	80013a0 <SendCommand>
  DelayUS(2000);
 8001272:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001276:	f000 f945 	bl	8001504 <DelayUS>
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}

0800127e <HD44780_Home>:

void HD44780_Home()
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8001282:	2002      	movs	r0, #2
 8001284:	f000 f88c 	bl	80013a0 <SendCommand>
  DelayUS(2000);
 8001288:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800128c:	f000 f93a 	bl	8001504 <DelayUS>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}

08001294 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	460a      	mov	r2, r1
 800129e:	71fb      	strb	r3, [r7, #7]
 80012a0:	4613      	mov	r3, r2
 80012a2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HD44780_SetCursor+0x5c>)
 80012a6:	f107 0408 	add.w	r4, r7, #8
 80012aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80012b0:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <HD44780_SetCursor+0x60>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	79ba      	ldrb	r2, [r7, #6]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d303      	bcc.n	80012c2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HD44780_SetCursor+0x60>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	3b01      	subs	r3, #1
 80012c0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80012c2:	79bb      	ldrb	r3, [r7, #6]
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	3318      	adds	r3, #24
 80012c8:	443b      	add	r3, r7
 80012ca:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	4413      	add	r3, r2
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012dc:	b25b      	sxtb	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f85d 	bl	80013a0 <SendCommand>
}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}
 80012ee:	bf00      	nop
 80012f0:	0800d300 	.word	0x0800d300
 80012f4:	2000043f 	.word	0x2000043f

080012f8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HD44780_Display+0x28>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HD44780_Display+0x28>)
 8001308:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HD44780_Display+0x28>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	f043 0308 	orr.w	r3, r3, #8
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f843 	bl	80013a0 <SendCommand>
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000043d 	.word	0x2000043d

08001324 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	b25b      	sxtb	r3, r3
 800133e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001342:	b25b      	sxtb	r3, r3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f82a 	bl	80013a0 <SendCommand>
  for (int i=0; i<8; i++)
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	e009      	b.n	8001366 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	4413      	add	r3, r2
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f82e 	bl	80013bc <SendChar>
  for (int i=0; i<8; i++)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3301      	adds	r3, #1
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2b07      	cmp	r3, #7
 800136a:	ddf2      	ble.n	8001352 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800137e:	e006      	b.n	800138e <HD44780_PrintStr+0x18>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f817 	bl	80013bc <SendChar>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f4      	bne.n	8001380 <HD44780_PrintStr+0xa>
}
 8001396:	bf00      	nop
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f812 	bl	80013d8 <Send>
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <SendChar>:

static void SendChar(uint8_t ch)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2101      	movs	r1, #1
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f804 	bl	80013d8 <Send>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	460a      	mov	r2, r1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	4613      	mov	r3, r2
 80013e6:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f023 030f 	bic.w	r3, r3, #15
 80013ee:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	79bb      	ldrb	r3, [r7, #6]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f80b 	bl	800141a <Write4Bits>
  Write4Bits((lownib)|mode);
 8001404:	7bba      	ldrb	r2, [r7, #14]
 8001406:	79bb      	ldrb	r3, [r7, #6]
 8001408:	4313      	orrs	r3, r2
 800140a:	b2db      	uxtb	r3, r3
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f804 	bl	800141a <Write4Bits>
}
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f808 	bl	800143c <ExpanderWrite>
  PulseEnable(value);
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f820 	bl	8001474 <PulseEnable>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af02      	add	r7, sp, #8
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <ExpanderWrite+0x30>)
 8001448:	781a      	ldrb	r2, [r3, #0]
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	4313      	orrs	r3, r2
 800144e:	b2db      	uxtb	r3, r3
 8001450:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001452:	f107 020f 	add.w	r2, r7, #15
 8001456:	230a      	movs	r3, #10
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2301      	movs	r3, #1
 800145c:	214e      	movs	r1, #78	; 0x4e
 800145e:	4804      	ldr	r0, [pc, #16]	; (8001470 <ExpanderWrite+0x34>)
 8001460:	f001 fde0 	bl	8003024 <HAL_I2C_Master_Transmit>
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000440 	.word	0x20000440
 8001470:	20000394 	.word	0x20000394

08001474 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ffd8 	bl	800143c <ExpanderWrite>
  DelayUS(20);
 800148c:	2014      	movs	r0, #20
 800148e:	f000 f839 	bl	8001504 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f023 0304 	bic.w	r3, r3, #4
 8001498:	b2db      	uxtb	r3, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ffce 	bl	800143c <ExpanderWrite>
  DelayUS(20);
 80014a0:	2014      	movs	r0, #20
 80014a2:	f000 f82f 	bl	8001504 <DelayUS>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <DelayInit>:

static void DelayInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <DelayInit+0x4c>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	4a10      	ldr	r2, [pc, #64]	; (80014fc <DelayInit+0x4c>)
 80014ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014be:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <DelayInit+0x4c>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <DelayInit+0x4c>)
 80014c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ca:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <DelayInit+0x50>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <DelayInit+0x50>)
 80014d2:	f023 0301 	bic.w	r3, r3, #1
 80014d6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <DelayInit+0x50>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a08      	ldr	r2, [pc, #32]	; (8001500 <DelayInit+0x50>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <DelayInit+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80014ea:	bf00      	nop
  __ASM volatile ("NOP");
 80014ec:	bf00      	nop
  __ASM volatile ("NOP");
 80014ee:	bf00      	nop
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000edf0 	.word	0xe000edf0
 8001500:	e0001000 	.word	0xe0001000

08001504 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001504:	b480      	push	{r7}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <DelayUS+0x44>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0e      	ldr	r2, [pc, #56]	; (800154c <DelayUS+0x48>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	0c9a      	lsrs	r2, r3, #18
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <DelayUS+0x4c>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <DelayUS+0x4c>)
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	429a      	cmp	r2, r3
 8001536:	d8f6      	bhi.n	8001526 <DelayUS+0x22>
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	371c      	adds	r7, #28
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	200000a0 	.word	0x200000a0
 800154c:	431bde83 	.word	0x431bde83
 8001550:	e0001000 	.word	0xe0001000

08001554 <print_oled>:

char buffer[946];
char buffer2[20];

void print_oled()
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af02      	add	r7, sp, #8
		ssd1306_Fill(Black);
 800155a:	2000      	movs	r0, #0
 800155c:	f000 fd78 	bl	8002050 <ssd1306_Fill>


		ssd1306_SetCursor(2,0);
 8001560:	2100      	movs	r1, #0
 8001562:	2002      	movs	r0, #2
 8001564:	f000 fec0 	bl	80022e8 <ssd1306_SetCursor>
		sprintf(buffer,"%d, %d, %d \n", MPU6050.Accel_X_RAW, MPU6050.Accel_Y_RAW, MPU6050.Accel_Z_RAW);
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <print_oled+0xcc>)
 800156a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156e:	461a      	mov	r2, r3
 8001570:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <print_oled+0xcc>)
 8001572:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001576:	4619      	mov	r1, r3
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <print_oled+0xcc>)
 800157a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	460b      	mov	r3, r1
 8001582:	4928      	ldr	r1, [pc, #160]	; (8001624 <print_oled+0xd0>)
 8001584:	4828      	ldr	r0, [pc, #160]	; (8001628 <print_oled+0xd4>)
 8001586:	f009 f9d9 	bl	800a93c <siprintf>
		ssd1306_WriteString(buffer, Font_7x10, White);
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <print_oled+0xd8>)
 800158c:	2201      	movs	r2, #1
 800158e:	9200      	str	r2, [sp, #0]
 8001590:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001592:	4825      	ldr	r0, [pc, #148]	; (8001628 <print_oled+0xd4>)
 8001594:	f000 fe82 	bl	800229c <ssd1306_WriteString>
		ssd1306_Line(1,18,127,18,White);
 8001598:	2301      	movs	r3, #1
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2312      	movs	r3, #18
 800159e:	227f      	movs	r2, #127	; 0x7f
 80015a0:	2112      	movs	r1, #18
 80015a2:	2001      	movs	r0, #1
 80015a4:	f000 feb8 	bl	8002318 <ssd1306_Line>


		ssd1306_SetCursor(2, 28);
 80015a8:	211c      	movs	r1, #28
 80015aa:	2002      	movs	r0, #2
 80015ac:	f000 fe9c 	bl	80022e8 <ssd1306_SetCursor>
		sprintf(buffer,"% 3.4lfX,% 3.4lfY \n", MPU6050.KalmanAngleX, MPU6050.KalmanAngleY);
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <print_oled+0xcc>)
 80015b2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <print_oled+0xcc>)
 80015b8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80015bc:	e9cd 2300 	strd	r2, r3, [sp]
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	491a      	ldr	r1, [pc, #104]	; (8001630 <print_oled+0xdc>)
 80015c6:	4818      	ldr	r0, [pc, #96]	; (8001628 <print_oled+0xd4>)
 80015c8:	f009 f9b8 	bl	800a93c <siprintf>
		ssd1306_WriteString(buffer, Font_7x10, White);
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <print_oled+0xd8>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	9200      	str	r2, [sp, #0]
 80015d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d4:	4814      	ldr	r0, [pc, #80]	; (8001628 <print_oled+0xd4>)
 80015d6:	f000 fe61 	bl	800229c <ssd1306_WriteString>
		ssd1306_Line(1,48,127,48,White);
 80015da:	2301      	movs	r3, #1
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2330      	movs	r3, #48	; 0x30
 80015e0:	227f      	movs	r2, #127	; 0x7f
 80015e2:	2130      	movs	r1, #48	; 0x30
 80015e4:	2001      	movs	r0, #1
 80015e6:	f000 fe97 	bl	8002318 <ssd1306_Line>


		ssd1306_SetCursor(0, 54);
 80015ea:	2136      	movs	r1, #54	; 0x36
 80015ec:	2000      	movs	r0, #0
 80015ee:	f000 fe7b 	bl	80022e8 <ssd1306_SetCursor>
		sprintf(buffer,"Temp=   %fc", MPU6050.Temperature);
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <print_oled+0xcc>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffae 	bl	8000558 <__aeabi_f2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <print_oled+0xe0>)
 8001602:	4809      	ldr	r0, [pc, #36]	; (8001628 <print_oled+0xd4>)
 8001604:	f009 f99a 	bl	800a93c <siprintf>
		ssd1306_WriteString(buffer, Font_7x10, White);
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <print_oled+0xd8>)
 800160a:	2201      	movs	r2, #1
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001610:	4805      	ldr	r0, [pc, #20]	; (8001628 <print_oled+0xd4>)
 8001612:	f000 fe43 	bl	800229c <ssd1306_WriteString>


		ssd1306_UpdateScreen();
 8001616:	f000 fd33 	bl	8002080 <ssd1306_UpdateScreen>
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000448 	.word	0x20000448
 8001624:	0800d310 	.word	0x0800d310
 8001628:	200004a0 	.word	0x200004a0
 800162c:	0800dafc 	.word	0x0800dafc
 8001630:	0800d320 	.word	0x0800d320
 8001634:	0800d334 	.word	0x0800d334

08001638 <print_lcd>:


void print_lcd()
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0

	HD44780_SetCursor(0,0);
 800163c:	2100      	movs	r1, #0
 800163e:	2000      	movs	r0, #0
 8001640:	f7ff fe28 	bl	8001294 <HD44780_SetCursor>
	sprintf(buffer2,"%lfX", MPU6050.Gx);
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <print_lcd+0x5c>)
 8001646:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800164a:	4913      	ldr	r1, [pc, #76]	; (8001698 <print_lcd+0x60>)
 800164c:	4813      	ldr	r0, [pc, #76]	; (800169c <print_lcd+0x64>)
 800164e:	f009 f975 	bl	800a93c <siprintf>
	HD44780_PrintStr(buffer2);
 8001652:	4812      	ldr	r0, [pc, #72]	; (800169c <print_lcd+0x64>)
 8001654:	f7ff fe8f 	bl	8001376 <HD44780_PrintStr>

	HD44780_SetCursor(0,1);
 8001658:	2101      	movs	r1, #1
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff fe1a 	bl	8001294 <HD44780_SetCursor>
	sprintf(buffer2,"%lfY", MPU6050.Gy);
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <print_lcd+0x5c>)
 8001662:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001666:	490e      	ldr	r1, [pc, #56]	; (80016a0 <print_lcd+0x68>)
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <print_lcd+0x64>)
 800166a:	f009 f967 	bl	800a93c <siprintf>
	HD44780_PrintStr(buffer2);
 800166e:	480b      	ldr	r0, [pc, #44]	; (800169c <print_lcd+0x64>)
 8001670:	f7ff fe81 	bl	8001376 <HD44780_PrintStr>

	HD44780_SetCursor(0,2);
 8001674:	2102      	movs	r1, #2
 8001676:	2000      	movs	r0, #0
 8001678:	f7ff fe0c 	bl	8001294 <HD44780_SetCursor>
	sprintf(buffer2,"%lfZ", MPU6050.Gz);
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <print_lcd+0x5c>)
 800167e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001682:	4908      	ldr	r1, [pc, #32]	; (80016a4 <print_lcd+0x6c>)
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <print_lcd+0x64>)
 8001686:	f009 f959 	bl	800a93c <siprintf>
	HD44780_PrintStr(buffer2);
 800168a:	4804      	ldr	r0, [pc, #16]	; (800169c <print_lcd+0x64>)
 800168c:	f7ff fe73 	bl	8001376 <HD44780_PrintStr>

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000448 	.word	0x20000448
 8001698:	0800d340 	.word	0x0800d340
 800169c:	20000854 	.word	0x20000854
 80016a0:	0800d348 	.word	0x0800d348
 80016a4:	0800d350 	.word	0x0800d350

080016a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ac:	f001 f830 	bl	8002710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b0:	f000 f826 	bl	8001700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b4:	f7ff fbfe 	bl	8000eb4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016b8:	f7ff fc6a 	bl	8000f90 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80016bc:	f007 ff3e 	bl	800953c <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 80016c0:	f7ff fc94 	bl	8000fec <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80016c4:	f000 fc5a 	bl	8001f7c <ssd1306_Init>


  /* Initialize */
  HD44780_Init(4);
 80016c8:	2004      	movs	r0, #4
 80016ca:	f7ff fd49 	bl	8001160 <HD44780_Init>

  /* Clear buffer */
  HD44780_Clear();
 80016ce:	f7ff fdcb 	bl	8001268 <HD44780_Clear>


  /* Blink cursor */
//  HD44780_Blink();

  while (MPU6050_Init(&hi2c2) == 1);
 80016d2:	bf00      	nop
 80016d4:	4808      	ldr	r0, [pc, #32]	; (80016f8 <main+0x50>)
 80016d6:	f000 f880 	bl	80017da <MPU6050_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d0f9      	beq.n	80016d4 <main+0x2c>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  MPU6050_Read_All(&hi2c2, &MPU6050);
 80016e0:	4906      	ldr	r1, [pc, #24]	; (80016fc <main+0x54>)
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <main+0x50>)
 80016e4:	f000 f8d0 	bl	8001888 <MPU6050_Read_All>
	   HAL_Delay (100);
 80016e8:	2064      	movs	r0, #100	; 0x64
 80016ea:	f001 f883 	bl	80027f4 <HAL_Delay>

	   print_oled();
 80016ee:	f7ff ff31 	bl	8001554 <print_oled>
	  //CDC_Transmit_FS((uint8_t *) data, strlen(data));
	   print_lcd();
 80016f2:	f7ff ffa1 	bl	8001638 <print_lcd>
	  MPU6050_Read_All(&hi2c2, &MPU6050);
 80016f6:	e7f3      	b.n	80016e0 <main+0x38>
 80016f8:	200003e8 	.word	0x200003e8
 80016fc:	20000448 	.word	0x20000448

08001700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b094      	sub	sp, #80	; 0x50
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f107 0320 	add.w	r3, r7, #32
 800170a:	2230      	movs	r2, #48	; 0x30
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f009 f991 	bl	800aa36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <SystemClock_Config+0xc8>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	4a26      	ldr	r2, [pc, #152]	; (80017c8 <SystemClock_Config+0xc8>)
 800172e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001732:	6413      	str	r3, [r2, #64]	; 0x40
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <SystemClock_Config+0xc8>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	4b21      	ldr	r3, [pc, #132]	; (80017cc <SystemClock_Config+0xcc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a20      	ldr	r2, [pc, #128]	; (80017cc <SystemClock_Config+0xcc>)
 800174a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <SystemClock_Config+0xcc>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800175c:	2301      	movs	r3, #1
 800175e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001766:	2302      	movs	r3, #2
 8001768:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800176e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001770:	2319      	movs	r3, #25
 8001772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001774:	23c0      	movs	r3, #192	; 0xc0
 8001776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001778:	2302      	movs	r3, #2
 800177a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800177c:	2304      	movs	r3, #4
 800177e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001780:	f107 0320 	add.w	r3, r7, #32
 8001784:	4618      	mov	r0, r3
 8001786:	f003 fec5 	bl	8005514 <HAL_RCC_OscConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001790:	f000 f81e 	bl	80017d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001794:	230f      	movs	r3, #15
 8001796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001798:	2302      	movs	r3, #2
 800179a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	2103      	movs	r1, #3
 80017b0:	4618      	mov	r0, r3
 80017b2:	f004 f927 	bl	8005a04 <HAL_RCC_ClockConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017bc:	f000 f808 	bl	80017d0 <Error_Handler>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3750      	adds	r7, #80	; 0x50
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40007000 	.word	0x40007000

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <Error_Handler+0x8>

080017da <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b088      	sub	sp, #32
 80017de:	af04      	add	r7, sp, #16
 80017e0:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80017e2:	2364      	movs	r3, #100	; 0x64
 80017e4:	9302      	str	r3, [sp, #8]
 80017e6:	2301      	movs	r3, #1
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	f107 030f 	add.w	r3, r7, #15
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2301      	movs	r3, #1
 80017f2:	2275      	movs	r2, #117	; 0x75
 80017f4:	21d0      	movs	r1, #208	; 0xd0
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f001 fe0c 	bl	8003414 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	2b68      	cmp	r3, #104	; 0x68
 8001800:	d13d      	bne.n	800187e <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001806:	2364      	movs	r3, #100	; 0x64
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	2301      	movs	r3, #1
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	f107 030e 	add.w	r3, r7, #14
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2301      	movs	r3, #1
 8001816:	226b      	movs	r2, #107	; 0x6b
 8001818:	21d0      	movs	r1, #208	; 0xd0
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f001 fd00 	bl	8003220 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001820:	2307      	movs	r3, #7
 8001822:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001824:	2364      	movs	r3, #100	; 0x64
 8001826:	9302      	str	r3, [sp, #8]
 8001828:	2301      	movs	r3, #1
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	f107 030e 	add.w	r3, r7, #14
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2301      	movs	r3, #1
 8001834:	2219      	movs	r2, #25
 8001836:	21d0      	movs	r1, #208	; 0xd0
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f001 fcf1 	bl	8003220 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800183e:	2300      	movs	r3, #0
 8001840:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001842:	2364      	movs	r3, #100	; 0x64
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	2301      	movs	r3, #1
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	f107 030e 	add.w	r3, r7, #14
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2301      	movs	r3, #1
 8001852:	221c      	movs	r2, #28
 8001854:	21d0      	movs	r1, #208	; 0xd0
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f001 fce2 	bl	8003220 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800185c:	2300      	movs	r3, #0
 800185e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001860:	2364      	movs	r3, #100	; 0x64
 8001862:	9302      	str	r3, [sp, #8]
 8001864:	2301      	movs	r3, #1
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	f107 030e 	add.w	r3, r7, #14
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2301      	movs	r3, #1
 8001870:	221b      	movs	r2, #27
 8001872:	21d0      	movs	r1, #208	; 0xd0
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f001 fcd3 	bl	8003220 <HAL_I2C_Mem_Write>
        return 0;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <MPU6050_Init+0xa6>
    }
    return 1;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800188c:	b094      	sub	sp, #80	; 0x50
 800188e:	af04      	add	r7, sp, #16
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001894:	2364      	movs	r3, #100	; 0x64
 8001896:	9302      	str	r3, [sp, #8]
 8001898:	230e      	movs	r3, #14
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	f107 0308 	add.w	r3, r7, #8
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2301      	movs	r3, #1
 80018a4:	223b      	movs	r2, #59	; 0x3b
 80018a6:	21d0      	movs	r1, #208	; 0xd0
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f001 fdb3 	bl	8003414 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80018ae:	7a3b      	ldrb	r3, [r7, #8]
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	7a7b      	ldrb	r3, [r7, #9]
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b21a      	sxth	r2, r3
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80018c0:	7abb      	ldrb	r3, [r7, #10]
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	b21a      	sxth	r2, r3
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	4313      	orrs	r3, r2
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80018d2:	7b3b      	ldrb	r3, [r7, #12]
 80018d4:	021b      	lsls	r3, r3, #8
 80018d6:	b21a      	sxth	r2, r3
 80018d8:	7b7b      	ldrb	r3, [r7, #13]
 80018da:	b21b      	sxth	r3, r3
 80018dc:	4313      	orrs	r3, r2
 80018de:	b21a      	sxth	r2, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	b21b      	sxth	r3, r3
 80018ee:	4313      	orrs	r3, r2
 80018f0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80018f2:	7c3b      	ldrb	r3, [r7, #16]
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	b21a      	sxth	r2, r3
 80018f8:	7c7b      	ldrb	r3, [r7, #17]
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b21a      	sxth	r2, r3
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001904:	7cbb      	ldrb	r3, [r7, #18]
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	b21a      	sxth	r2, r3
 800190a:	7cfb      	ldrb	r3, [r7, #19]
 800190c:	b21b      	sxth	r3, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	b21a      	sxth	r2, r3
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001916:	7d3b      	ldrb	r3, [r7, #20]
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	b21a      	sxth	r2, r3
 800191c:	7d7b      	ldrb	r3, [r7, #21]
 800191e:	b21b      	sxth	r3, r3
 8001920:	4313      	orrs	r3, r2
 8001922:	b21a      	sxth	r2, r3
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fe00 	bl	8000534 <__aeabi_i2d>
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	4bbd      	ldr	r3, [pc, #756]	; (8001c30 <MPU6050_Read_All+0x3a8>)
 800193a:	f7fe ff8f 	bl	800085c <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	6839      	ldr	r1, [r7, #0]
 8001944:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fdf0 	bl	8000534 <__aeabi_i2d>
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	4bb5      	ldr	r3, [pc, #724]	; (8001c30 <MPU6050_Read_All+0x3a8>)
 800195a:	f7fe ff7f 	bl	800085c <__aeabi_ddiv>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	6839      	ldr	r1, [r7, #0]
 8001964:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fde0 	bl	8000534 <__aeabi_i2d>
 8001974:	a3a8      	add	r3, pc, #672	; (adr r3, 8001c18 <MPU6050_Read_All+0x390>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe ff6f 	bl	800085c <__aeabi_ddiv>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	6839      	ldr	r1, [r7, #0]
 8001984:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001988:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001994:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001c34 <MPU6050_Read_All+0x3ac>
 8001998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001c38 <MPU6050_Read_All+0x3b0>
 80019a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fdbf 	bl	8000534 <__aeabi_i2d>
 80019b6:	a39a      	add	r3, pc, #616	; (adr r3, 8001c20 <MPU6050_Read_All+0x398>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe ff4e 	bl	800085c <__aeabi_ddiv>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fdaf 	bl	8000534 <__aeabi_i2d>
 80019d6:	a392      	add	r3, pc, #584	; (adr r3, 8001c20 <MPU6050_Read_All+0x398>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	f7fe ff3e 	bl	800085c <__aeabi_ddiv>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	6839      	ldr	r1, [r7, #0]
 80019e6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fd9f 	bl	8000534 <__aeabi_i2d>
 80019f6:	a38a      	add	r3, pc, #552	; (adr r3, 8001c20 <MPU6050_Read_All+0x398>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	f7fe ff2e 	bl	800085c <__aeabi_ddiv>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	6839      	ldr	r1, [r7, #0]
 8001a06:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001a0a:	f000 fee7 	bl	80027dc <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	4b8a      	ldr	r3, [pc, #552]	; (8001c3c <MPU6050_Read_All+0x3b4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd7c 	bl	8000514 <__aeabi_ui2d>
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	4b87      	ldr	r3, [pc, #540]	; (8001c40 <MPU6050_Read_All+0x3b8>)
 8001a22:	f7fe ff1b 	bl	800085c <__aeabi_ddiv>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001a2e:	f000 fed5 	bl	80027dc <HAL_GetTick>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4a81      	ldr	r2, [pc, #516]	; (8001c3c <MPU6050_Read_All+0x3b4>)
 8001a36:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a46:	fb03 f202 	mul.w	r2, r3, r2
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a50:	4619      	mov	r1, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a58:	fb01 f303 	mul.w	r3, r1, r3
 8001a5c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd68 	bl	8000534 <__aeabi_i2d>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	ec43 2b10 	vmov	d0, r2, r3
 8001a6c:	f00b f8c2 	bl	800cbf4 <sqrt>
 8001a70:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a80:	f7ff f82a 	bl	8000ad8 <__aeabi_dcmpeq>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d11f      	bne.n	8001aca <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fd4f 	bl	8000534 <__aeabi_i2d>
 8001a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a9a:	f7fe fedf 	bl	800085c <__aeabi_ddiv>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	ec43 2b17 	vmov	d7, r2, r3
 8001aa6:	eeb0 0a47 	vmov.f32	s0, s14
 8001aaa:	eef0 0a67 	vmov.f32	s1, s15
 8001aae:	f00b f8cf 	bl	800cc50 <atan>
 8001ab2:	ec51 0b10 	vmov	r0, r1, d0
 8001ab6:	a35c      	add	r3, pc, #368	; (adr r3, 8001c28 <MPU6050_Read_All+0x3a0>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe fda4 	bl	8000608 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001ac8:	e005      	b.n	8001ad6 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001adc:	425b      	negs	r3, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fd28 	bl	8000534 <__aeabi_i2d>
 8001ae4:	4682      	mov	sl, r0
 8001ae6:	468b      	mov	fp, r1
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fd20 	bl	8000534 <__aeabi_i2d>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	ec43 2b11 	vmov	d1, r2, r3
 8001afc:	ec4b ab10 	vmov	d0, sl, fp
 8001b00:	f00b f876 	bl	800cbf0 <atan2>
 8001b04:	ec51 0b10 	vmov	r0, r1, d0
 8001b08:	a347      	add	r3, pc, #284	; (adr r3, 8001c28 <MPU6050_Read_All+0x3a0>)
 8001b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0e:	f7fe fd7b 	bl	8000608 <__aeabi_dmul>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <MPU6050_Read_All+0x3bc>)
 8001b20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b24:	f7fe ffe2 	bl	8000aec <__aeabi_dcmplt>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00a      	beq.n	8001b44 <MPU6050_Read_All+0x2bc>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	4b43      	ldr	r3, [pc, #268]	; (8001c48 <MPU6050_Read_All+0x3c0>)
 8001b3a:	f7fe fff5 	bl	8000b28 <__aeabi_dcmpgt>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d114      	bne.n	8001b6e <MPU6050_Read_All+0x2e6>
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <MPU6050_Read_All+0x3c0>)
 8001b4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b4e:	f7fe ffeb 	bl	8000b28 <__aeabi_dcmpgt>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d015      	beq.n	8001b84 <MPU6050_Read_All+0x2fc>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <MPU6050_Read_All+0x3bc>)
 8001b64:	f7fe ffc2 	bl	8000aec <__aeabi_dcmplt>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00a      	beq.n	8001b84 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8001b6e:	4937      	ldr	r1, [pc, #220]	; (8001c4c <MPU6050_Read_All+0x3c4>)
 8001b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b74:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001b78:	6839      	ldr	r1, [r7, #0]
 8001b7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b7e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001b82:	e014      	b.n	8001bae <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001b8a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001b8e:	eeb0 1a47 	vmov.f32	s2, s14
 8001b92:	eef0 1a67 	vmov.f32	s3, s15
 8001b96:	ed97 0b06 	vldr	d0, [r7, #24]
 8001b9a:	482c      	ldr	r0, [pc, #176]	; (8001c4c <MPU6050_Read_All+0x3c4>)
 8001b9c:	f000 f85a 	bl	8001c54 <Kalman_getAngle>
 8001ba0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ba4:	eef0 7a60 	vmov.f32	s15, s1
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001bb4:	4690      	mov	r8, r2
 8001bb6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <MPU6050_Read_All+0x3c0>)
 8001bc0:	4640      	mov	r0, r8
 8001bc2:	4649      	mov	r1, r9
 8001bc4:	f7fe ffb0 	bl	8000b28 <__aeabi_dcmpgt>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d008      	beq.n	8001be0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001bd4:	4614      	mov	r4, r2
 8001bd6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001be6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001bea:	eeb0 1a47 	vmov.f32	s2, s14
 8001bee:	eef0 1a67 	vmov.f32	s3, s15
 8001bf2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001bf6:	4816      	ldr	r0, [pc, #88]	; (8001c50 <MPU6050_Read_All+0x3c8>)
 8001bf8:	f000 f82c 	bl	8001c54 <Kalman_getAngle>
 8001bfc:	eeb0 7a40 	vmov.f32	s14, s0
 8001c00:	eef0 7a60 	vmov.f32	s15, s1
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8001c0a:	bf00      	nop
 8001c0c:	3740      	adds	r7, #64	; 0x40
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c14:	f3af 8000 	nop.w
 8001c18:	00000000 	.word	0x00000000
 8001c1c:	40cc2900 	.word	0x40cc2900
 8001c20:	00000000 	.word	0x00000000
 8001c24:	40606000 	.word	0x40606000
 8001c28:	1a63c1f8 	.word	0x1a63c1f8
 8001c2c:	404ca5dc 	.word	0x404ca5dc
 8001c30:	40d00000 	.word	0x40d00000
 8001c34:	43aa0000 	.word	0x43aa0000
 8001c38:	42121eb8 	.word	0x42121eb8
 8001c3c:	20000868 	.word	0x20000868
 8001c40:	408f4000 	.word	0x408f4000
 8001c44:	c0568000 	.word	0xc0568000
 8001c48:	40568000 	.word	0x40568000
 8001c4c:	20000058 	.word	0x20000058
 8001c50:	20000010 	.word	0x20000010

08001c54 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001c54:	b5b0      	push	{r4, r5, r7, lr}
 8001c56:	b096      	sub	sp, #88	; 0x58
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	61f8      	str	r0, [r7, #28]
 8001c5c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001c60:	ed87 1b02 	vstr	d1, [r7, #8]
 8001c64:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c72:	f7fe fb11 	bl	8000298 <__aeabi_dsub>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001c84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c8c:	f7fe fcbc 	bl	8000608 <__aeabi_dmul>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4620      	mov	r0, r4
 8001c96:	4629      	mov	r1, r5
 8001c98:	f7fe fb00 	bl	800029c <__adddf3>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	69f9      	ldr	r1, [r7, #28]
 8001ca2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cb6:	f7fe fca7 	bl	8000608 <__aeabi_dmul>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001cc8:	f7fe fae6 	bl	8000298 <__aeabi_dsub>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001cda:	f7fe fadd 	bl	8000298 <__aeabi_dsub>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	f7fe fad6 	bl	800029c <__adddf3>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cfc:	f7fe fc84 	bl	8000608 <__aeabi_dmul>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4620      	mov	r0, r4
 8001d06:	4629      	mov	r1, r5
 8001d08:	f7fe fac8 	bl	800029c <__adddf3>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	69f9      	ldr	r1, [r7, #28]
 8001d12:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d26:	f7fe fc6f 	bl	8000608 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4620      	mov	r0, r4
 8001d30:	4629      	mov	r1, r5
 8001d32:	f7fe fab1 	bl	8000298 <__aeabi_dsub>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	69f9      	ldr	r1, [r7, #28]
 8001d3c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d50:	f7fe fc5a 	bl	8000608 <__aeabi_dmul>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	f7fe fa9c 	bl	8000298 <__aeabi_dsub>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	69f9      	ldr	r1, [r7, #28]
 8001d66:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d7a:	f7fe fc45 	bl	8000608 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4620      	mov	r0, r4
 8001d84:	4629      	mov	r1, r5
 8001d86:	f7fe fa89 	bl	800029c <__adddf3>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	69f9      	ldr	r1, [r7, #28]
 8001d90:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001da0:	f7fe fa7c 	bl	800029c <__adddf3>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001db2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001db6:	f7fe fd51 	bl	800085c <__aeabi_ddiv>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001dc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001dcc:	f7fe fd46 	bl	800085c <__aeabi_ddiv>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001dde:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001de2:	f7fe fa59 	bl	8000298 <__aeabi_dsub>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001df4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001df8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001dfc:	f7fe fc04 	bl	8000608 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4620      	mov	r0, r4
 8001e06:	4629      	mov	r1, r5
 8001e08:	f7fe fa48 	bl	800029c <__adddf3>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	69f9      	ldr	r1, [r7, #28]
 8001e12:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001e1c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e24:	f7fe fbf0 	bl	8000608 <__aeabi_dmul>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	4629      	mov	r1, r5
 8001e30:	f7fe fa34 	bl	800029c <__adddf3>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	69f9      	ldr	r1, [r7, #28]
 8001e3a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001e44:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001e4e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001e58:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e60:	f7fe fbd2 	bl	8000608 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4620      	mov	r0, r4
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	f7fe fa14 	bl	8000298 <__aeabi_dsub>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	69f9      	ldr	r1, [r7, #28]
 8001e76:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001e80:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e88:	f7fe fbbe 	bl	8000608 <__aeabi_dmul>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4620      	mov	r0, r4
 8001e92:	4629      	mov	r1, r5
 8001e94:	f7fe fa00 	bl	8000298 <__aeabi_dsub>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	69f9      	ldr	r1, [r7, #28]
 8001e9e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001ea8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001eac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001eb0:	f7fe fbaa 	bl	8000608 <__aeabi_dmul>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4620      	mov	r0, r4
 8001eba:	4629      	mov	r1, r5
 8001ebc:	f7fe f9ec 	bl	8000298 <__aeabi_dsub>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	69f9      	ldr	r1, [r7, #28]
 8001ec6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001ed0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ed4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ed8:	f7fe fb96 	bl	8000608 <__aeabi_dmul>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	4629      	mov	r1, r5
 8001ee4:	f7fe f9d8 	bl	8000298 <__aeabi_dsub>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	69f9      	ldr	r1, [r7, #28]
 8001eee:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ef8:	ec43 2b17 	vmov	d7, r2, r3
};
 8001efc:	eeb0 0a47 	vmov.f32	s0, s14
 8001f00:	eef0 0a67 	vmov.f32	s1, s15
 8001f04:	3758      	adds	r7, #88	; 0x58
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bdb0      	pop	{r4, r5, r7, pc}

08001f0a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af04      	add	r7, sp, #16
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
 8001f26:	9302      	str	r3, [sp, #8]
 8001f28:	2301      	movs	r3, #1
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	1dfb      	adds	r3, r7, #7
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2301      	movs	r3, #1
 8001f32:	2200      	movs	r2, #0
 8001f34:	2178      	movs	r1, #120	; 0x78
 8001f36:	4803      	ldr	r0, [pc, #12]	; (8001f44 <ssd1306_WriteCommand+0x2c>)
 8001f38:	f001 f972 	bl	8003220 <HAL_I2C_Mem_Write>
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000394 	.word	0x20000394

08001f48 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af04      	add	r7, sp, #16
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5a:	9202      	str	r2, [sp, #8]
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2301      	movs	r3, #1
 8001f64:	2240      	movs	r2, #64	; 0x40
 8001f66:	2178      	movs	r1, #120	; 0x78
 8001f68:	4803      	ldr	r0, [pc, #12]	; (8001f78 <ssd1306_WriteData+0x30>)
 8001f6a:	f001 f959 	bl	8003220 <HAL_I2C_Mem_Write>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000394 	.word	0x20000394

08001f7c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001f80:	f7ff ffc3 	bl	8001f0a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001f84:	2064      	movs	r0, #100	; 0x64
 8001f86:	f000 fc35 	bl	80027f4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f000 fa44 	bl	8002418 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001f90:	2020      	movs	r0, #32
 8001f92:	f7ff ffc1 	bl	8001f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001f96:	2000      	movs	r0, #0
 8001f98:	f7ff ffbe 	bl	8001f18 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f9c:	20b0      	movs	r0, #176	; 0xb0
 8001f9e:	f7ff ffbb 	bl	8001f18 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001fa2:	20c8      	movs	r0, #200	; 0xc8
 8001fa4:	f7ff ffb8 	bl	8001f18 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff ffb5 	bl	8001f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001fae:	2010      	movs	r0, #16
 8001fb0:	f7ff ffb2 	bl	8001f18 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001fb4:	2040      	movs	r0, #64	; 0x40
 8001fb6:	f7ff ffaf 	bl	8001f18 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001fba:	20ff      	movs	r0, #255	; 0xff
 8001fbc:	f000 fa18 	bl	80023f0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001fc0:	20a1      	movs	r0, #161	; 0xa1
 8001fc2:	f7ff ffa9 	bl	8001f18 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001fc6:	20a6      	movs	r0, #166	; 0xa6
 8001fc8:	f7ff ffa6 	bl	8001f18 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001fcc:	20a8      	movs	r0, #168	; 0xa8
 8001fce:	f7ff ffa3 	bl	8001f18 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001fd2:	203f      	movs	r0, #63	; 0x3f
 8001fd4:	f7ff ffa0 	bl	8001f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001fd8:	20a4      	movs	r0, #164	; 0xa4
 8001fda:	f7ff ff9d 	bl	8001f18 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001fde:	20d3      	movs	r0, #211	; 0xd3
 8001fe0:	f7ff ff9a 	bl	8001f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f7ff ff97 	bl	8001f18 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001fea:	20d5      	movs	r0, #213	; 0xd5
 8001fec:	f7ff ff94 	bl	8001f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ff0:	20f0      	movs	r0, #240	; 0xf0
 8001ff2:	f7ff ff91 	bl	8001f18 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001ff6:	20d9      	movs	r0, #217	; 0xd9
 8001ff8:	f7ff ff8e 	bl	8001f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001ffc:	2022      	movs	r0, #34	; 0x22
 8001ffe:	f7ff ff8b 	bl	8001f18 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002002:	20da      	movs	r0, #218	; 0xda
 8002004:	f7ff ff88 	bl	8001f18 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002008:	2012      	movs	r0, #18
 800200a:	f7ff ff85 	bl	8001f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800200e:	20db      	movs	r0, #219	; 0xdb
 8002010:	f7ff ff82 	bl	8001f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002014:	2020      	movs	r0, #32
 8002016:	f7ff ff7f 	bl	8001f18 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800201a:	208d      	movs	r0, #141	; 0x8d
 800201c:	f7ff ff7c 	bl	8001f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002020:	2014      	movs	r0, #20
 8002022:	f7ff ff79 	bl	8001f18 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002026:	2001      	movs	r0, #1
 8002028:	f000 f9f6 	bl	8002418 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800202c:	2000      	movs	r0, #0
 800202e:	f000 f80f 	bl	8002050 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002032:	f000 f825 	bl	8002080 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <ssd1306_Init+0xd0>)
 8002038:	2200      	movs	r2, #0
 800203a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <ssd1306_Init+0xd0>)
 800203e:	2200      	movs	r2, #0
 8002040:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002042:	4b02      	ldr	r3, [pc, #8]	; (800204c <ssd1306_Init+0xd0>)
 8002044:	2201      	movs	r2, #1
 8002046:	711a      	strb	r2, [r3, #4]
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000c6c 	.word	0x20000c6c

08002050 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <ssd1306_Fill+0x14>
 8002060:	2300      	movs	r3, #0
 8002062:	e000      	b.n	8002066 <ssd1306_Fill+0x16>
 8002064:	23ff      	movs	r3, #255	; 0xff
 8002066:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800206a:	4619      	mov	r1, r3
 800206c:	4803      	ldr	r0, [pc, #12]	; (800207c <ssd1306_Fill+0x2c>)
 800206e:	f008 fce2 	bl	800aa36 <memset>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	2000086c 	.word	0x2000086c

08002080 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002086:	2300      	movs	r3, #0
 8002088:	71fb      	strb	r3, [r7, #7]
 800208a:	e016      	b.n	80020ba <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	3b50      	subs	r3, #80	; 0x50
 8002090:	b2db      	uxtb	r3, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff40 	bl	8001f18 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002098:	2000      	movs	r0, #0
 800209a:	f7ff ff3d 	bl	8001f18 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800209e:	2010      	movs	r0, #16
 80020a0:	f7ff ff3a 	bl	8001f18 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	01db      	lsls	r3, r3, #7
 80020a8:	4a08      	ldr	r2, [pc, #32]	; (80020cc <ssd1306_UpdateScreen+0x4c>)
 80020aa:	4413      	add	r3, r2
 80020ac:	2180      	movs	r1, #128	; 0x80
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff4a 	bl	8001f48 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	3301      	adds	r3, #1
 80020b8:	71fb      	strb	r3, [r7, #7]
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	2b07      	cmp	r3, #7
 80020be:	d9e5      	bls.n	800208c <ssd1306_UpdateScreen+0xc>
    }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000086c 	.word	0x2000086c

080020d0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
 80020da:	460b      	mov	r3, r1
 80020dc:	71bb      	strb	r3, [r7, #6]
 80020de:	4613      	mov	r3, r2
 80020e0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	db3d      	blt.n	8002166 <ssd1306_DrawPixel+0x96>
 80020ea:	79bb      	ldrb	r3, [r7, #6]
 80020ec:	2b3f      	cmp	r3, #63	; 0x3f
 80020ee:	d83a      	bhi.n	8002166 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80020f0:	797b      	ldrb	r3, [r7, #5]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d11a      	bne.n	800212c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80020f6:	79fa      	ldrb	r2, [r7, #7]
 80020f8:	79bb      	ldrb	r3, [r7, #6]
 80020fa:	08db      	lsrs	r3, r3, #3
 80020fc:	b2d8      	uxtb	r0, r3
 80020fe:	4603      	mov	r3, r0
 8002100:	01db      	lsls	r3, r3, #7
 8002102:	4413      	add	r3, r2
 8002104:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <ssd1306_DrawPixel+0xa4>)
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	b25a      	sxtb	r2, r3
 800210a:	79bb      	ldrb	r3, [r7, #6]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	b25b      	sxtb	r3, r3
 8002118:	4313      	orrs	r3, r2
 800211a:	b259      	sxtb	r1, r3
 800211c:	79fa      	ldrb	r2, [r7, #7]
 800211e:	4603      	mov	r3, r0
 8002120:	01db      	lsls	r3, r3, #7
 8002122:	4413      	add	r3, r2
 8002124:	b2c9      	uxtb	r1, r1
 8002126:	4a13      	ldr	r2, [pc, #76]	; (8002174 <ssd1306_DrawPixel+0xa4>)
 8002128:	54d1      	strb	r1, [r2, r3]
 800212a:	e01d      	b.n	8002168 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800212c:	79fa      	ldrb	r2, [r7, #7]
 800212e:	79bb      	ldrb	r3, [r7, #6]
 8002130:	08db      	lsrs	r3, r3, #3
 8002132:	b2d8      	uxtb	r0, r3
 8002134:	4603      	mov	r3, r0
 8002136:	01db      	lsls	r3, r3, #7
 8002138:	4413      	add	r3, r2
 800213a:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <ssd1306_DrawPixel+0xa4>)
 800213c:	5cd3      	ldrb	r3, [r2, r3]
 800213e:	b25a      	sxtb	r2, r3
 8002140:	79bb      	ldrb	r3, [r7, #6]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	2101      	movs	r1, #1
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	b25b      	sxtb	r3, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	b25b      	sxtb	r3, r3
 8002152:	4013      	ands	r3, r2
 8002154:	b259      	sxtb	r1, r3
 8002156:	79fa      	ldrb	r2, [r7, #7]
 8002158:	4603      	mov	r3, r0
 800215a:	01db      	lsls	r3, r3, #7
 800215c:	4413      	add	r3, r2
 800215e:	b2c9      	uxtb	r1, r1
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <ssd1306_DrawPixel+0xa4>)
 8002162:	54d1      	strb	r1, [r2, r3]
 8002164:	e000      	b.n	8002168 <ssd1306_DrawPixel+0x98>
        return;
 8002166:	bf00      	nop
    }
}
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	2000086c 	.word	0x2000086c

08002178 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b089      	sub	sp, #36	; 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	4604      	mov	r4, r0
 8002180:	4638      	mov	r0, r7
 8002182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002186:	4623      	mov	r3, r4
 8002188:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	2b1f      	cmp	r3, #31
 800218e:	d902      	bls.n	8002196 <ssd1306_WriteChar+0x1e>
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	2b7e      	cmp	r3, #126	; 0x7e
 8002194:	d901      	bls.n	800219a <ssd1306_WriteChar+0x22>
        return 0;
 8002196:	2300      	movs	r3, #0
 8002198:	e079      	b.n	800228e <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800219a:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <ssd1306_WriteChar+0x120>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	783b      	ldrb	r3, [r7, #0]
 80021a2:	4413      	add	r3, r2
 80021a4:	2b80      	cmp	r3, #128	; 0x80
 80021a6:	dc06      	bgt.n	80021b6 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80021a8:	4b3b      	ldr	r3, [pc, #236]	; (8002298 <ssd1306_WriteChar+0x120>)
 80021aa:	885b      	ldrh	r3, [r3, #2]
 80021ac:	461a      	mov	r2, r3
 80021ae:	787b      	ldrb	r3, [r7, #1]
 80021b0:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80021b2:	2b40      	cmp	r3, #64	; 0x40
 80021b4:	dd01      	ble.n	80021ba <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e069      	b.n	800228e <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	e04e      	b.n	800225e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	3b20      	subs	r3, #32
 80021c6:	7879      	ldrb	r1, [r7, #1]
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4619      	mov	r1, r3
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	440b      	add	r3, r1
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	e036      	b.n	800224e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80021f0:	4b29      	ldr	r3, [pc, #164]	; (8002298 <ssd1306_WriteChar+0x120>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	b2d8      	uxtb	r0, r3
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <ssd1306_WriteChar+0x120>)
 8002200:	885b      	ldrh	r3, [r3, #2]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	4413      	add	r3, r2
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002210:	4619      	mov	r1, r3
 8002212:	f7ff ff5d 	bl	80020d0 <ssd1306_DrawPixel>
 8002216:	e017      	b.n	8002248 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002218:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <ssd1306_WriteChar+0x120>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	4413      	add	r3, r2
 8002224:	b2d8      	uxtb	r0, r3
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <ssd1306_WriteChar+0x120>)
 8002228:	885b      	ldrh	r3, [r3, #2]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	4413      	add	r3, r2
 8002232:	b2d9      	uxtb	r1, r3
 8002234:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	f7ff ff44 	bl	80020d0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	3301      	adds	r3, #1
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	783b      	ldrb	r3, [r7, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4293      	cmp	r3, r2
 8002256:	d3c3      	bcc.n	80021e0 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	3301      	adds	r3, #1
 800225c:	61fb      	str	r3, [r7, #28]
 800225e:	787b      	ldrb	r3, [r7, #1]
 8002260:	461a      	mov	r2, r3
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	4293      	cmp	r3, r2
 8002266:	d3ab      	bcc.n	80021c0 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <ssd1306_WriteChar+0x120>)
 800226a:	881a      	ldrh	r2, [r3, #0]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d006      	beq.n	8002280 <ssd1306_WriteChar+0x108>
 8002272:	68b9      	ldr	r1, [r7, #8]
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	3b20      	subs	r3, #32
 8002278:	440b      	add	r3, r1
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	e001      	b.n	8002284 <ssd1306_WriteChar+0x10c>
 8002280:	783b      	ldrb	r3, [r7, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	4413      	add	r3, r2
 8002286:	b29a      	uxth	r2, r3
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <ssd1306_WriteChar+0x120>)
 800228a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800228c:	7bfb      	ldrb	r3, [r7, #15]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3724      	adds	r7, #36	; 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd90      	pop	{r4, r7, pc}
 8002296:	bf00      	nop
 8002298:	20000c6c 	.word	0x20000c6c

0800229c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	4638      	mov	r0, r7
 80022a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80022aa:	e013      	b.n	80022d4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	7818      	ldrb	r0, [r3, #0]
 80022b0:	7e3b      	ldrb	r3, [r7, #24]
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	463b      	mov	r3, r7
 80022b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b8:	f7ff ff5e 	bl	8002178 <ssd1306_WriteChar>
 80022bc:	4603      	mov	r3, r0
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d002      	beq.n	80022ce <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	e008      	b.n	80022e0 <ssd1306_WriteString+0x44>
        }
        str++;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	3301      	adds	r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e7      	bne.n	80022ac <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	781b      	ldrb	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	460a      	mov	r2, r1
 80022f2:	71fb      	strb	r3, [r7, #7]
 80022f4:	4613      	mov	r3, r2
 80022f6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <ssd1306_SetCursor+0x2c>)
 80022fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	b29a      	uxth	r2, r3
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <ssd1306_SetCursor+0x2c>)
 8002306:	805a      	strh	r2, [r3, #2]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	20000c6c 	.word	0x20000c6c

08002318 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	4604      	mov	r4, r0
 8002320:	4608      	mov	r0, r1
 8002322:	4611      	mov	r1, r2
 8002324:	461a      	mov	r2, r3
 8002326:	4623      	mov	r3, r4
 8002328:	71fb      	strb	r3, [r7, #7]
 800232a:	4603      	mov	r3, r0
 800232c:	71bb      	strb	r3, [r7, #6]
 800232e:	460b      	mov	r3, r1
 8002330:	717b      	strb	r3, [r7, #5]
 8002332:	4613      	mov	r3, r2
 8002334:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8002336:	797a      	ldrb	r2, [r7, #5]
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	bfb8      	it	lt
 8002340:	425b      	neglt	r3, r3
 8002342:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002344:	793a      	ldrb	r2, [r7, #4]
 8002346:	79bb      	ldrb	r3, [r7, #6]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	bfb8      	it	lt
 800234e:	425b      	neglt	r3, r3
 8002350:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002352:	79fa      	ldrb	r2, [r7, #7]
 8002354:	797b      	ldrb	r3, [r7, #5]
 8002356:	429a      	cmp	r2, r3
 8002358:	d201      	bcs.n	800235e <ssd1306_Line+0x46>
 800235a:	2301      	movs	r3, #1
 800235c:	e001      	b.n	8002362 <ssd1306_Line+0x4a>
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
 8002362:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002364:	79ba      	ldrb	r2, [r7, #6]
 8002366:	793b      	ldrb	r3, [r7, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	d201      	bcs.n	8002370 <ssd1306_Line+0x58>
 800236c:	2301      	movs	r3, #1
 800236e:	e001      	b.n	8002374 <ssd1306_Line+0x5c>
 8002370:	f04f 33ff 	mov.w	r3, #4294967295
 8002374:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800237e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002382:	7939      	ldrb	r1, [r7, #4]
 8002384:	797b      	ldrb	r3, [r7, #5]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fea2 	bl	80020d0 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800238c:	e024      	b.n	80023d8 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800238e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002392:	79b9      	ldrb	r1, [r7, #6]
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fe9a 	bl	80020d0 <ssd1306_DrawPixel>
        error2 = error * 2;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	425b      	negs	r3, r3
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	dd08      	ble.n	80023be <ssd1306_Line+0xa6>
            error -= deltaY;
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	4413      	add	r3, r2
 80023bc:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	da08      	bge.n	80023d8 <ssd1306_Line+0xc0>
            error += deltaX;
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	4413      	add	r3, r2
 80023cc:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	79bb      	ldrb	r3, [r7, #6]
 80023d4:	4413      	add	r3, r2
 80023d6:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80023d8:	79fa      	ldrb	r2, [r7, #7]
 80023da:	797b      	ldrb	r3, [r7, #5]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d1d6      	bne.n	800238e <ssd1306_Line+0x76>
 80023e0:	79ba      	ldrb	r2, [r7, #6]
 80023e2:	793b      	ldrb	r3, [r7, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d1d2      	bne.n	800238e <ssd1306_Line+0x76>
        }
    }
    return;
 80023e8:	bf00      	nop
}
 80023ea:	3724      	adds	r7, #36	; 0x24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd90      	pop	{r4, r7, pc}

080023f0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80023fa:	2381      	movs	r3, #129	; 0x81
 80023fc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fd89 	bl	8001f18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fd85 	bl	8001f18 <ssd1306_WriteCommand>
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002428:	23af      	movs	r3, #175	; 0xaf
 800242a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <ssd1306_SetDisplayOn+0x38>)
 800242e:	2201      	movs	r2, #1
 8002430:	715a      	strb	r2, [r3, #5]
 8002432:	e004      	b.n	800243e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002434:	23ae      	movs	r3, #174	; 0xae
 8002436:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <ssd1306_SetDisplayOn+0x38>)
 800243a:	2200      	movs	r2, #0
 800243c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fd69 	bl	8001f18 <ssd1306_WriteCommand>
}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000c6c 	.word	0x20000c6c

08002454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_MspInit+0x4c>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <HAL_MspInit+0x4c>)
 8002464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_MspInit+0x4c>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_MspInit+0x4c>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <HAL_MspInit+0x4c>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_MspInit+0x4c>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800

080024a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <NMI_Handler+0x4>

080024aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ae:	e7fe      	b.n	80024ae <HardFault_Handler+0x4>

080024b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <MemManage_Handler+0x4>

080024b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ba:	e7fe      	b.n	80024ba <BusFault_Handler+0x4>

080024bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c0:	e7fe      	b.n	80024c0 <UsageFault_Handler+0x4>

080024c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024f0:	f000 f960 	bl	80027b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80024fc:	4802      	ldr	r0, [pc, #8]	; (8002508 <OTG_FS_IRQHandler+0x10>)
 80024fe:	f001 fedc 	bl	80042ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	2000215c 	.word	0x2000215c

0800250c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return 1;
 8002510:	2301      	movs	r3, #1
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <_kill>:

int _kill(int pid, int sig)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002526:	f008 fad9 	bl	800aadc <__errno>
 800252a:	4603      	mov	r3, r0
 800252c:	2216      	movs	r2, #22
 800252e:	601a      	str	r2, [r3, #0]
  return -1;
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <_exit>:

void _exit (int status)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002544:	f04f 31ff 	mov.w	r1, #4294967295
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ffe7 	bl	800251c <_kill>
  while (1) {}    /* Make sure we hang here */
 800254e:	e7fe      	b.n	800254e <_exit+0x12>

08002550 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	e00a      	b.n	8002578 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002562:	f3af 8000 	nop.w
 8002566:	4601      	mov	r1, r0
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	60ba      	str	r2, [r7, #8]
 800256e:	b2ca      	uxtb	r2, r1
 8002570:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3301      	adds	r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	dbf0      	blt.n	8002562 <_read+0x12>
  }

  return len;
 8002580:	687b      	ldr	r3, [r7, #4]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	e009      	b.n	80025b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	60ba      	str	r2, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	3301      	adds	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	dbf1      	blt.n	800259c <_write+0x12>
  }
  return len;
 80025b8:	687b      	ldr	r3, [r7, #4]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <_close>:

int _close(int file)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ea:	605a      	str	r2, [r3, #4]
  return 0;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <_isatty>:

int _isatty(int file)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002602:	2301      	movs	r3, #1
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <_sbrk+0x5c>)
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <_sbrk+0x60>)
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <_sbrk+0x64>)
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <_sbrk+0x68>)
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <_sbrk+0x64>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	429a      	cmp	r2, r3
 800265a:	d207      	bcs.n	800266c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800265c:	f008 fa3e 	bl	800aadc <__errno>
 8002660:	4603      	mov	r3, r0
 8002662:	220c      	movs	r2, #12
 8002664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
 800266a:	e009      	b.n	8002680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <_sbrk+0x64>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <_sbrk+0x64>)
 800267c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20020000 	.word	0x20020000
 800268c:	00000400 	.word	0x00000400
 8002690:	20000c74 	.word	0x20000c74
 8002694:	200029d8 	.word	0x200029d8

08002698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <SystemInit+0x20>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <SystemInit+0x20>)
 80026a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026c0:	480d      	ldr	r0, [pc, #52]	; (80026f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026c2:	490e      	ldr	r1, [pc, #56]	; (80026fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026c4:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c8:	e002      	b.n	80026d0 <LoopCopyDataInit>

080026ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ce:	3304      	adds	r3, #4

080026d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d4:	d3f9      	bcc.n	80026ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d6:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026d8:	4c0b      	ldr	r4, [pc, #44]	; (8002708 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026dc:	e001      	b.n	80026e2 <LoopFillZerobss>

080026de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e0:	3204      	adds	r2, #4

080026e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e4:	d3fb      	bcc.n	80026de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026e6:	f7ff ffd7 	bl	8002698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ea:	f008 f9fd 	bl	800aae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ee:	f7fe ffdb 	bl	80016a8 <main>
  bx  lr    
 80026f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026fc:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 8002700:	0800df18 	.word	0x0800df18
  ldr r2, =_sbss
 8002704:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 8002708:	200029d4 	.word	0x200029d4

0800270c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800270c:	e7fe      	b.n	800270c <ADC_IRQHandler>
	...

08002710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <HAL_Init+0x40>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <HAL_Init+0x40>)
 800271a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800271e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_Init+0x40>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <HAL_Init+0x40>)
 8002726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <HAL_Init+0x40>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a07      	ldr	r2, [pc, #28]	; (8002750 <HAL_Init+0x40>)
 8002732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002736:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002738:	2003      	movs	r0, #3
 800273a:	f000 f94f 	bl	80029dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800273e:	200f      	movs	r0, #15
 8002740:	f000 f808 	bl	8002754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002744:	f7ff fe86 	bl	8002454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40023c00 	.word	0x40023c00

08002754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_InitTick+0x54>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_InitTick+0x58>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	4619      	mov	r1, r3
 8002766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800276a:	fbb3 f3f1 	udiv	r3, r3, r1
 800276e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002772:	4618      	mov	r0, r3
 8002774:	f000 f967 	bl	8002a46 <HAL_SYSTICK_Config>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e00e      	b.n	80027a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b0f      	cmp	r3, #15
 8002786:	d80a      	bhi.n	800279e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002788:	2200      	movs	r2, #0
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	f04f 30ff 	mov.w	r0, #4294967295
 8002790:	f000 f92f 	bl	80029f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002794:	4a06      	ldr	r2, [pc, #24]	; (80027b0 <HAL_InitTick+0x5c>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	e000      	b.n	80027a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	200000a0 	.word	0x200000a0
 80027ac:	200000a8 	.word	0x200000a8
 80027b0:	200000a4 	.word	0x200000a4

080027b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_IncTick+0x20>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_IncTick+0x24>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4413      	add	r3, r2
 80027c4:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <HAL_IncTick+0x24>)
 80027c6:	6013      	str	r3, [r2, #0]
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	200000a8 	.word	0x200000a8
 80027d8:	20000c78 	.word	0x20000c78

080027dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return uwTick;
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <HAL_GetTick+0x14>)
 80027e2:	681b      	ldr	r3, [r3, #0]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20000c78 	.word	0x20000c78

080027f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027fc:	f7ff ffee 	bl	80027dc <HAL_GetTick>
 8002800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d005      	beq.n	800281a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <HAL_Delay+0x44>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800281a:	bf00      	nop
 800281c:	f7ff ffde 	bl	80027dc <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	429a      	cmp	r2, r3
 800282a:	d8f7      	bhi.n	800281c <HAL_Delay+0x28>
  {
  }
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	200000a8 	.word	0x200000a8

0800283c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <__NVIC_SetPriorityGrouping+0x44>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002858:	4013      	ands	r3, r2
 800285a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800286c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800286e:	4a04      	ldr	r2, [pc, #16]	; (8002880 <__NVIC_SetPriorityGrouping+0x44>)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	60d3      	str	r3, [r2, #12]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <__NVIC_GetPriorityGrouping+0x18>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	f003 0307 	and.w	r3, r3, #7
}
 8002892:	4618      	mov	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	db0b      	blt.n	80028ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	f003 021f 	and.w	r2, r3, #31
 80028b8:	4907      	ldr	r1, [pc, #28]	; (80028d8 <__NVIC_EnableIRQ+0x38>)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	2001      	movs	r0, #1
 80028c2:	fa00 f202 	lsl.w	r2, r0, r2
 80028c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000e100 	.word	0xe000e100

080028dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	6039      	str	r1, [r7, #0]
 80028e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	db0a      	blt.n	8002906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	490c      	ldr	r1, [pc, #48]	; (8002928 <__NVIC_SetPriority+0x4c>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	0112      	lsls	r2, r2, #4
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	440b      	add	r3, r1
 8002900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002904:	e00a      	b.n	800291c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4908      	ldr	r1, [pc, #32]	; (800292c <__NVIC_SetPriority+0x50>)
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	3b04      	subs	r3, #4
 8002914:	0112      	lsls	r2, r2, #4
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	440b      	add	r3, r1
 800291a:	761a      	strb	r2, [r3, #24]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000e100 	.word	0xe000e100
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	; 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f1c3 0307 	rsb	r3, r3, #7
 800294a:	2b04      	cmp	r3, #4
 800294c:	bf28      	it	cs
 800294e:	2304      	movcs	r3, #4
 8002950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3304      	adds	r3, #4
 8002956:	2b06      	cmp	r3, #6
 8002958:	d902      	bls.n	8002960 <NVIC_EncodePriority+0x30>
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3b03      	subs	r3, #3
 800295e:	e000      	b.n	8002962 <NVIC_EncodePriority+0x32>
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	f04f 32ff 	mov.w	r2, #4294967295
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	401a      	ands	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002978:	f04f 31ff 	mov.w	r1, #4294967295
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	43d9      	mvns	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	4313      	orrs	r3, r2
         );
}
 800298a:	4618      	mov	r0, r3
 800298c:	3724      	adds	r7, #36	; 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029a8:	d301      	bcc.n	80029ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029aa:	2301      	movs	r3, #1
 80029ac:	e00f      	b.n	80029ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ae:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <SysTick_Config+0x40>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029b6:	210f      	movs	r1, #15
 80029b8:	f04f 30ff 	mov.w	r0, #4294967295
 80029bc:	f7ff ff8e 	bl	80028dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <SysTick_Config+0x40>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029c6:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <SysTick_Config+0x40>)
 80029c8:	2207      	movs	r2, #7
 80029ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	e000e010 	.word	0xe000e010

080029dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff29 	bl	800283c <__NVIC_SetPriorityGrouping>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	4603      	mov	r3, r0
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a04:	f7ff ff3e 	bl	8002884 <__NVIC_GetPriorityGrouping>
 8002a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	6978      	ldr	r0, [r7, #20]
 8002a10:	f7ff ff8e 	bl	8002930 <NVIC_EncodePriority>
 8002a14:	4602      	mov	r2, r0
 8002a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff5d 	bl	80028dc <__NVIC_SetPriority>
}
 8002a22:	bf00      	nop
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4603      	mov	r3, r0
 8002a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff31 	bl	80028a0 <__NVIC_EnableIRQ>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff ffa2 	bl	8002998 <SysTick_Config>
 8002a54:	4603      	mov	r3, r0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	; 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	e159      	b.n	8002d30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	f040 8148 	bne.w	8002d2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d005      	beq.n	8002ab2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d130      	bne.n	8002b14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	2203      	movs	r2, #3
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae8:	2201      	movs	r2, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 0201 	and.w	r2, r3, #1
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d017      	beq.n	8002b50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d123      	bne.n	8002ba4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	08da      	lsrs	r2, r3, #3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3208      	adds	r2, #8
 8002b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	220f      	movs	r2, #15
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	08da      	lsrs	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3208      	adds	r2, #8
 8002b9e:	69b9      	ldr	r1, [r7, #24]
 8002ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	2203      	movs	r2, #3
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0203 	and.w	r2, r3, #3
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a2 	beq.w	8002d2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	4b57      	ldr	r3, [pc, #348]	; (8002d48 <HAL_GPIO_Init+0x2e8>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	4a56      	ldr	r2, [pc, #344]	; (8002d48 <HAL_GPIO_Init+0x2e8>)
 8002bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf6:	4b54      	ldr	r3, [pc, #336]	; (8002d48 <HAL_GPIO_Init+0x2e8>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c02:	4a52      	ldr	r2, [pc, #328]	; (8002d4c <HAL_GPIO_Init+0x2ec>)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	089b      	lsrs	r3, r3, #2
 8002c08:	3302      	adds	r3, #2
 8002c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	220f      	movs	r2, #15
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a49      	ldr	r2, [pc, #292]	; (8002d50 <HAL_GPIO_Init+0x2f0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d019      	beq.n	8002c62 <HAL_GPIO_Init+0x202>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a48      	ldr	r2, [pc, #288]	; (8002d54 <HAL_GPIO_Init+0x2f4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d013      	beq.n	8002c5e <HAL_GPIO_Init+0x1fe>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a47      	ldr	r2, [pc, #284]	; (8002d58 <HAL_GPIO_Init+0x2f8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00d      	beq.n	8002c5a <HAL_GPIO_Init+0x1fa>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a46      	ldr	r2, [pc, #280]	; (8002d5c <HAL_GPIO_Init+0x2fc>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <HAL_GPIO_Init+0x1f6>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a45      	ldr	r2, [pc, #276]	; (8002d60 <HAL_GPIO_Init+0x300>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d101      	bne.n	8002c52 <HAL_GPIO_Init+0x1f2>
 8002c4e:	2304      	movs	r3, #4
 8002c50:	e008      	b.n	8002c64 <HAL_GPIO_Init+0x204>
 8002c52:	2307      	movs	r3, #7
 8002c54:	e006      	b.n	8002c64 <HAL_GPIO_Init+0x204>
 8002c56:	2303      	movs	r3, #3
 8002c58:	e004      	b.n	8002c64 <HAL_GPIO_Init+0x204>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e002      	b.n	8002c64 <HAL_GPIO_Init+0x204>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_GPIO_Init+0x204>
 8002c62:	2300      	movs	r3, #0
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	f002 0203 	and.w	r2, r2, #3
 8002c6a:	0092      	lsls	r2, r2, #2
 8002c6c:	4093      	lsls	r3, r2
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c74:	4935      	ldr	r1, [pc, #212]	; (8002d4c <HAL_GPIO_Init+0x2ec>)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	089b      	lsrs	r3, r3, #2
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c82:	4b38      	ldr	r3, [pc, #224]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ca6:	4a2f      	ldr	r2, [pc, #188]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cac:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cd0:	4a24      	ldr	r2, [pc, #144]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cd6:	4b23      	ldr	r3, [pc, #140]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cfa:	4a1a      	ldr	r2, [pc, #104]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d00:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d24:	4a0f      	ldr	r2, [pc, #60]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	61fb      	str	r3, [r7, #28]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	2b0f      	cmp	r3, #15
 8002d34:	f67f aea2 	bls.w	8002a7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3724      	adds	r7, #36	; 0x24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40013800 	.word	0x40013800
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40020400 	.word	0x40020400
 8002d58:	40020800 	.word	0x40020800
 8002d5c:	40020c00 	.word	0x40020c00
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40013c00 	.word	0x40013c00

08002d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	807b      	strh	r3, [r7, #2]
 8002d74:	4613      	mov	r3, r2
 8002d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d78:	787b      	ldrb	r3, [r7, #1]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d7e:	887a      	ldrh	r2, [r7, #2]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d84:	e003      	b.n	8002d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d86:	887b      	ldrh	r3, [r7, #2]
 8002d88:	041a      	lsls	r2, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	619a      	str	r2, [r3, #24]
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e12b      	b.n	8003006 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7fe f940 	bl	8001048 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2224      	movs	r2, #36	; 0x24
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e00:	f002 ffb8 	bl	8005d74 <HAL_RCC_GetPCLK1Freq>
 8002e04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4a81      	ldr	r2, [pc, #516]	; (8003010 <HAL_I2C_Init+0x274>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d807      	bhi.n	8002e20 <HAL_I2C_Init+0x84>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4a80      	ldr	r2, [pc, #512]	; (8003014 <HAL_I2C_Init+0x278>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	bf94      	ite	ls
 8002e18:	2301      	movls	r3, #1
 8002e1a:	2300      	movhi	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	e006      	b.n	8002e2e <HAL_I2C_Init+0x92>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4a7d      	ldr	r2, [pc, #500]	; (8003018 <HAL_I2C_Init+0x27c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	bf94      	ite	ls
 8002e28:	2301      	movls	r3, #1
 8002e2a:	2300      	movhi	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e0e7      	b.n	8003006 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4a78      	ldr	r2, [pc, #480]	; (800301c <HAL_I2C_Init+0x280>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	0c9b      	lsrs	r3, r3, #18
 8002e40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4a6a      	ldr	r2, [pc, #424]	; (8003010 <HAL_I2C_Init+0x274>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d802      	bhi.n	8002e70 <HAL_I2C_Init+0xd4>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	e009      	b.n	8002e84 <HAL_I2C_Init+0xe8>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	4a69      	ldr	r2, [pc, #420]	; (8003020 <HAL_I2C_Init+0x284>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	099b      	lsrs	r3, r3, #6
 8002e82:	3301      	adds	r3, #1
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	495c      	ldr	r1, [pc, #368]	; (8003010 <HAL_I2C_Init+0x274>)
 8002ea0:	428b      	cmp	r3, r1
 8002ea2:	d819      	bhi.n	8002ed8 <HAL_I2C_Init+0x13c>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	1e59      	subs	r1, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eb2:	1c59      	adds	r1, r3, #1
 8002eb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002eb8:	400b      	ands	r3, r1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_I2C_Init+0x138>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1e59      	subs	r1, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed2:	e051      	b.n	8002f78 <HAL_I2C_Init+0x1dc>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	e04f      	b.n	8002f78 <HAL_I2C_Init+0x1dc>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d111      	bne.n	8002f04 <HAL_I2C_Init+0x168>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1e58      	subs	r0, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	440b      	add	r3, r1
 8002eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	e012      	b.n	8002f2a <HAL_I2C_Init+0x18e>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1e58      	subs	r0, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	0099      	lsls	r1, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_Init+0x196>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e022      	b.n	8002f78 <HAL_I2C_Init+0x1dc>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10e      	bne.n	8002f58 <HAL_I2C_Init+0x1bc>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1e58      	subs	r0, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6859      	ldr	r1, [r3, #4]
 8002f42:	460b      	mov	r3, r1
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	440b      	add	r3, r1
 8002f48:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f56:	e00f      	b.n	8002f78 <HAL_I2C_Init+0x1dc>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1e58      	subs	r0, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	0099      	lsls	r1, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	6809      	ldr	r1, [r1, #0]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69da      	ldr	r2, [r3, #28]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6911      	ldr	r1, [r2, #16]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68d2      	ldr	r2, [r2, #12]
 8002fb2:	4311      	orrs	r1, r2
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	000186a0 	.word	0x000186a0
 8003014:	001e847f 	.word	0x001e847f
 8003018:	003d08ff 	.word	0x003d08ff
 800301c:	431bde83 	.word	0x431bde83
 8003020:	10624dd3 	.word	0x10624dd3

08003024 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	461a      	mov	r2, r3
 8003030:	460b      	mov	r3, r1
 8003032:	817b      	strh	r3, [r7, #10]
 8003034:	4613      	mov	r3, r2
 8003036:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003038:	f7ff fbd0 	bl	80027dc <HAL_GetTick>
 800303c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b20      	cmp	r3, #32
 8003048:	f040 80e0 	bne.w	800320c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	2319      	movs	r3, #25
 8003052:	2201      	movs	r2, #1
 8003054:	4970      	ldr	r1, [pc, #448]	; (8003218 <HAL_I2C_Master_Transmit+0x1f4>)
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 fe02 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003062:	2302      	movs	r3, #2
 8003064:	e0d3      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_I2C_Master_Transmit+0x50>
 8003070:	2302      	movs	r3, #2
 8003072:	e0cc      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ea>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d007      	beq.n	800309a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2221      	movs	r2, #33	; 0x21
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2210      	movs	r2, #16
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	893a      	ldrh	r2, [r7, #8]
 80030ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4a50      	ldr	r2, [pc, #320]	; (800321c <HAL_I2C_Master_Transmit+0x1f8>)
 80030da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030dc:	8979      	ldrh	r1, [r7, #10]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	6a3a      	ldr	r2, [r7, #32]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fbbc 	bl	8003860 <I2C_MasterRequestWrite>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e08d      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003108:	e066      	b.n	80031d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	6a39      	ldr	r1, [r7, #32]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fe7c 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00d      	beq.n	8003136 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	2b04      	cmp	r3, #4
 8003120:	d107      	bne.n	8003132 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003130:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e06b      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	781a      	ldrb	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b04      	cmp	r3, #4
 8003172:	d11b      	bne.n	80031ac <HAL_I2C_Master_Transmit+0x188>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003178:	2b00      	cmp	r3, #0
 800317a:	d017      	beq.n	80031ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	781a      	ldrb	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	6a39      	ldr	r1, [r7, #32]
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 fe6c 	bl	8003e8e <I2C_WaitOnBTFFlagUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00d      	beq.n	80031d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d107      	bne.n	80031d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e01a      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d194      	bne.n	800310a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	e000      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800320c:	2302      	movs	r3, #2
  }
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	00100002 	.word	0x00100002
 800321c:	ffff0000 	.word	0xffff0000

08003220 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	4608      	mov	r0, r1
 800322a:	4611      	mov	r1, r2
 800322c:	461a      	mov	r2, r3
 800322e:	4603      	mov	r3, r0
 8003230:	817b      	strh	r3, [r7, #10]
 8003232:	460b      	mov	r3, r1
 8003234:	813b      	strh	r3, [r7, #8]
 8003236:	4613      	mov	r3, r2
 8003238:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800323a:	f7ff facf 	bl	80027dc <HAL_GetTick>
 800323e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b20      	cmp	r3, #32
 800324a:	f040 80d9 	bne.w	8003400 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	2319      	movs	r3, #25
 8003254:	2201      	movs	r2, #1
 8003256:	496d      	ldr	r1, [pc, #436]	; (800340c <HAL_I2C_Mem_Write+0x1ec>)
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fd01 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
 8003266:	e0cc      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_I2C_Mem_Write+0x56>
 8003272:	2302      	movs	r3, #2
 8003274:	e0c5      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d007      	beq.n	800329c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2221      	movs	r2, #33	; 0x21
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2240      	movs	r2, #64	; 0x40
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a3a      	ldr	r2, [r7, #32]
 80032c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4a4d      	ldr	r2, [pc, #308]	; (8003410 <HAL_I2C_Mem_Write+0x1f0>)
 80032dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032de:	88f8      	ldrh	r0, [r7, #6]
 80032e0:	893a      	ldrh	r2, [r7, #8]
 80032e2:	8979      	ldrh	r1, [r7, #10]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	4603      	mov	r3, r0
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 fb38 	bl	8003964 <I2C_RequestMemoryWrite>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d052      	beq.n	80033a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e081      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fd82 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00d      	beq.n	800332a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b04      	cmp	r3, #4
 8003314:	d107      	bne.n	8003326 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003324:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e06b      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b04      	cmp	r3, #4
 8003366:	d11b      	bne.n	80033a0 <HAL_I2C_Mem_Write+0x180>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d017      	beq.n	80033a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1aa      	bne.n	80032fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fd6e 	bl	8003e8e <I2C_WaitOnBTFFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00d      	beq.n	80033d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d107      	bne.n	80033d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e016      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e000      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003400:	2302      	movs	r3, #2
  }
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	00100002 	.word	0x00100002
 8003410:	ffff0000 	.word	0xffff0000

08003414 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08c      	sub	sp, #48	; 0x30
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4603      	mov	r3, r0
 8003424:	817b      	strh	r3, [r7, #10]
 8003426:	460b      	mov	r3, r1
 8003428:	813b      	strh	r3, [r7, #8]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800342e:	f7ff f9d5 	bl	80027dc <HAL_GetTick>
 8003432:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b20      	cmp	r3, #32
 800343e:	f040 8208 	bne.w	8003852 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2319      	movs	r3, #25
 8003448:	2201      	movs	r2, #1
 800344a:	497b      	ldr	r1, [pc, #492]	; (8003638 <HAL_I2C_Mem_Read+0x224>)
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 fc07 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003458:	2302      	movs	r3, #2
 800345a:	e1fb      	b.n	8003854 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_I2C_Mem_Read+0x56>
 8003466:	2302      	movs	r3, #2
 8003468:	e1f4      	b.n	8003854 <HAL_I2C_Mem_Read+0x440>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d007      	beq.n	8003490 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800349e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2222      	movs	r2, #34	; 0x22
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2240      	movs	r2, #64	; 0x40
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80034c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a5b      	ldr	r2, [pc, #364]	; (800363c <HAL_I2C_Mem_Read+0x228>)
 80034d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034d2:	88f8      	ldrh	r0, [r7, #6]
 80034d4:	893a      	ldrh	r2, [r7, #8]
 80034d6:	8979      	ldrh	r1, [r7, #10]
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	4603      	mov	r3, r0
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 fad4 	bl	8003a90 <I2C_RequestMemoryRead>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e1b0      	b.n	8003854 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d113      	bne.n	8003522 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fa:	2300      	movs	r3, #0
 80034fc:	623b      	str	r3, [r7, #32]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	623b      	str	r3, [r7, #32]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	623b      	str	r3, [r7, #32]
 800350e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	e184      	b.n	800382c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003526:	2b01      	cmp	r3, #1
 8003528:	d11b      	bne.n	8003562 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003538:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e164      	b.n	800382c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003566:	2b02      	cmp	r3, #2
 8003568:	d11b      	bne.n	80035a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003578:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003588:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358a:	2300      	movs	r3, #0
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	e144      	b.n	800382c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035b8:	e138      	b.n	800382c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035be:	2b03      	cmp	r3, #3
 80035c0:	f200 80f1 	bhi.w	80037a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d123      	bne.n	8003614 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 fc9d 	bl	8003f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e139      	b.n	8003854 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003612:	e10b      	b.n	800382c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003618:	2b02      	cmp	r3, #2
 800361a:	d14e      	bne.n	80036ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003622:	2200      	movs	r2, #0
 8003624:	4906      	ldr	r1, [pc, #24]	; (8003640 <HAL_I2C_Mem_Read+0x22c>)
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 fb1a 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e10e      	b.n	8003854 <HAL_I2C_Mem_Read+0x440>
 8003636:	bf00      	nop
 8003638:	00100002 	.word	0x00100002
 800363c:	ffff0000 	.word	0xffff0000
 8003640:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003652:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036b8:	e0b8      	b.n	800382c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c0:	2200      	movs	r2, #0
 80036c2:	4966      	ldr	r1, [pc, #408]	; (800385c <HAL_I2C_Mem_Read+0x448>)
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 facb 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0bf      	b.n	8003854 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	2200      	movs	r2, #0
 800371e:	494f      	ldr	r1, [pc, #316]	; (800385c <HAL_I2C_Mem_Read+0x448>)
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fa9d 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e091      	b.n	8003854 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037a4:	e042      	b.n	800382c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fbb0 	bl	8003f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e04c      	b.n	8003854 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d118      	bne.n	800382c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003830:	2b00      	cmp	r3, #0
 8003832:	f47f aec2 	bne.w	80035ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	e000      	b.n	8003854 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003852:	2302      	movs	r3, #2
  }
}
 8003854:	4618      	mov	r0, r3
 8003856:	3728      	adds	r7, #40	; 0x28
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	00010004 	.word	0x00010004

08003860 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	460b      	mov	r3, r1
 800386e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2b08      	cmp	r3, #8
 800387a:	d006      	beq.n	800388a <I2C_MasterRequestWrite+0x2a>
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d003      	beq.n	800388a <I2C_MasterRequestWrite+0x2a>
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003888:	d108      	bne.n	800389c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	e00b      	b.n	80038b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	2b12      	cmp	r3, #18
 80038a2:	d107      	bne.n	80038b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f9cd 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00d      	beq.n	80038e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038da:	d103      	bne.n	80038e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e035      	b.n	8003954 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038f0:	d108      	bne.n	8003904 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038f2:	897b      	ldrh	r3, [r7, #10]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003900:	611a      	str	r2, [r3, #16]
 8003902:	e01b      	b.n	800393c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003904:	897b      	ldrh	r3, [r7, #10]
 8003906:	11db      	asrs	r3, r3, #7
 8003908:	b2db      	uxtb	r3, r3
 800390a:	f003 0306 	and.w	r3, r3, #6
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f063 030f 	orn	r3, r3, #15
 8003914:	b2da      	uxtb	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	490e      	ldr	r1, [pc, #56]	; (800395c <I2C_MasterRequestWrite+0xfc>)
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f9f3 	bl	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e010      	b.n	8003954 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003932:	897b      	ldrh	r3, [r7, #10]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4907      	ldr	r1, [pc, #28]	; (8003960 <I2C_MasterRequestWrite+0x100>)
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f9e3 	bl	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	00010008 	.word	0x00010008
 8003960:	00010002 	.word	0x00010002

08003964 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	4608      	mov	r0, r1
 800396e:	4611      	mov	r1, r2
 8003970:	461a      	mov	r2, r3
 8003972:	4603      	mov	r3, r0
 8003974:	817b      	strh	r3, [r7, #10]
 8003976:	460b      	mov	r3, r1
 8003978:	813b      	strh	r3, [r7, #8]
 800397a:	4613      	mov	r3, r2
 800397c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800398c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	2200      	movs	r2, #0
 8003996:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 f960 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00d      	beq.n	80039c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b4:	d103      	bne.n	80039be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e05f      	b.n	8003a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039c2:	897b      	ldrh	r3, [r7, #10]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	6a3a      	ldr	r2, [r7, #32]
 80039d6:	492d      	ldr	r1, [pc, #180]	; (8003a8c <I2C_RequestMemoryWrite+0x128>)
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f998 	bl	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e04c      	b.n	8003a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a00:	6a39      	ldr	r1, [r7, #32]
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 fa02 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00d      	beq.n	8003a2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d107      	bne.n	8003a26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e02b      	b.n	8003a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d105      	bne.n	8003a3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a30:	893b      	ldrh	r3, [r7, #8]
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	611a      	str	r2, [r3, #16]
 8003a3a:	e021      	b.n	8003a80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a3c:	893b      	ldrh	r3, [r7, #8]
 8003a3e:	0a1b      	lsrs	r3, r3, #8
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4c:	6a39      	ldr	r1, [r7, #32]
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f9dc 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00d      	beq.n	8003a76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d107      	bne.n	8003a72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e005      	b.n	8003a82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a76:	893b      	ldrh	r3, [r7, #8]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	00010002 	.word	0x00010002

08003a90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	4608      	mov	r0, r1
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	817b      	strh	r3, [r7, #10]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	813b      	strh	r3, [r7, #8]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ab8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f8c2 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af0:	d103      	bne.n	8003afa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e0aa      	b.n	8003c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003afe:	897b      	ldrh	r3, [r7, #10]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	6a3a      	ldr	r2, [r7, #32]
 8003b12:	4952      	ldr	r1, [pc, #328]	; (8003c5c <I2C_RequestMemoryRead+0x1cc>)
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f8fa 	bl	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e097      	b.n	8003c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3c:	6a39      	ldr	r1, [r7, #32]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f964 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00d      	beq.n	8003b66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d107      	bne.n	8003b62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e076      	b.n	8003c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d105      	bne.n	8003b78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b6c:	893b      	ldrh	r3, [r7, #8]
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	611a      	str	r2, [r3, #16]
 8003b76:	e021      	b.n	8003bbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b78:	893b      	ldrh	r3, [r7, #8]
 8003b7a:	0a1b      	lsrs	r3, r3, #8
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b88:	6a39      	ldr	r1, [r7, #32]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f93e 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d107      	bne.n	8003bae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e050      	b.n	8003c54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bb2:	893b      	ldrh	r3, [r7, #8]
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbe:	6a39      	ldr	r1, [r7, #32]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f923 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00d      	beq.n	8003be8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d107      	bne.n	8003be4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e035      	b.n	8003c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f82b 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00d      	beq.n	8003c2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1e:	d103      	bne.n	8003c28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e013      	b.n	8003c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c2c:	897b      	ldrh	r3, [r7, #10]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	6a3a      	ldr	r2, [r7, #32]
 8003c40:	4906      	ldr	r1, [pc, #24]	; (8003c5c <I2C_RequestMemoryRead+0x1cc>)
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f863 	bl	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	00010002 	.word	0x00010002

08003c60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c70:	e025      	b.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c78:	d021      	beq.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7a:	f7fe fdaf 	bl	80027dc <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d302      	bcc.n	8003c90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d116      	bne.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f043 0220 	orr.w	r2, r3, #32
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e023      	b.n	8003d06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	0c1b      	lsrs	r3, r3, #16
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d10d      	bne.n	8003ce4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bf0c      	ite	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	2300      	movne	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	e00c      	b.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	43da      	mvns	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	bf0c      	ite	eq
 8003cf6:	2301      	moveq	r3, #1
 8003cf8:	2300      	movne	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d0b6      	beq.n	8003c72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d1c:	e051      	b.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2c:	d123      	bne.n	8003d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f043 0204 	orr.w	r2, r3, #4
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e046      	b.n	8003e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7c:	d021      	beq.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7e:	f7fe fd2d 	bl	80027dc <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d302      	bcc.n	8003d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d116      	bne.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f043 0220 	orr.w	r2, r3, #32
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e020      	b.n	8003e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d10c      	bne.n	8003de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	bf14      	ite	ne
 8003dde:	2301      	movne	r3, #1
 8003de0:	2300      	moveq	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e00b      	b.n	8003dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	43da      	mvns	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4013      	ands	r3, r2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d18d      	bne.n	8003d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e18:	e02d      	b.n	8003e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f8ce 	bl	8003fbc <I2C_IsAcknowledgeFailed>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e02d      	b.n	8003e86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d021      	beq.n	8003e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e32:	f7fe fcd3 	bl	80027dc <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d302      	bcc.n	8003e48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d116      	bne.n	8003e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f043 0220 	orr.w	r2, r3, #32
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e007      	b.n	8003e86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	2b80      	cmp	r3, #128	; 0x80
 8003e82:	d1ca      	bne.n	8003e1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e9a:	e02d      	b.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f88d 	bl	8003fbc <I2C_IsAcknowledgeFailed>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e02d      	b.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d021      	beq.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb4:	f7fe fc92 	bl	80027dc <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d302      	bcc.n	8003eca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d116      	bne.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	f043 0220 	orr.w	r2, r3, #32
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e007      	b.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d1ca      	bne.n	8003e9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f1c:	e042      	b.n	8003fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	f003 0310 	and.w	r3, r3, #16
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d119      	bne.n	8003f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0210 	mvn.w	r2, #16
 8003f34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e029      	b.n	8003fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f60:	f7fe fc3c 	bl	80027dc <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d302      	bcc.n	8003f76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d116      	bne.n	8003fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	f043 0220 	orr.w	r2, r3, #32
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e007      	b.n	8003fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d1b5      	bne.n	8003f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd2:	d11b      	bne.n	800400c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	f043 0204 	orr.w	r2, r3, #4
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800401a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800401c:	b08f      	sub	sp, #60	; 0x3c
 800401e:	af0a      	add	r7, sp, #40	; 0x28
 8004020:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e10f      	b.n	800424c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f005 fc58 	bl	80098fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2203      	movs	r2, #3
 8004050:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d102      	bne.n	8004066 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f001 ffab 	bl	8005fc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	687e      	ldr	r6, [r7, #4]
 8004078:	466d      	mov	r5, sp
 800407a:	f106 0410 	add.w	r4, r6, #16
 800407e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004086:	e894 0003 	ldmia.w	r4, {r0, r1}
 800408a:	e885 0003 	stmia.w	r5, {r0, r1}
 800408e:	1d33      	adds	r3, r6, #4
 8004090:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004092:	6838      	ldr	r0, [r7, #0]
 8004094:	f001 fe82 	bl	8005d9c <USB_CoreInit>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2202      	movs	r2, #2
 80040a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e0d0      	b.n	800424c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2100      	movs	r1, #0
 80040b0:	4618      	mov	r0, r3
 80040b2:	f001 ff99 	bl	8005fe8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b6:	2300      	movs	r3, #0
 80040b8:	73fb      	strb	r3, [r7, #15]
 80040ba:	e04a      	b.n	8004152 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040bc:	7bfa      	ldrb	r2, [r7, #15]
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	333d      	adds	r3, #61	; 0x3d
 80040cc:	2201      	movs	r2, #1
 80040ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040d0:	7bfa      	ldrb	r2, [r7, #15]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	333c      	adds	r3, #60	; 0x3c
 80040e0:	7bfa      	ldrb	r2, [r7, #15]
 80040e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040e4:	7bfa      	ldrb	r2, [r7, #15]
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	b298      	uxth	r0, r3
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	3344      	adds	r3, #68	; 0x44
 80040f8:	4602      	mov	r2, r0
 80040fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040fc:	7bfa      	ldrb	r2, [r7, #15]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	3340      	adds	r3, #64	; 0x40
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004110:	7bfa      	ldrb	r2, [r7, #15]
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	3348      	adds	r3, #72	; 0x48
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004124:	7bfa      	ldrb	r2, [r7, #15]
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4613      	mov	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	334c      	adds	r3, #76	; 0x4c
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004138:	7bfa      	ldrb	r2, [r7, #15]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	3354      	adds	r3, #84	; 0x54
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	3301      	adds	r3, #1
 8004150:	73fb      	strb	r3, [r7, #15]
 8004152:	7bfa      	ldrb	r2, [r7, #15]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	429a      	cmp	r2, r3
 800415a:	d3af      	bcc.n	80040bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800415c:	2300      	movs	r3, #0
 800415e:	73fb      	strb	r3, [r7, #15]
 8004160:	e044      	b.n	80041ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004162:	7bfa      	ldrb	r2, [r7, #15]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004174:	2200      	movs	r2, #0
 8004176:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004178:	7bfa      	ldrb	r2, [r7, #15]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	4413      	add	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800418a:	7bfa      	ldrb	r2, [r7, #15]
 800418c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800418e:	7bfa      	ldrb	r2, [r7, #15]
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80041a0:	2200      	movs	r2, #0
 80041a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041a4:	7bfa      	ldrb	r2, [r7, #15]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041ba:	7bfa      	ldrb	r2, [r7, #15]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041d0:	7bfa      	ldrb	r2, [r7, #15]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	3301      	adds	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
 80041ec:	7bfa      	ldrb	r2, [r7, #15]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d3b5      	bcc.n	8004162 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	687e      	ldr	r6, [r7, #4]
 80041fe:	466d      	mov	r5, sp
 8004200:	f106 0410 	add.w	r4, r6, #16
 8004204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800420a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800420c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004210:	e885 0003 	stmia.w	r5, {r0, r1}
 8004214:	1d33      	adds	r3, r6, #4
 8004216:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004218:	6838      	ldr	r0, [r7, #0]
 800421a:	f001 ff31 	bl	8006080 <USB_DevInit>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e00d      	b.n	800424c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f003 f880 	bl	800734a <USB_DevDisconnect>

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004254 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_PCD_Start+0x1c>
 800426c:	2302      	movs	r3, #2
 800426e:	e020      	b.n	80042b2 <HAL_PCD_Start+0x5e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	2b01      	cmp	r3, #1
 800427e:	d109      	bne.n	8004294 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004284:	2b01      	cmp	r3, #1
 8004286:	d005      	beq.n	8004294 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f001 fe83 	bl	8005fa4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 f830 	bl	8007308 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042ba:	b590      	push	{r4, r7, lr}
 80042bc:	b08d      	sub	sp, #52	; 0x34
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f003 f8ee 	bl	80074b2 <USB_GetMode>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f040 848a 	bne.w	8004bf2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f003 f852 	bl	800738c <USB_ReadInterrupts>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8480 	beq.w	8004bf0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f003 f83f 	bl	800738c <USB_ReadInterrupts>
 800430e:	4603      	mov	r3, r0
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b02      	cmp	r3, #2
 8004316:	d107      	bne.n	8004328 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f002 0202 	and.w	r2, r2, #2
 8004326:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f003 f82d 	bl	800738c <USB_ReadInterrupts>
 8004332:	4603      	mov	r3, r0
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b10      	cmp	r3, #16
 800433a:	d161      	bne.n	8004400 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0210 	bic.w	r2, r2, #16
 800434a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	f003 020f 	and.w	r2, r3, #15
 8004358:	4613      	mov	r3, r2
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	4413      	add	r3, r2
 8004368:	3304      	adds	r3, #4
 800436a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	0c5b      	lsrs	r3, r3, #17
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	2b02      	cmp	r3, #2
 8004376:	d124      	bne.n	80043c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d035      	beq.n	80043f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800438e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004392:	b29b      	uxth	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	6a38      	ldr	r0, [r7, #32]
 8004398:	f002 fe64 	bl	8007064 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	091b      	lsrs	r3, r3, #4
 80043a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043a8:	441a      	add	r2, r3
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	6a1a      	ldr	r2, [r3, #32]
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043ba:	441a      	add	r2, r3
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	621a      	str	r2, [r3, #32]
 80043c0:	e016      	b.n	80043f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	0c5b      	lsrs	r3, r3, #17
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	2b06      	cmp	r3, #6
 80043cc:	d110      	bne.n	80043f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043d4:	2208      	movs	r2, #8
 80043d6:	4619      	mov	r1, r3
 80043d8:	6a38      	ldr	r0, [r7, #32]
 80043da:	f002 fe43 	bl	8007064 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	6a1a      	ldr	r2, [r3, #32]
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043ea:	441a      	add	r2, r3
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0210 	orr.w	r2, r2, #16
 80043fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f002 ffc1 	bl	800738c <USB_ReadInterrupts>
 800440a:	4603      	mov	r3, r0
 800440c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004410:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004414:	f040 80a7 	bne.w	8004566 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f002 ffc6 	bl	80073b2 <USB_ReadDevAllOutEpInterrupt>
 8004426:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004428:	e099      	b.n	800455e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 808e 	beq.w	8004552 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	4611      	mov	r1, r2
 8004440:	4618      	mov	r0, r3
 8004442:	f002 ffea 	bl	800741a <USB_ReadDevOutEPInterrupt>
 8004446:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00c      	beq.n	800446c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445e:	461a      	mov	r2, r3
 8004460:	2301      	movs	r3, #1
 8004462:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fec2 	bl	80051f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00c      	beq.n	8004490 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004482:	461a      	mov	r2, r3
 8004484:	2308      	movs	r3, #8
 8004486:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 ff98 	bl	80053c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	2b00      	cmp	r3, #0
 8004498:	d008      	beq.n	80044ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a6:	461a      	mov	r2, r3
 80044a8:	2310      	movs	r3, #16
 80044aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d030      	beq.n	8004518 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	2b80      	cmp	r3, #128	; 0x80
 80044c0:	d109      	bne.n	80044d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80044d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d8:	4613      	mov	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	4413      	add	r3, r2
 80044e8:	3304      	adds	r3, #4
 80044ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	78db      	ldrb	r3, [r3, #3]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d108      	bne.n	8004506 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2200      	movs	r2, #0
 80044f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f005 faf7 	bl	8009af4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004512:	461a      	mov	r2, r3
 8004514:	2302      	movs	r3, #2
 8004516:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452e:	461a      	mov	r2, r3
 8004530:	2320      	movs	r3, #32
 8004532:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454a:	461a      	mov	r2, r3
 800454c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004550:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	3301      	adds	r3, #1
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	085b      	lsrs	r3, r3, #1
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	2b00      	cmp	r3, #0
 8004562:	f47f af62 	bne.w	800442a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f002 ff0e 	bl	800738c <USB_ReadInterrupts>
 8004570:	4603      	mov	r3, r0
 8004572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004576:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800457a:	f040 80db 	bne.w	8004734 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f002 ff2f 	bl	80073e6 <USB_ReadDevAllInEpInterrupt>
 8004588:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800458e:	e0cd      	b.n	800472c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 80c2 	beq.w	8004720 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	4611      	mov	r1, r2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f002 ff55 	bl	8007456 <USB_ReadDevInEPInterrupt>
 80045ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d057      	beq.n	8004668 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	2201      	movs	r2, #1
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	43db      	mvns	r3, r3
 80045d2:	69f9      	ldr	r1, [r7, #28]
 80045d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045d8:	4013      	ands	r3, r2
 80045da:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e8:	461a      	mov	r2, r3
 80045ea:	2301      	movs	r3, #1
 80045ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d132      	bne.n	800465c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fa:	4613      	mov	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	334c      	adds	r3, #76	; 0x4c
 8004606:	6819      	ldr	r1, [r3, #0]
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460c:	4613      	mov	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4403      	add	r3, r0
 8004616:	3348      	adds	r3, #72	; 0x48
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4419      	add	r1, r3
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4403      	add	r3, r0
 800462a:	334c      	adds	r3, #76	; 0x4c
 800462c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	2b00      	cmp	r3, #0
 8004632:	d113      	bne.n	800465c <HAL_PCD_IRQHandler+0x3a2>
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004638:	4613      	mov	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	3354      	adds	r3, #84	; 0x54
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d108      	bne.n	800465c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004654:	461a      	mov	r2, r3
 8004656:	2101      	movs	r1, #1
 8004658:	f002 ff5c 	bl	8007514 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	b2db      	uxtb	r3, r3
 8004660:	4619      	mov	r1, r3
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f005 f9cb 	bl	80099fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467e:	461a      	mov	r2, r3
 8004680:	2308      	movs	r3, #8
 8004682:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469a:	461a      	mov	r2, r3
 800469c:	2310      	movs	r3, #16
 800469e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d008      	beq.n	80046bc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b6:	461a      	mov	r2, r3
 80046b8:	2340      	movs	r3, #64	; 0x40
 80046ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d023      	beq.n	800470e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80046c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046c8:	6a38      	ldr	r0, [r7, #32]
 80046ca:	f001 fe3d 	bl	8006348 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80046ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	3338      	adds	r3, #56	; 0x38
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	4413      	add	r3, r2
 80046de:	3304      	adds	r3, #4
 80046e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	78db      	ldrb	r3, [r3, #3]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d108      	bne.n	80046fc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2200      	movs	r2, #0
 80046ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	4619      	mov	r1, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f005 fa0e 	bl	8009b18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004708:	461a      	mov	r2, r3
 800470a:	2302      	movs	r3, #2
 800470c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fcdb 	bl	80050d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	3301      	adds	r3, #1
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	2b00      	cmp	r3, #0
 8004730:	f47f af2e 	bne.w	8004590 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f002 fe27 	bl	800738c <USB_ReadInterrupts>
 800473e:	4603      	mov	r3, r0
 8004740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004748:	d122      	bne.n	8004790 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004758:	f023 0301 	bic.w	r3, r3, #1
 800475c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004764:	2b01      	cmp	r3, #1
 8004766:	d108      	bne.n	800477a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004770:	2100      	movs	r1, #0
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fec2 	bl	80054fc <HAL_PCDEx_LPM_Callback>
 8004778:	e002      	b.n	8004780 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f005 f9ac 	bl	8009ad8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695a      	ldr	r2, [r3, #20]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800478e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f002 fdf9 	bl	800738c <USB_ReadInterrupts>
 800479a:	4603      	mov	r3, r0
 800479c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a4:	d112      	bne.n	80047cc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d102      	bne.n	80047bc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f005 f968 	bl	8009a8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80047ca:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f002 fddb 	bl	800738c <USB_ReadInterrupts>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e0:	f040 80b7 	bne.w	8004952 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2110      	movs	r1, #16
 80047fe:	4618      	mov	r0, r3
 8004800:	f001 fda2 	bl	8006348 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004804:	2300      	movs	r3, #0
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004808:	e046      	b.n	8004898 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004816:	461a      	mov	r2, r3
 8004818:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800481c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800482e:	0151      	lsls	r1, r2, #5
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	440a      	add	r2, r1
 8004834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004838:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800483c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484a:	461a      	mov	r2, r3
 800484c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004850:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004862:	0151      	lsls	r1, r2, #5
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	440a      	add	r2, r1
 8004868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800486c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004870:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004882:	0151      	lsls	r1, r2, #5
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	440a      	add	r2, r1
 8004888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800488c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004890:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	3301      	adds	r3, #1
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800489e:	429a      	cmp	r2, r3
 80048a0:	d3b3      	bcc.n	800480a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	69fa      	ldr	r2, [r7, #28]
 80048ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048b0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80048b4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d016      	beq.n	80048ec <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ce:	f043 030b 	orr.w	r3, r3, #11
 80048d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048de:	69fa      	ldr	r2, [r7, #28]
 80048e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048e4:	f043 030b 	orr.w	r3, r3, #11
 80048e8:	6453      	str	r3, [r2, #68]	; 0x44
 80048ea:	e015      	b.n	8004918 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048fe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004902:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004912:	f043 030b 	orr.w	r3, r3, #11
 8004916:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004926:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800492a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800493c:	461a      	mov	r2, r3
 800493e:	f002 fde9 	bl	8007514 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695a      	ldr	r2, [r3, #20]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004950:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f002 fd18 	bl	800738c <USB_ReadInterrupts>
 800495c:	4603      	mov	r3, r0
 800495e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004966:	d124      	bne.n	80049b2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f002 fdae 	bl	80074ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f001 fd63 	bl	8006442 <USB_GetDevSpeed>
 800497c:	4603      	mov	r3, r0
 800497e:	461a      	mov	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681c      	ldr	r4, [r3, #0]
 8004988:	f001 f9e8 	bl	8005d5c <HAL_RCC_GetHCLKFreq>
 800498c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004992:	b2db      	uxtb	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	4620      	mov	r0, r4
 8004998:	f001 fa62 	bl	8005e60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f005 f856 	bl	8009a4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695a      	ldr	r2, [r3, #20]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80049b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f002 fce8 	bl	800738c <USB_ReadInterrupts>
 80049bc:	4603      	mov	r3, r0
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d10a      	bne.n	80049dc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f005 f833 	bl	8009a32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695a      	ldr	r2, [r3, #20]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f002 0208 	and.w	r2, r2, #8
 80049da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f002 fcd3 	bl	800738c <USB_ReadInterrupts>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ec:	2b80      	cmp	r3, #128	; 0x80
 80049ee:	d122      	bne.n	8004a36 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049fc:	2301      	movs	r3, #1
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004a00:	e014      	b.n	8004a2c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a06:	4613      	mov	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d105      	bne.n	8004a26 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	4619      	mov	r1, r3
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fb27 	bl	8005074 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	3301      	adds	r3, #1
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d3e5      	bcc.n	8004a02 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f002 fca6 	bl	800738c <USB_ReadInterrupts>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a4a:	d13b      	bne.n	8004ac4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a50:	e02b      	b.n	8004aaa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a66:	4613      	mov	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	3340      	adds	r3, #64	; 0x40
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d115      	bne.n	8004aa4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004a78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	da12      	bge.n	8004aa4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a82:	4613      	mov	r3, r2
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	333f      	adds	r3, #63	; 0x3f
 8004a8e:	2201      	movs	r2, #1
 8004a90:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fae8 	bl	8005074 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d3ce      	bcc.n	8004a52 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f002 fc5f 	bl	800738c <USB_ReadInterrupts>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ad4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ad8:	d155      	bne.n	8004b86 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ada:	2301      	movs	r3, #1
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ade:	e045      	b.n	8004b6c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af4:	4613      	mov	r3, r2
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d12e      	bne.n	8004b66 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	da2b      	bge.n	8004b66 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004b1a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d121      	bne.n	8004b66 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b26:	4613      	mov	r3, r2
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	440b      	add	r3, r1
 8004b30:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004b34:	2201      	movs	r2, #1
 8004b36:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b62:	6053      	str	r3, [r2, #4]
            break;
 8004b64:	e007      	b.n	8004b76 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	3301      	adds	r3, #1
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d3b4      	bcc.n	8004ae0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695a      	ldr	r2, [r3, #20]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f002 fbfe 	bl	800738c <USB_ReadInterrupts>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9a:	d10a      	bne.n	8004bb2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f004 ffcd 	bl	8009b3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695a      	ldr	r2, [r3, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f002 fbe8 	bl	800738c <USB_ReadInterrupts>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d115      	bne.n	8004bf2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f004 ffbd 	bl	8009b58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6859      	ldr	r1, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]
 8004bee:	e000      	b.n	8004bf2 <HAL_PCD_IRQHandler+0x938>
      return;
 8004bf0:	bf00      	nop
    }
  }
}
 8004bf2:	3734      	adds	r7, #52	; 0x34
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd90      	pop	{r4, r7, pc}

08004bf8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_PCD_SetAddress+0x1a>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e013      	b.n	8004c3a <HAL_PCD_SetAddress+0x42>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	78fa      	ldrb	r2, [r7, #3]
 8004c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	78fa      	ldrb	r2, [r7, #3]
 8004c28:	4611      	mov	r1, r2
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f002 fb46 	bl	80072bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b084      	sub	sp, #16
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	4608      	mov	r0, r1
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	461a      	mov	r2, r3
 8004c50:	4603      	mov	r3, r0
 8004c52:	70fb      	strb	r3, [r7, #3]
 8004c54:	460b      	mov	r3, r1
 8004c56:	803b      	strh	r3, [r7, #0]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	da0f      	bge.n	8004c88 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	f003 020f 	and.w	r2, r3, #15
 8004c6e:	4613      	mov	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	3338      	adds	r3, #56	; 0x38
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	705a      	strb	r2, [r3, #1]
 8004c86:	e00f      	b.n	8004ca8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	f003 020f 	and.w	r2, r3, #15
 8004c8e:	4613      	mov	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004cb4:	883a      	ldrh	r2, [r7, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	78ba      	ldrb	r2, [r7, #2]
 8004cbe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	785b      	ldrb	r3, [r3, #1]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d004      	beq.n	8004cd2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004cd2:	78bb      	ldrb	r3, [r7, #2]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d102      	bne.n	8004cde <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_PCD_EP_Open+0xaa>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e00e      	b.n	8004d0a <HAL_PCD_EP_Open+0xc8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68f9      	ldr	r1, [r7, #12]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f001 fbc6 	bl	800648c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004d08:	7afb      	ldrb	r3, [r7, #11]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	da0f      	bge.n	8004d46 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	f003 020f 	and.w	r2, r3, #15
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	3338      	adds	r3, #56	; 0x38
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	4413      	add	r3, r2
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	705a      	strb	r2, [r3, #1]
 8004d44:	e00f      	b.n	8004d66 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d46:	78fb      	ldrb	r3, [r7, #3]
 8004d48:	f003 020f 	and.w	r2, r3, #15
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_PCD_EP_Close+0x6e>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e00e      	b.n	8004d9e <HAL_PCD_EP_Close+0x8c>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68f9      	ldr	r1, [r7, #12]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f001 fc04 	bl	800659c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b086      	sub	sp, #24
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	603b      	str	r3, [r7, #0]
 8004db2:	460b      	mov	r3, r1
 8004db4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004db6:	7afb      	ldrb	r3, [r7, #11]
 8004db8:	f003 020f 	and.w	r2, r3, #15
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4413      	add	r3, r2
 8004dcc:	3304      	adds	r3, #4
 8004dce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2200      	movs	r2, #0
 8004de0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2200      	movs	r2, #0
 8004de6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004de8:	7afb      	ldrb	r3, [r7, #11]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d102      	bne.n	8004e02 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e02:	7afb      	ldrb	r3, [r7, #11]
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d109      	bne.n	8004e20 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	461a      	mov	r2, r3
 8004e18:	6979      	ldr	r1, [r7, #20]
 8004e1a:	f001 fee3 	bl	8006be4 <USB_EP0StartXfer>
 8004e1e:	e008      	b.n	8004e32 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	6979      	ldr	r1, [r7, #20]
 8004e2e:	f001 fc91 	bl	8006754 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	f003 020f 	and.w	r2, r3, #15
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004e5e:	681b      	ldr	r3, [r3, #0]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	607a      	str	r2, [r7, #4]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e7c:	7afb      	ldrb	r3, [r7, #11]
 8004e7e:	f003 020f 	and.w	r2, r3, #15
 8004e82:	4613      	mov	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	3338      	adds	r3, #56	; 0x38
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	3304      	adds	r3, #4
 8004e92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eac:	7afb      	ldrb	r3, [r7, #11]
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d102      	bne.n	8004ec6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ec6:	7afb      	ldrb	r3, [r7, #11]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d109      	bne.n	8004ee4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	461a      	mov	r2, r3
 8004edc:	6979      	ldr	r1, [r7, #20]
 8004ede:	f001 fe81 	bl	8006be4 <USB_EP0StartXfer>
 8004ee2:	e008      	b.n	8004ef6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6979      	ldr	r1, [r7, #20]
 8004ef2:	f001 fc2f 	bl	8006754 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f0c:	78fb      	ldrb	r3, [r7, #3]
 8004f0e:	f003 020f 	and.w	r2, r3, #15
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d901      	bls.n	8004f1e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e050      	b.n	8004fc0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	da0f      	bge.n	8004f46 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	f003 020f 	and.w	r2, r3, #15
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	3338      	adds	r3, #56	; 0x38
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	4413      	add	r3, r2
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2201      	movs	r2, #1
 8004f42:	705a      	strb	r2, [r3, #1]
 8004f44:	e00d      	b.n	8004f62 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f46:	78fa      	ldrb	r2, [r7, #3]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	4413      	add	r3, r2
 8004f58:	3304      	adds	r3, #4
 8004f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_PCD_EP_SetStall+0x82>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e01e      	b.n	8004fc0 <HAL_PCD_EP_SetStall+0xc0>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68f9      	ldr	r1, [r7, #12]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f002 f8bf 	bl	8007114 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10a      	bne.n	8004fb6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	b2d9      	uxtb	r1, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f002 faaf 	bl	8007514 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	f003 020f 	and.w	r2, r3, #15
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d901      	bls.n	8004fe6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e042      	b.n	800506c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	da0f      	bge.n	800500e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fee:	78fb      	ldrb	r3, [r7, #3]
 8004ff0:	f003 020f 	and.w	r2, r3, #15
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	4413      	add	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	3338      	adds	r3, #56	; 0x38
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	4413      	add	r3, r2
 8005002:	3304      	adds	r3, #4
 8005004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	705a      	strb	r2, [r3, #1]
 800500c:	e00f      	b.n	800502e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	f003 020f 	and.w	r2, r3, #15
 8005014:	4613      	mov	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	4413      	add	r3, r2
 8005024:	3304      	adds	r3, #4
 8005026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	b2da      	uxtb	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005046:	2b01      	cmp	r3, #1
 8005048:	d101      	bne.n	800504e <HAL_PCD_EP_ClrStall+0x86>
 800504a:	2302      	movs	r3, #2
 800504c:	e00e      	b.n	800506c <HAL_PCD_EP_ClrStall+0xa4>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68f9      	ldr	r1, [r7, #12]
 800505c:	4618      	mov	r0, r3
 800505e:	f002 f8c7 	bl	80071f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005084:	2b00      	cmp	r3, #0
 8005086:	da0c      	bge.n	80050a2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	f003 020f 	and.w	r2, r3, #15
 800508e:	4613      	mov	r3, r2
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	3338      	adds	r3, #56	; 0x38
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	4413      	add	r3, r2
 800509c:	3304      	adds	r3, #4
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	e00c      	b.n	80050bc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	f003 020f 	and.w	r2, r3, #15
 80050a8:	4613      	mov	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	4413      	add	r3, r2
 80050b8:	3304      	adds	r3, #4
 80050ba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68f9      	ldr	r1, [r7, #12]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f001 fee6 	bl	8006e94 <USB_EPStopXfer>
 80050c8:	4603      	mov	r3, r0
 80050ca:	72fb      	strb	r3, [r7, #11]

  return ret;
 80050cc:	7afb      	ldrb	r3, [r7, #11]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b08a      	sub	sp, #40	; 0x28
 80050da:	af02      	add	r7, sp, #8
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	4613      	mov	r3, r2
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	3338      	adds	r3, #56	; 0x38
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	4413      	add	r3, r2
 80050fa:	3304      	adds	r3, #4
 80050fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a1a      	ldr	r2, [r3, #32]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	429a      	cmp	r2, r3
 8005108:	d901      	bls.n	800510e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e06c      	b.n	80051e8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	69fa      	ldr	r2, [r7, #28]
 8005120:	429a      	cmp	r2, r3
 8005122:	d902      	bls.n	800512a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	3303      	adds	r3, #3
 800512e:	089b      	lsrs	r3, r3, #2
 8005130:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005132:	e02b      	b.n	800518c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	699a      	ldr	r2, [r3, #24]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	69fa      	ldr	r2, [r7, #28]
 8005146:	429a      	cmp	r2, r3
 8005148:	d902      	bls.n	8005150 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	3303      	adds	r3, #3
 8005154:	089b      	lsrs	r3, r3, #2
 8005156:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6919      	ldr	r1, [r3, #16]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	b2da      	uxtb	r2, r3
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005168:	b2db      	uxtb	r3, r3
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	4603      	mov	r3, r0
 800516e:	6978      	ldr	r0, [r7, #20]
 8005170:	f001 ff3a 	bl	8006fe8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	441a      	add	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a1a      	ldr	r2, [r3, #32]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	441a      	add	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d809      	bhi.n	80051b6 <PCD_WriteEmptyTxFifo+0xe0>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a1a      	ldr	r2, [r3, #32]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d203      	bcs.n	80051b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1be      	bne.n	8005134 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d811      	bhi.n	80051e6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	2201      	movs	r2, #1
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	43db      	mvns	r3, r3
 80051dc:	6939      	ldr	r1, [r7, #16]
 80051de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051e2:	4013      	ands	r3, r2
 80051e4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3720      	adds	r7, #32
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b088      	sub	sp, #32
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	333c      	adds	r3, #60	; 0x3c
 8005208:	3304      	adds	r3, #4
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d17b      	bne.n	800531e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d015      	beq.n	800525c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	4a61      	ldr	r2, [pc, #388]	; (80053b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	f240 80b9 	bls.w	80053ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80b3 	beq.w	80053ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005252:	461a      	mov	r2, r3
 8005254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005258:	6093      	str	r3, [r2, #8]
 800525a:	e0a7      	b.n	80053ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	461a      	mov	r2, r3
 8005274:	2320      	movs	r3, #32
 8005276:	6093      	str	r3, [r2, #8]
 8005278:	e098      	b.n	80053ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005280:	2b00      	cmp	r3, #0
 8005282:	f040 8093 	bne.w	80053ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	4a4b      	ldr	r2, [pc, #300]	; (80053b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d90f      	bls.n	80052ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a4:	461a      	mov	r2, r3
 80052a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052aa:	6093      	str	r3, [r2, #8]
 80052ac:	e07e      	b.n	80053ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	4413      	add	r3, r2
 80052c0:	3304      	adds	r3, #4
 80052c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	0159      	lsls	r1, r3, #5
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	440b      	add	r3, r1
 80052d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052da:	1ad2      	subs	r2, r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d114      	bne.n	8005310 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d109      	bne.n	8005302 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052f8:	461a      	mov	r2, r3
 80052fa:	2101      	movs	r1, #1
 80052fc:	f002 f90a 	bl	8007514 <USB_EP0_OutStart>
 8005300:	e006      	b.n	8005310 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	691a      	ldr	r2, [r3, #16]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	441a      	add	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	4619      	mov	r1, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f004 fb56 	bl	80099c8 <HAL_PCD_DataOutStageCallback>
 800531c:	e046      	b.n	80053ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	4a26      	ldr	r2, [pc, #152]	; (80053bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d124      	bne.n	8005370 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	461a      	mov	r2, r3
 800533e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005342:	6093      	str	r3, [r2, #8]
 8005344:	e032      	b.n	80053ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f003 0320 	and.w	r3, r3, #32
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535c:	461a      	mov	r2, r3
 800535e:	2320      	movs	r3, #32
 8005360:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	b2db      	uxtb	r3, r3
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f004 fb2d 	bl	80099c8 <HAL_PCD_DataOutStageCallback>
 800536e:	e01d      	b.n	80053ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d114      	bne.n	80053a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005376:	6879      	ldr	r1, [r7, #4]
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	4613      	mov	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d108      	bne.n	80053a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005398:	461a      	mov	r2, r3
 800539a:	2100      	movs	r1, #0
 800539c:	f002 f8ba 	bl	8007514 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f004 fb0e 	bl	80099c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	4f54300a 	.word	0x4f54300a
 80053bc:	4f54310a 	.word	0x4f54310a

080053c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	333c      	adds	r3, #60	; 0x3c
 80053d8:	3304      	adds	r3, #4
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4a15      	ldr	r2, [pc, #84]	; (8005448 <PCD_EP_OutSetupPacket_int+0x88>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d90e      	bls.n	8005414 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d009      	beq.n	8005414 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540c:	461a      	mov	r2, r3
 800540e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005412:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f004 fac5 	bl	80099a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4a0a      	ldr	r2, [pc, #40]	; (8005448 <PCD_EP_OutSetupPacket_int+0x88>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d90c      	bls.n	800543c <PCD_EP_OutSetupPacket_int+0x7c>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d108      	bne.n	800543c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6818      	ldr	r0, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005434:	461a      	mov	r2, r3
 8005436:	2101      	movs	r1, #1
 8005438:	f002 f86c 	bl	8007514 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	4f54300a 	.word	0x4f54300a

0800544c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	70fb      	strb	r3, [r7, #3]
 8005458:	4613      	mov	r3, r2
 800545a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d107      	bne.n	800547a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800546a:	883b      	ldrh	r3, [r7, #0]
 800546c:	0419      	lsls	r1, r3, #16
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	430a      	orrs	r2, r1
 8005476:	629a      	str	r2, [r3, #40]	; 0x28
 8005478:	e028      	b.n	80054cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	0c1b      	lsrs	r3, r3, #16
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	4413      	add	r3, r2
 8005486:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005488:	2300      	movs	r3, #0
 800548a:	73fb      	strb	r3, [r7, #15]
 800548c:	e00d      	b.n	80054aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	3340      	adds	r3, #64	; 0x40
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	0c1b      	lsrs	r3, r3, #16
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	4413      	add	r3, r2
 80054a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
 80054a6:	3301      	adds	r3, #1
 80054a8:	73fb      	strb	r3, [r7, #15]
 80054aa:	7bfa      	ldrb	r2, [r7, #15]
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d3ec      	bcc.n	800548e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80054b4:	883b      	ldrh	r3, [r7, #0]
 80054b6:	0418      	lsls	r0, r3, #16
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6819      	ldr	r1, [r3, #0]
 80054bc:	78fb      	ldrb	r3, [r7, #3]
 80054be:	3b01      	subs	r3, #1
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	4302      	orrs	r2, r0
 80054c4:	3340      	adds	r3, #64	; 0x40
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	440b      	add	r3, r1
 80054ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	460b      	mov	r3, r1
 80054e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	887a      	ldrh	r2, [r7, #2]
 80054ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e267      	b.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d075      	beq.n	800561e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005532:	4b88      	ldr	r3, [pc, #544]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 030c 	and.w	r3, r3, #12
 800553a:	2b04      	cmp	r3, #4
 800553c:	d00c      	beq.n	8005558 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800553e:	4b85      	ldr	r3, [pc, #532]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005546:	2b08      	cmp	r3, #8
 8005548:	d112      	bne.n	8005570 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800554a:	4b82      	ldr	r3, [pc, #520]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005556:	d10b      	bne.n	8005570 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005558:	4b7e      	ldr	r3, [pc, #504]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d05b      	beq.n	800561c <HAL_RCC_OscConfig+0x108>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d157      	bne.n	800561c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e242      	b.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005578:	d106      	bne.n	8005588 <HAL_RCC_OscConfig+0x74>
 800557a:	4b76      	ldr	r3, [pc, #472]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a75      	ldr	r2, [pc, #468]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 8005580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	e01d      	b.n	80055c4 <HAL_RCC_OscConfig+0xb0>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005590:	d10c      	bne.n	80055ac <HAL_RCC_OscConfig+0x98>
 8005592:	4b70      	ldr	r3, [pc, #448]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a6f      	ldr	r2, [pc, #444]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 8005598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	4b6d      	ldr	r3, [pc, #436]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a6c      	ldr	r2, [pc, #432]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 80055a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	e00b      	b.n	80055c4 <HAL_RCC_OscConfig+0xb0>
 80055ac:	4b69      	ldr	r3, [pc, #420]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a68      	ldr	r2, [pc, #416]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 80055b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	4b66      	ldr	r3, [pc, #408]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a65      	ldr	r2, [pc, #404]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 80055be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d013      	beq.n	80055f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055cc:	f7fd f906 	bl	80027dc <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055d4:	f7fd f902 	bl	80027dc <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b64      	cmp	r3, #100	; 0x64
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e207      	b.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e6:	4b5b      	ldr	r3, [pc, #364]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0xc0>
 80055f2:	e014      	b.n	800561e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f4:	f7fd f8f2 	bl	80027dc <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055fc:	f7fd f8ee 	bl	80027dc <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b64      	cmp	r3, #100	; 0x64
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e1f3      	b.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800560e:	4b51      	ldr	r3, [pc, #324]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0xe8>
 800561a:	e000      	b.n	800561e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800561c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d063      	beq.n	80056f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800562a:	4b4a      	ldr	r3, [pc, #296]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 030c 	and.w	r3, r3, #12
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00b      	beq.n	800564e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005636:	4b47      	ldr	r3, [pc, #284]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800563e:	2b08      	cmp	r3, #8
 8005640:	d11c      	bne.n	800567c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005642:	4b44      	ldr	r3, [pc, #272]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d116      	bne.n	800567c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800564e:	4b41      	ldr	r3, [pc, #260]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d005      	beq.n	8005666 <HAL_RCC_OscConfig+0x152>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d001      	beq.n	8005666 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e1c7      	b.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005666:	4b3b      	ldr	r3, [pc, #236]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	4937      	ldr	r1, [pc, #220]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 8005676:	4313      	orrs	r3, r2
 8005678:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800567a:	e03a      	b.n	80056f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d020      	beq.n	80056c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005684:	4b34      	ldr	r3, [pc, #208]	; (8005758 <HAL_RCC_OscConfig+0x244>)
 8005686:	2201      	movs	r2, #1
 8005688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568a:	f7fd f8a7 	bl	80027dc <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005690:	e008      	b.n	80056a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005692:	f7fd f8a3 	bl	80027dc <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e1a8      	b.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a4:	4b2b      	ldr	r3, [pc, #172]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0f0      	beq.n	8005692 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b0:	4b28      	ldr	r3, [pc, #160]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	4925      	ldr	r1, [pc, #148]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	600b      	str	r3, [r1, #0]
 80056c4:	e015      	b.n	80056f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056c6:	4b24      	ldr	r3, [pc, #144]	; (8005758 <HAL_RCC_OscConfig+0x244>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056cc:	f7fd f886 	bl	80027dc <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056d4:	f7fd f882 	bl	80027dc <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e187      	b.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056e6:	4b1b      	ldr	r3, [pc, #108]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f0      	bne.n	80056d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d036      	beq.n	800576c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d016      	beq.n	8005734 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005706:	4b15      	ldr	r3, [pc, #84]	; (800575c <HAL_RCC_OscConfig+0x248>)
 8005708:	2201      	movs	r2, #1
 800570a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570c:	f7fd f866 	bl	80027dc <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005714:	f7fd f862 	bl	80027dc <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e167      	b.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005726:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <HAL_RCC_OscConfig+0x240>)
 8005728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0f0      	beq.n	8005714 <HAL_RCC_OscConfig+0x200>
 8005732:	e01b      	b.n	800576c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005734:	4b09      	ldr	r3, [pc, #36]	; (800575c <HAL_RCC_OscConfig+0x248>)
 8005736:	2200      	movs	r2, #0
 8005738:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800573a:	f7fd f84f 	bl	80027dc <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005740:	e00e      	b.n	8005760 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005742:	f7fd f84b 	bl	80027dc <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d907      	bls.n	8005760 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e150      	b.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
 8005754:	40023800 	.word	0x40023800
 8005758:	42470000 	.word	0x42470000
 800575c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005760:	4b88      	ldr	r3, [pc, #544]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 8005762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1ea      	bne.n	8005742 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8097 	beq.w	80058a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800577a:	2300      	movs	r3, #0
 800577c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800577e:	4b81      	ldr	r3, [pc, #516]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10f      	bne.n	80057aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800578a:	2300      	movs	r3, #0
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	4b7d      	ldr	r3, [pc, #500]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	4a7c      	ldr	r2, [pc, #496]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 8005794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005798:	6413      	str	r3, [r2, #64]	; 0x40
 800579a:	4b7a      	ldr	r3, [pc, #488]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a2:	60bb      	str	r3, [r7, #8]
 80057a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057a6:	2301      	movs	r3, #1
 80057a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057aa:	4b77      	ldr	r3, [pc, #476]	; (8005988 <HAL_RCC_OscConfig+0x474>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d118      	bne.n	80057e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057b6:	4b74      	ldr	r3, [pc, #464]	; (8005988 <HAL_RCC_OscConfig+0x474>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a73      	ldr	r2, [pc, #460]	; (8005988 <HAL_RCC_OscConfig+0x474>)
 80057bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057c2:	f7fd f80b 	bl	80027dc <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ca:	f7fd f807 	bl	80027dc <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e10c      	b.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057dc:	4b6a      	ldr	r3, [pc, #424]	; (8005988 <HAL_RCC_OscConfig+0x474>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0f0      	beq.n	80057ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d106      	bne.n	80057fe <HAL_RCC_OscConfig+0x2ea>
 80057f0:	4b64      	ldr	r3, [pc, #400]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 80057f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f4:	4a63      	ldr	r2, [pc, #396]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 80057f6:	f043 0301 	orr.w	r3, r3, #1
 80057fa:	6713      	str	r3, [r2, #112]	; 0x70
 80057fc:	e01c      	b.n	8005838 <HAL_RCC_OscConfig+0x324>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b05      	cmp	r3, #5
 8005804:	d10c      	bne.n	8005820 <HAL_RCC_OscConfig+0x30c>
 8005806:	4b5f      	ldr	r3, [pc, #380]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	4a5e      	ldr	r2, [pc, #376]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 800580c:	f043 0304 	orr.w	r3, r3, #4
 8005810:	6713      	str	r3, [r2, #112]	; 0x70
 8005812:	4b5c      	ldr	r3, [pc, #368]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	4a5b      	ldr	r2, [pc, #364]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	6713      	str	r3, [r2, #112]	; 0x70
 800581e:	e00b      	b.n	8005838 <HAL_RCC_OscConfig+0x324>
 8005820:	4b58      	ldr	r3, [pc, #352]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 8005822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005824:	4a57      	ldr	r2, [pc, #348]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 8005826:	f023 0301 	bic.w	r3, r3, #1
 800582a:	6713      	str	r3, [r2, #112]	; 0x70
 800582c:	4b55      	ldr	r3, [pc, #340]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 800582e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005830:	4a54      	ldr	r2, [pc, #336]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 8005832:	f023 0304 	bic.w	r3, r3, #4
 8005836:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d015      	beq.n	800586c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005840:	f7fc ffcc 	bl	80027dc <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005846:	e00a      	b.n	800585e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005848:	f7fc ffc8 	bl	80027dc <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	f241 3288 	movw	r2, #5000	; 0x1388
 8005856:	4293      	cmp	r3, r2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e0cb      	b.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800585e:	4b49      	ldr	r3, [pc, #292]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 8005860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0ee      	beq.n	8005848 <HAL_RCC_OscConfig+0x334>
 800586a:	e014      	b.n	8005896 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800586c:	f7fc ffb6 	bl	80027dc <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005872:	e00a      	b.n	800588a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005874:	f7fc ffb2 	bl	80027dc <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e0b5      	b.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800588a:	4b3e      	ldr	r3, [pc, #248]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 800588c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1ee      	bne.n	8005874 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005896:	7dfb      	ldrb	r3, [r7, #23]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d105      	bne.n	80058a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800589c:	4b39      	ldr	r3, [pc, #228]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	4a38      	ldr	r2, [pc, #224]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 80058a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 80a1 	beq.w	80059f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058b2:	4b34      	ldr	r3, [pc, #208]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 030c 	and.w	r3, r3, #12
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d05c      	beq.n	8005978 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d141      	bne.n	800594a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c6:	4b31      	ldr	r3, [pc, #196]	; (800598c <HAL_RCC_OscConfig+0x478>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058cc:	f7fc ff86 	bl	80027dc <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d4:	f7fc ff82 	bl	80027dc <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e087      	b.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e6:	4b27      	ldr	r3, [pc, #156]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1f0      	bne.n	80058d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69da      	ldr	r2, [r3, #28]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	019b      	lsls	r3, r3, #6
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	3b01      	subs	r3, #1
 800590c:	041b      	lsls	r3, r3, #16
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	061b      	lsls	r3, r3, #24
 8005916:	491b      	ldr	r1, [pc, #108]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 8005918:	4313      	orrs	r3, r2
 800591a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800591c:	4b1b      	ldr	r3, [pc, #108]	; (800598c <HAL_RCC_OscConfig+0x478>)
 800591e:	2201      	movs	r2, #1
 8005920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005922:	f7fc ff5b 	bl	80027dc <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800592a:	f7fc ff57 	bl	80027dc <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e05c      	b.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800593c:	4b11      	ldr	r3, [pc, #68]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f0      	beq.n	800592a <HAL_RCC_OscConfig+0x416>
 8005948:	e054      	b.n	80059f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594a:	4b10      	ldr	r3, [pc, #64]	; (800598c <HAL_RCC_OscConfig+0x478>)
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005950:	f7fc ff44 	bl	80027dc <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005958:	f7fc ff40 	bl	80027dc <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e045      	b.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800596a:	4b06      	ldr	r3, [pc, #24]	; (8005984 <HAL_RCC_OscConfig+0x470>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f0      	bne.n	8005958 <HAL_RCC_OscConfig+0x444>
 8005976:	e03d      	b.n	80059f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d107      	bne.n	8005990 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e038      	b.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
 8005984:	40023800 	.word	0x40023800
 8005988:	40007000 	.word	0x40007000
 800598c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005990:	4b1b      	ldr	r3, [pc, #108]	; (8005a00 <HAL_RCC_OscConfig+0x4ec>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d028      	beq.n	80059f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d121      	bne.n	80059f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d11a      	bne.n	80059f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059c0:	4013      	ands	r3, r2
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d111      	bne.n	80059f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	085b      	lsrs	r3, r3, #1
 80059d8:	3b01      	subs	r3, #1
 80059da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059dc:	429a      	cmp	r2, r3
 80059de:	d107      	bne.n	80059f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d001      	beq.n	80059f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40023800 	.word	0x40023800

08005a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e0cc      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a18:	4b68      	ldr	r3, [pc, #416]	; (8005bbc <HAL_RCC_ClockConfig+0x1b8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d90c      	bls.n	8005a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a26:	4b65      	ldr	r3, [pc, #404]	; (8005bbc <HAL_RCC_ClockConfig+0x1b8>)
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a2e:	4b63      	ldr	r3, [pc, #396]	; (8005bbc <HAL_RCC_ClockConfig+0x1b8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d001      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e0b8      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d020      	beq.n	8005a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a58:	4b59      	ldr	r3, [pc, #356]	; (8005bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	4a58      	ldr	r2, [pc, #352]	; (8005bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0308 	and.w	r3, r3, #8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a70:	4b53      	ldr	r3, [pc, #332]	; (8005bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	4a52      	ldr	r2, [pc, #328]	; (8005bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a7c:	4b50      	ldr	r3, [pc, #320]	; (8005bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	494d      	ldr	r1, [pc, #308]	; (8005bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d044      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d107      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa2:	4b47      	ldr	r3, [pc, #284]	; (8005bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d119      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e07f      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d003      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d107      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac2:	4b3f      	ldr	r3, [pc, #252]	; (8005bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d109      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e06f      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad2:	4b3b      	ldr	r3, [pc, #236]	; (8005bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e067      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ae2:	4b37      	ldr	r3, [pc, #220]	; (8005bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f023 0203 	bic.w	r2, r3, #3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	4934      	ldr	r1, [pc, #208]	; (8005bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005af4:	f7fc fe72 	bl	80027dc <HAL_GetTick>
 8005af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005afa:	e00a      	b.n	8005b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005afc:	f7fc fe6e 	bl	80027dc <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e04f      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b12:	4b2b      	ldr	r3, [pc, #172]	; (8005bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 020c 	and.w	r2, r3, #12
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d1eb      	bne.n	8005afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b24:	4b25      	ldr	r3, [pc, #148]	; (8005bbc <HAL_RCC_ClockConfig+0x1b8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d20c      	bcs.n	8005b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b32:	4b22      	ldr	r3, [pc, #136]	; (8005bbc <HAL_RCC_ClockConfig+0x1b8>)
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3a:	4b20      	ldr	r3, [pc, #128]	; (8005bbc <HAL_RCC_ClockConfig+0x1b8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d001      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e032      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d008      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b58:	4b19      	ldr	r3, [pc, #100]	; (8005bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	4916      	ldr	r1, [pc, #88]	; (8005bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d009      	beq.n	8005b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b76:	4b12      	ldr	r3, [pc, #72]	; (8005bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	490e      	ldr	r1, [pc, #56]	; (8005bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b8a:	f000 f821 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	091b      	lsrs	r3, r3, #4
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	490a      	ldr	r1, [pc, #40]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b9c:	5ccb      	ldrb	r3, [r1, r3]
 8005b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba2:	4a09      	ldr	r2, [pc, #36]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ba6:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fc fdd2 	bl	8002754 <HAL_InitTick>

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40023c00 	.word	0x40023c00
 8005bc0:	40023800 	.word	0x40023800
 8005bc4:	0800db08 	.word	0x0800db08
 8005bc8:	200000a0 	.word	0x200000a0
 8005bcc:	200000a4 	.word	0x200000a4

08005bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bd4:	b090      	sub	sp, #64	; 0x40
 8005bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	637b      	str	r3, [r7, #52]	; 0x34
 8005bdc:	2300      	movs	r3, #0
 8005bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005be0:	2300      	movs	r3, #0
 8005be2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005be8:	4b59      	ldr	r3, [pc, #356]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 030c 	and.w	r3, r3, #12
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d00d      	beq.n	8005c10 <HAL_RCC_GetSysClockFreq+0x40>
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	f200 80a1 	bhi.w	8005d3c <HAL_RCC_GetSysClockFreq+0x16c>
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <HAL_RCC_GetSysClockFreq+0x34>
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d003      	beq.n	8005c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8005c02:	e09b      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c04:	4b53      	ldr	r3, [pc, #332]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c06:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005c08:	e09b      	b.n	8005d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c0a:	4b53      	ldr	r3, [pc, #332]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c0e:	e098      	b.n	8005d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c10:	4b4f      	ldr	r3, [pc, #316]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c18:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c1a:	4b4d      	ldr	r3, [pc, #308]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d028      	beq.n	8005c78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c26:	4b4a      	ldr	r3, [pc, #296]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	099b      	lsrs	r3, r3, #6
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	623b      	str	r3, [r7, #32]
 8005c30:	627a      	str	r2, [r7, #36]	; 0x24
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c38:	2100      	movs	r1, #0
 8005c3a:	4b47      	ldr	r3, [pc, #284]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c3c:	fb03 f201 	mul.w	r2, r3, r1
 8005c40:	2300      	movs	r3, #0
 8005c42:	fb00 f303 	mul.w	r3, r0, r3
 8005c46:	4413      	add	r3, r2
 8005c48:	4a43      	ldr	r2, [pc, #268]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c4a:	fba0 1202 	umull	r1, r2, r0, r2
 8005c4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c50:	460a      	mov	r2, r1
 8005c52:	62ba      	str	r2, [r7, #40]	; 0x28
 8005c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c56:	4413      	add	r3, r2
 8005c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	61bb      	str	r3, [r7, #24]
 8005c60:	61fa      	str	r2, [r7, #28]
 8005c62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005c6a:	f7fa ffa5 	bl	8000bb8 <__aeabi_uldivmod>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4613      	mov	r3, r2
 8005c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c76:	e053      	b.n	8005d20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c78:	4b35      	ldr	r3, [pc, #212]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	099b      	lsrs	r3, r3, #6
 8005c7e:	2200      	movs	r2, #0
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	617a      	str	r2, [r7, #20]
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005c8a:	f04f 0b00 	mov.w	fp, #0
 8005c8e:	4652      	mov	r2, sl
 8005c90:	465b      	mov	r3, fp
 8005c92:	f04f 0000 	mov.w	r0, #0
 8005c96:	f04f 0100 	mov.w	r1, #0
 8005c9a:	0159      	lsls	r1, r3, #5
 8005c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ca0:	0150      	lsls	r0, r2, #5
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	ebb2 080a 	subs.w	r8, r2, sl
 8005caa:	eb63 090b 	sbc.w	r9, r3, fp
 8005cae:	f04f 0200 	mov.w	r2, #0
 8005cb2:	f04f 0300 	mov.w	r3, #0
 8005cb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005cba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005cbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005cc2:	ebb2 0408 	subs.w	r4, r2, r8
 8005cc6:	eb63 0509 	sbc.w	r5, r3, r9
 8005cca:	f04f 0200 	mov.w	r2, #0
 8005cce:	f04f 0300 	mov.w	r3, #0
 8005cd2:	00eb      	lsls	r3, r5, #3
 8005cd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cd8:	00e2      	lsls	r2, r4, #3
 8005cda:	4614      	mov	r4, r2
 8005cdc:	461d      	mov	r5, r3
 8005cde:	eb14 030a 	adds.w	r3, r4, sl
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	eb45 030b 	adc.w	r3, r5, fp
 8005ce8:	607b      	str	r3, [r7, #4]
 8005cea:	f04f 0200 	mov.w	r2, #0
 8005cee:	f04f 0300 	mov.w	r3, #0
 8005cf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	028b      	lsls	r3, r1, #10
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d00:	4621      	mov	r1, r4
 8005d02:	028a      	lsls	r2, r1, #10
 8005d04:	4610      	mov	r0, r2
 8005d06:	4619      	mov	r1, r3
 8005d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	60bb      	str	r3, [r7, #8]
 8005d0e:	60fa      	str	r2, [r7, #12]
 8005d10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d14:	f7fa ff50 	bl	8000bb8 <__aeabi_uldivmod>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d20:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	0c1b      	lsrs	r3, r3, #16
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005d30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d3a:	e002      	b.n	8005d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d3c:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x184>)
 8005d3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3740      	adds	r7, #64	; 0x40
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d4e:	bf00      	nop
 8005d50:	40023800 	.word	0x40023800
 8005d54:	00f42400 	.word	0x00f42400
 8005d58:	017d7840 	.word	0x017d7840

08005d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d60:	4b03      	ldr	r3, [pc, #12]	; (8005d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d62:	681b      	ldr	r3, [r3, #0]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	200000a0 	.word	0x200000a0

08005d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d78:	f7ff fff0 	bl	8005d5c <HAL_RCC_GetHCLKFreq>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	0a9b      	lsrs	r3, r3, #10
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	4903      	ldr	r1, [pc, #12]	; (8005d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d8a:	5ccb      	ldrb	r3, [r1, r3]
 8005d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40023800 	.word	0x40023800
 8005d98:	0800db18 	.word	0x0800db18

08005d9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	f107 001c 	add.w	r0, r7, #28
 8005daa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d122      	bne.n	8005dfa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d105      	bne.n	8005dee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f001 fbee 	bl	80075d0 <USB_CoreReset>
 8005df4:	4603      	mov	r3, r0
 8005df6:	73fb      	strb	r3, [r7, #15]
 8005df8:	e01a      	b.n	8005e30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 fbe2 	bl	80075d0 <USB_CoreReset>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	639a      	str	r2, [r3, #56]	; 0x38
 8005e22:	e005      	b.n	8005e30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d10b      	bne.n	8005e4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f043 0206 	orr.w	r2, r3, #6
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f043 0220 	orr.w	r2, r3, #32
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e5a:	b004      	add	sp, #16
 8005e5c:	4770      	bx	lr
	...

08005e60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d165      	bne.n	8005f40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4a41      	ldr	r2, [pc, #260]	; (8005f7c <USB_SetTurnaroundTime+0x11c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d906      	bls.n	8005e8a <USB_SetTurnaroundTime+0x2a>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4a40      	ldr	r2, [pc, #256]	; (8005f80 <USB_SetTurnaroundTime+0x120>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d202      	bcs.n	8005e8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e84:	230f      	movs	r3, #15
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	e062      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	4a3c      	ldr	r2, [pc, #240]	; (8005f80 <USB_SetTurnaroundTime+0x120>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d306      	bcc.n	8005ea0 <USB_SetTurnaroundTime+0x40>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	4a3b      	ldr	r2, [pc, #236]	; (8005f84 <USB_SetTurnaroundTime+0x124>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d202      	bcs.n	8005ea0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e9a:	230e      	movs	r3, #14
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	e057      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4a38      	ldr	r2, [pc, #224]	; (8005f84 <USB_SetTurnaroundTime+0x124>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d306      	bcc.n	8005eb6 <USB_SetTurnaroundTime+0x56>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4a37      	ldr	r2, [pc, #220]	; (8005f88 <USB_SetTurnaroundTime+0x128>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d202      	bcs.n	8005eb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005eb0:	230d      	movs	r3, #13
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	e04c      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4a33      	ldr	r2, [pc, #204]	; (8005f88 <USB_SetTurnaroundTime+0x128>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d306      	bcc.n	8005ecc <USB_SetTurnaroundTime+0x6c>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	4a32      	ldr	r2, [pc, #200]	; (8005f8c <USB_SetTurnaroundTime+0x12c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d802      	bhi.n	8005ecc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ec6:	230c      	movs	r3, #12
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	e041      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4a2f      	ldr	r2, [pc, #188]	; (8005f8c <USB_SetTurnaroundTime+0x12c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d906      	bls.n	8005ee2 <USB_SetTurnaroundTime+0x82>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4a2e      	ldr	r2, [pc, #184]	; (8005f90 <USB_SetTurnaroundTime+0x130>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d802      	bhi.n	8005ee2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005edc:	230b      	movs	r3, #11
 8005ede:	617b      	str	r3, [r7, #20]
 8005ee0:	e036      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	4a2a      	ldr	r2, [pc, #168]	; (8005f90 <USB_SetTurnaroundTime+0x130>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d906      	bls.n	8005ef8 <USB_SetTurnaroundTime+0x98>
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	4a29      	ldr	r2, [pc, #164]	; (8005f94 <USB_SetTurnaroundTime+0x134>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d802      	bhi.n	8005ef8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ef2:	230a      	movs	r3, #10
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	e02b      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4a26      	ldr	r2, [pc, #152]	; (8005f94 <USB_SetTurnaroundTime+0x134>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d906      	bls.n	8005f0e <USB_SetTurnaroundTime+0xae>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4a25      	ldr	r2, [pc, #148]	; (8005f98 <USB_SetTurnaroundTime+0x138>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d202      	bcs.n	8005f0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f08:	2309      	movs	r3, #9
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	e020      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4a21      	ldr	r2, [pc, #132]	; (8005f98 <USB_SetTurnaroundTime+0x138>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d306      	bcc.n	8005f24 <USB_SetTurnaroundTime+0xc4>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	4a20      	ldr	r2, [pc, #128]	; (8005f9c <USB_SetTurnaroundTime+0x13c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d802      	bhi.n	8005f24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f1e:	2308      	movs	r3, #8
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	e015      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4a1d      	ldr	r2, [pc, #116]	; (8005f9c <USB_SetTurnaroundTime+0x13c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d906      	bls.n	8005f3a <USB_SetTurnaroundTime+0xda>
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4a1c      	ldr	r2, [pc, #112]	; (8005fa0 <USB_SetTurnaroundTime+0x140>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d202      	bcs.n	8005f3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f34:	2307      	movs	r3, #7
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	e00a      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f3a:	2306      	movs	r3, #6
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	e007      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f40:	79fb      	ldrb	r3, [r7, #7]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d102      	bne.n	8005f4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f46:	2309      	movs	r3, #9
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	e001      	b.n	8005f50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f4c:	2309      	movs	r3, #9
 8005f4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	029b      	lsls	r3, r3, #10
 8005f64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	371c      	adds	r7, #28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	00d8acbf 	.word	0x00d8acbf
 8005f80:	00e4e1c0 	.word	0x00e4e1c0
 8005f84:	00f42400 	.word	0x00f42400
 8005f88:	01067380 	.word	0x01067380
 8005f8c:	011a499f 	.word	0x011a499f
 8005f90:	01312cff 	.word	0x01312cff
 8005f94:	014ca43f 	.word	0x014ca43f
 8005f98:	016e3600 	.word	0x016e3600
 8005f9c:	01a6ab1f 	.word	0x01a6ab1f
 8005fa0:	01e84800 	.word	0x01e84800

08005fa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f043 0201 	orr.w	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d115      	bne.n	8006036 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006016:	2001      	movs	r0, #1
 8006018:	f7fc fbec 	bl	80027f4 <HAL_Delay>
      ms++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3301      	adds	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f001 fa45 	bl	80074b2 <USB_GetMode>
 8006028:	4603      	mov	r3, r0
 800602a:	2b01      	cmp	r3, #1
 800602c:	d01e      	beq.n	800606c <USB_SetCurrentMode+0x84>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b31      	cmp	r3, #49	; 0x31
 8006032:	d9f0      	bls.n	8006016 <USB_SetCurrentMode+0x2e>
 8006034:	e01a      	b.n	800606c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d115      	bne.n	8006068 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006048:	2001      	movs	r0, #1
 800604a:	f7fc fbd3 	bl	80027f4 <HAL_Delay>
      ms++;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	3301      	adds	r3, #1
 8006052:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 fa2c 	bl	80074b2 <USB_GetMode>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <USB_SetCurrentMode+0x84>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b31      	cmp	r3, #49	; 0x31
 8006064:	d9f0      	bls.n	8006048 <USB_SetCurrentMode+0x60>
 8006066:	e001      	b.n	800606c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e005      	b.n	8006078 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b32      	cmp	r3, #50	; 0x32
 8006070:	d101      	bne.n	8006076 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006080:	b084      	sub	sp, #16
 8006082:	b580      	push	{r7, lr}
 8006084:	b086      	sub	sp, #24
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800608e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800609a:	2300      	movs	r3, #0
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	e009      	b.n	80060b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	3340      	adds	r3, #64	; 0x40
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	2200      	movs	r2, #0
 80060ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	3301      	adds	r3, #1
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	2b0e      	cmp	r3, #14
 80060b8:	d9f2      	bls.n	80060a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d11c      	bne.n	80060fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ce:	f043 0302 	orr.w	r3, r3, #2
 80060d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	639a      	str	r2, [r3, #56]	; 0x38
 80060f8:	e00b      	b.n	8006112 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006118:	461a      	mov	r2, r3
 800611a:	2300      	movs	r3, #0
 800611c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006124:	4619      	mov	r1, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612c:	461a      	mov	r2, r3
 800612e:	680b      	ldr	r3, [r1, #0]
 8006130:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	2b01      	cmp	r3, #1
 8006136:	d10c      	bne.n	8006152 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613a:	2b00      	cmp	r3, #0
 800613c:	d104      	bne.n	8006148 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800613e:	2100      	movs	r1, #0
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f965 	bl	8006410 <USB_SetDevSpeed>
 8006146:	e008      	b.n	800615a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006148:	2101      	movs	r1, #1
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f960 	bl	8006410 <USB_SetDevSpeed>
 8006150:	e003      	b.n	800615a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006152:	2103      	movs	r1, #3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f95b 	bl	8006410 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800615a:	2110      	movs	r1, #16
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f8f3 	bl	8006348 <USB_FlushTxFifo>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f91f 	bl	80063b0 <USB_FlushRxFifo>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006182:	461a      	mov	r2, r3
 8006184:	2300      	movs	r3, #0
 8006186:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618e:	461a      	mov	r2, r3
 8006190:	2300      	movs	r3, #0
 8006192:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619a:	461a      	mov	r2, r3
 800619c:	2300      	movs	r3, #0
 800619e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061a0:	2300      	movs	r3, #0
 80061a2:	613b      	str	r3, [r7, #16]
 80061a4:	e043      	b.n	800622e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061bc:	d118      	bne.n	80061f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10a      	bne.n	80061da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d0:	461a      	mov	r2, r3
 80061d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	e013      	b.n	8006202 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e6:	461a      	mov	r2, r3
 80061e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	e008      	b.n	8006202 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fc:	461a      	mov	r2, r3
 80061fe:	2300      	movs	r3, #0
 8006200:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620e:	461a      	mov	r2, r3
 8006210:	2300      	movs	r3, #0
 8006212:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006220:	461a      	mov	r2, r3
 8006222:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006226:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	3301      	adds	r3, #1
 800622c:	613b      	str	r3, [r7, #16]
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	429a      	cmp	r2, r3
 8006234:	d3b7      	bcc.n	80061a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006236:	2300      	movs	r3, #0
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	e043      	b.n	80062c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800624e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006252:	d118      	bne.n	8006286 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006266:	461a      	mov	r2, r3
 8006268:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	e013      	b.n	8006298 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627c:	461a      	mov	r2, r3
 800627e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	e008      	b.n	8006298 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006292:	461a      	mov	r2, r3
 8006294:	2300      	movs	r3, #0
 8006296:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a4:	461a      	mov	r2, r3
 80062a6:	2300      	movs	r3, #0
 80062a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	461a      	mov	r2, r3
 80062b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	3301      	adds	r3, #1
 80062c2:	613b      	str	r3, [r7, #16]
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d3b7      	bcc.n	800623c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80062ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d105      	bne.n	8006300 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	f043 0210 	orr.w	r2, r3, #16
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699a      	ldr	r2, [r3, #24]
 8006304:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <USB_DevInit+0x2c4>)
 8006306:	4313      	orrs	r3, r2
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800630c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	f043 0208 	orr.w	r2, r3, #8
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800631e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006320:	2b01      	cmp	r3, #1
 8006322:	d107      	bne.n	8006334 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800632c:	f043 0304 	orr.w	r3, r3, #4
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006334:	7dfb      	ldrb	r3, [r7, #23]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006340:	b004      	add	sp, #16
 8006342:	4770      	bx	lr
 8006344:	803c3800 	.word	0x803c3800

08006348 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3301      	adds	r3, #1
 800635a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4a13      	ldr	r2, [pc, #76]	; (80063ac <USB_FlushTxFifo+0x64>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d901      	bls.n	8006368 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e01b      	b.n	80063a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	daf2      	bge.n	8006356 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	019b      	lsls	r3, r3, #6
 8006378:	f043 0220 	orr.w	r2, r3, #32
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3301      	adds	r3, #1
 8006384:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4a08      	ldr	r2, [pc, #32]	; (80063ac <USB_FlushTxFifo+0x64>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d901      	bls.n	8006392 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e006      	b.n	80063a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f003 0320 	and.w	r3, r3, #32
 800639a:	2b20      	cmp	r3, #32
 800639c:	d0f0      	beq.n	8006380 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	00030d40 	.word	0x00030d40

080063b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3301      	adds	r3, #1
 80063c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4a11      	ldr	r2, [pc, #68]	; (800640c <USB_FlushRxFifo+0x5c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d901      	bls.n	80063ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e018      	b.n	8006400 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	daf2      	bge.n	80063bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2210      	movs	r2, #16
 80063de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3301      	adds	r3, #1
 80063e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4a08      	ldr	r2, [pc, #32]	; (800640c <USB_FlushRxFifo+0x5c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d901      	bls.n	80063f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e006      	b.n	8006400 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f003 0310 	and.w	r3, r3, #16
 80063fa:	2b10      	cmp	r3, #16
 80063fc:	d0f0      	beq.n	80063e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	00030d40 	.word	0x00030d40

08006410 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	68f9      	ldr	r1, [r7, #12]
 800642c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006430:	4313      	orrs	r3, r2
 8006432:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006442:	b480      	push	{r7}
 8006444:	b087      	sub	sp, #28
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 0306 	and.w	r3, r3, #6
 800645a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d102      	bne.n	8006468 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006462:	2300      	movs	r3, #0
 8006464:	75fb      	strb	r3, [r7, #23]
 8006466:	e00a      	b.n	800647e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b02      	cmp	r3, #2
 800646c:	d002      	beq.n	8006474 <USB_GetDevSpeed+0x32>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b06      	cmp	r3, #6
 8006472:	d102      	bne.n	800647a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006474:	2302      	movs	r3, #2
 8006476:	75fb      	strb	r3, [r7, #23]
 8006478:	e001      	b.n	800647e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800647a:	230f      	movs	r3, #15
 800647c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800647e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006480:	4618      	mov	r0, r3
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d13a      	bne.n	800651e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ae:	69da      	ldr	r2, [r3, #28]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	f003 030f 	and.w	r3, r3, #15
 80064b8:	2101      	movs	r1, #1
 80064ba:	fa01 f303 	lsl.w	r3, r1, r3
 80064be:	b29b      	uxth	r3, r3
 80064c0:	68f9      	ldr	r1, [r7, #12]
 80064c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064c6:	4313      	orrs	r3, r2
 80064c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d155      	bne.n	800658c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	791b      	ldrb	r3, [r3, #4]
 80064fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	059b      	lsls	r3, r3, #22
 8006502:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006504:	4313      	orrs	r3, r2
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	0151      	lsls	r1, r2, #5
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	440a      	add	r2, r1
 800650e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800651a:	6013      	str	r3, [r2, #0]
 800651c:	e036      	b.n	800658c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006524:	69da      	ldr	r2, [r3, #28]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	2101      	movs	r1, #1
 8006530:	fa01 f303 	lsl.w	r3, r1, r3
 8006534:	041b      	lsls	r3, r3, #16
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800653c:	4313      	orrs	r3, r2
 800653e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d11a      	bne.n	800658c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	791b      	ldrb	r3, [r3, #4]
 8006570:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006572:	430b      	orrs	r3, r1
 8006574:	4313      	orrs	r3, r2
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	0151      	lsls	r1, r2, #5
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	440a      	add	r2, r1
 800657e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
	...

0800659c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	785b      	ldrb	r3, [r3, #1]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d161      	bne.n	800667c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065ce:	d11f      	bne.n	8006610 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	0151      	lsls	r1, r2, #5
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	440a      	add	r2, r1
 80065e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	0151      	lsls	r1, r2, #5
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	440a      	add	r2, r1
 8006606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800660a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800660e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	f003 030f 	and.w	r3, r3, #15
 8006620:	2101      	movs	r1, #1
 8006622:	fa01 f303 	lsl.w	r3, r1, r3
 8006626:	b29b      	uxth	r3, r3
 8006628:	43db      	mvns	r3, r3
 800662a:	68f9      	ldr	r1, [r7, #12]
 800662c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006630:	4013      	ands	r3, r2
 8006632:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663a:	69da      	ldr	r2, [r3, #28]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	f003 030f 	and.w	r3, r3, #15
 8006644:	2101      	movs	r1, #1
 8006646:	fa01 f303 	lsl.w	r3, r1, r3
 800664a:	b29b      	uxth	r3, r3
 800664c:	43db      	mvns	r3, r3
 800664e:	68f9      	ldr	r1, [r7, #12]
 8006650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006654:	4013      	ands	r3, r2
 8006656:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	0159      	lsls	r1, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	440b      	add	r3, r1
 800666e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006672:	4619      	mov	r1, r3
 8006674:	4b35      	ldr	r3, [pc, #212]	; (800674c <USB_DeactivateEndpoint+0x1b0>)
 8006676:	4013      	ands	r3, r2
 8006678:	600b      	str	r3, [r1, #0]
 800667a:	e060      	b.n	800673e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800668e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006692:	d11f      	bne.n	80066d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	0151      	lsls	r1, r2, #5
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	440a      	add	r2, r1
 80066aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	0151      	lsls	r1, r2, #5
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	440a      	add	r2, r1
 80066ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	2101      	movs	r1, #1
 80066e6:	fa01 f303 	lsl.w	r3, r1, r3
 80066ea:	041b      	lsls	r3, r3, #16
 80066ec:	43db      	mvns	r3, r3
 80066ee:	68f9      	ldr	r1, [r7, #12]
 80066f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066f4:	4013      	ands	r3, r2
 80066f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fe:	69da      	ldr	r2, [r3, #28]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	2101      	movs	r1, #1
 800670a:	fa01 f303 	lsl.w	r3, r1, r3
 800670e:	041b      	lsls	r3, r3, #16
 8006710:	43db      	mvns	r3, r3
 8006712:	68f9      	ldr	r1, [r7, #12]
 8006714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006718:	4013      	ands	r3, r2
 800671a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	0159      	lsls	r1, r3, #5
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	440b      	add	r3, r1
 8006732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006736:	4619      	mov	r1, r3
 8006738:	4b05      	ldr	r3, [pc, #20]	; (8006750 <USB_DeactivateEndpoint+0x1b4>)
 800673a:	4013      	ands	r3, r2
 800673c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	ec337800 	.word	0xec337800
 8006750:	eff37800 	.word	0xeff37800

08006754 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b08a      	sub	sp, #40	; 0x28
 8006758:	af02      	add	r7, sp, #8
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	4613      	mov	r3, r2
 8006760:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	785b      	ldrb	r3, [r3, #1]
 8006770:	2b01      	cmp	r3, #1
 8006772:	f040 815c 	bne.w	8006a2e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d132      	bne.n	80067e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	0151      	lsls	r1, r2, #5
 8006790:	69fa      	ldr	r2, [r7, #28]
 8006792:	440a      	add	r2, r1
 8006794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006798:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800679c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067dc:	0cdb      	lsrs	r3, r3, #19
 80067de:	04db      	lsls	r3, r3, #19
 80067e0:	6113      	str	r3, [r2, #16]
 80067e2:	e074      	b.n	80068ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	0151      	lsls	r1, r2, #5
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	440a      	add	r2, r1
 80067fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067fe:	0cdb      	lsrs	r3, r3, #19
 8006800:	04db      	lsls	r3, r3, #19
 8006802:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	0151      	lsls	r1, r2, #5
 8006816:	69fa      	ldr	r2, [r7, #28]
 8006818:	440a      	add	r2, r1
 800681a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800681e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006822:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006826:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006834:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	6999      	ldr	r1, [r3, #24]
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	440b      	add	r3, r1
 8006840:	1e59      	subs	r1, r3, #1
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	fbb1 f3f3 	udiv	r3, r1, r3
 800684a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800684c:	4b9d      	ldr	r3, [pc, #628]	; (8006ac4 <USB_EPStartXfer+0x370>)
 800684e:	400b      	ands	r3, r1
 8006850:	69b9      	ldr	r1, [r7, #24]
 8006852:	0148      	lsls	r0, r1, #5
 8006854:	69f9      	ldr	r1, [r7, #28]
 8006856:	4401      	add	r1, r0
 8006858:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800685c:	4313      	orrs	r3, r2
 800685e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006876:	69b9      	ldr	r1, [r7, #24]
 8006878:	0148      	lsls	r0, r1, #5
 800687a:	69f9      	ldr	r1, [r7, #28]
 800687c:	4401      	add	r1, r0
 800687e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006882:	4313      	orrs	r3, r2
 8006884:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	791b      	ldrb	r3, [r3, #4]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d11f      	bne.n	80068ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	0151      	lsls	r1, r2, #5
 80068a0:	69fa      	ldr	r2, [r7, #28]
 80068a2:	440a      	add	r2, r1
 80068a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80068ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	0151      	lsls	r1, r2, #5
 80068c0:	69fa      	ldr	r2, [r7, #28]
 80068c2:	440a      	add	r2, r1
 80068c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80068ce:	79fb      	ldrb	r3, [r7, #7]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d14b      	bne.n	800696c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d009      	beq.n	80068f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e8:	461a      	mov	r2, r3
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	791b      	ldrb	r3, [r3, #4]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d128      	bne.n	800694a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006904:	2b00      	cmp	r3, #0
 8006906:	d110      	bne.n	800692a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	0151      	lsls	r1, r2, #5
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	440a      	add	r2, r1
 800691e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006922:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	e00f      	b.n	800694a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	0151      	lsls	r1, r2, #5
 800693c:	69fa      	ldr	r2, [r7, #28]
 800693e:	440a      	add	r2, r1
 8006940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006948:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	0151      	lsls	r1, r2, #5
 800695c:	69fa      	ldr	r2, [r7, #28]
 800695e:	440a      	add	r2, r1
 8006960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006964:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	e133      	b.n	8006bd4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	0151      	lsls	r1, r2, #5
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	440a      	add	r2, r1
 8006982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006986:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800698a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	791b      	ldrb	r3, [r3, #4]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d015      	beq.n	80069c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 811b 	beq.w	8006bd4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	2101      	movs	r1, #1
 80069b0:	fa01 f303 	lsl.w	r3, r1, r3
 80069b4:	69f9      	ldr	r1, [r7, #28]
 80069b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069ba:	4313      	orrs	r3, r2
 80069bc:	634b      	str	r3, [r1, #52]	; 0x34
 80069be:	e109      	b.n	8006bd4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d110      	bne.n	80069f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	0151      	lsls	r1, r2, #5
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	440a      	add	r2, r1
 80069e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	e00f      	b.n	8006a12 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	0151      	lsls	r1, r2, #5
 8006a04:	69fa      	ldr	r2, [r7, #28]
 8006a06:	440a      	add	r2, r1
 8006a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a10:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	6919      	ldr	r1, [r3, #16]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	781a      	ldrb	r2, [r3, #0]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	b298      	uxth	r0, r3
 8006a20:	79fb      	ldrb	r3, [r7, #7]
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	4603      	mov	r3, r0
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 fade 	bl	8006fe8 <USB_WritePacket>
 8006a2c:	e0d2      	b.n	8006bd4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	0151      	lsls	r1, r2, #5
 8006a40:	69fa      	ldr	r2, [r7, #28]
 8006a42:	440a      	add	r2, r1
 8006a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a48:	0cdb      	lsrs	r3, r3, #19
 8006a4a:	04db      	lsls	r3, r3, #19
 8006a4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	0151      	lsls	r1, r2, #5
 8006a60:	69fa      	ldr	r2, [r7, #28]
 8006a62:	440a      	add	r2, r1
 8006a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a70:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d126      	bne.n	8006ac8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a90:	69b9      	ldr	r1, [r7, #24]
 8006a92:	0148      	lsls	r0, r1, #5
 8006a94:	69f9      	ldr	r1, [r7, #28]
 8006a96:	4401      	add	r1, r0
 8006a98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	0151      	lsls	r1, r2, #5
 8006ab2:	69fa      	ldr	r2, [r7, #28]
 8006ab4:	440a      	add	r2, r1
 8006ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006abe:	6113      	str	r3, [r2, #16]
 8006ac0:	e03a      	b.n	8006b38 <USB_EPStartXfer+0x3e4>
 8006ac2:	bf00      	nop
 8006ac4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	699a      	ldr	r2, [r3, #24]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	1e5a      	subs	r2, r3, #1
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006adc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	8afa      	ldrh	r2, [r7, #22]
 8006ae4:	fb03 f202 	mul.w	r2, r3, r2
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af8:	691a      	ldr	r2, [r3, #16]
 8006afa:	8afb      	ldrh	r3, [r7, #22]
 8006afc:	04d9      	lsls	r1, r3, #19
 8006afe:	4b38      	ldr	r3, [pc, #224]	; (8006be0 <USB_EPStartXfer+0x48c>)
 8006b00:	400b      	ands	r3, r1
 8006b02:	69b9      	ldr	r1, [r7, #24]
 8006b04:	0148      	lsls	r0, r1, #5
 8006b06:	69f9      	ldr	r1, [r7, #28]
 8006b08:	4401      	add	r1, r0
 8006b0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b28:	69b9      	ldr	r1, [r7, #24]
 8006b2a:	0148      	lsls	r0, r1, #5
 8006b2c:	69f9      	ldr	r1, [r7, #28]
 8006b2e:	4401      	add	r1, r0
 8006b30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b34:	4313      	orrs	r3, r2
 8006b36:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006b38:	79fb      	ldrb	r3, [r7, #7]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d10d      	bne.n	8006b5a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d009      	beq.n	8006b5a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	6919      	ldr	r1, [r3, #16]
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b56:	460a      	mov	r2, r1
 8006b58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	791b      	ldrb	r3, [r3, #4]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d128      	bne.n	8006bb4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d110      	bne.n	8006b94 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	0151      	lsls	r1, r2, #5
 8006b84:	69fa      	ldr	r2, [r7, #28]
 8006b86:	440a      	add	r2, r1
 8006b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	e00f      	b.n	8006bb4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	0151      	lsls	r1, r2, #5
 8006ba6:	69fa      	ldr	r2, [r7, #28]
 8006ba8:	440a      	add	r2, r1
 8006baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bb2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	0151      	lsls	r1, r2, #5
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	440a      	add	r2, r1
 8006bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3720      	adds	r7, #32
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	1ff80000 	.word	0x1ff80000

08006be4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	785b      	ldrb	r3, [r3, #1]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	f040 80ce 	bne.w	8006da2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d132      	bne.n	8006c74 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	0151      	lsls	r1, r2, #5
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	440a      	add	r2, r1
 8006c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	0151      	lsls	r1, r2, #5
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	440a      	add	r2, r1
 8006c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	0151      	lsls	r1, r2, #5
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	440a      	add	r2, r1
 8006c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6c:	0cdb      	lsrs	r3, r3, #19
 8006c6e:	04db      	lsls	r3, r3, #19
 8006c70:	6113      	str	r3, [r2, #16]
 8006c72:	e04e      	b.n	8006d12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	0151      	lsls	r1, r2, #5
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	440a      	add	r2, r1
 8006c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c8e:	0cdb      	lsrs	r3, r3, #19
 8006c90:	04db      	lsls	r3, r3, #19
 8006c92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cb6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	699a      	ldr	r2, [r3, #24]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d903      	bls.n	8006ccc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	68da      	ldr	r2, [r3, #12]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	0151      	lsls	r1, r2, #5
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	440a      	add	r2, r1
 8006ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf8:	691a      	ldr	r2, [r3, #16]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d02:	6939      	ldr	r1, [r7, #16]
 8006d04:	0148      	lsls	r0, r1, #5
 8006d06:	6979      	ldr	r1, [r7, #20]
 8006d08:	4401      	add	r1, r0
 8006d0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d11e      	bne.n	8006d56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d009      	beq.n	8006d34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	0151      	lsls	r1, r2, #5
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	440a      	add	r2, r1
 8006d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	e097      	b.n	8006e86 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	0151      	lsls	r1, r2, #5
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	440a      	add	r2, r1
 8006d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 8083 	beq.w	8006e86 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	2101      	movs	r1, #1
 8006d92:	fa01 f303 	lsl.w	r3, r1, r3
 8006d96:	6979      	ldr	r1, [r7, #20]
 8006d98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	634b      	str	r3, [r1, #52]	; 0x34
 8006da0:	e071      	b.n	8006e86 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	0151      	lsls	r1, r2, #5
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	440a      	add	r2, r1
 8006db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dbc:	0cdb      	lsrs	r3, r3, #19
 8006dbe:	04db      	lsls	r3, r3, #19
 8006dc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	0151      	lsls	r1, r2, #5
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	440a      	add	r2, r1
 8006dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ddc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006de0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006de4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	0151      	lsls	r1, r2, #5
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	440a      	add	r2, r1
 8006e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2a:	691a      	ldr	r2, [r3, #16]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e34:	6939      	ldr	r1, [r7, #16]
 8006e36:	0148      	lsls	r0, r1, #5
 8006e38:	6979      	ldr	r1, [r7, #20]
 8006e3a:	4401      	add	r1, r0
 8006e3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e40:	4313      	orrs	r3, r2
 8006e42:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006e44:	79fb      	ldrb	r3, [r7, #7]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d10d      	bne.n	8006e66 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d009      	beq.n	8006e66 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	6919      	ldr	r1, [r3, #16]
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e62:	460a      	mov	r2, r1
 8006e64:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	0151      	lsls	r1, r2, #5
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	785b      	ldrb	r3, [r3, #1]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d14a      	bne.n	8006f48 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eca:	f040 8086 	bne.w	8006fda <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	7812      	ldrb	r2, [r2, #0]
 8006ee2:	0151      	lsls	r1, r2, #5
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	440a      	add	r2, r1
 8006ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ef0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	7812      	ldrb	r2, [r2, #0]
 8006f06:	0151      	lsls	r1, r2, #5
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	440a      	add	r2, r1
 8006f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d902      	bls.n	8006f2c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	75fb      	strb	r3, [r7, #23]
          break;
 8006f2a:	e056      	b.n	8006fda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f44:	d0e7      	beq.n	8006f16 <USB_EPStopXfer+0x82>
 8006f46:	e048      	b.n	8006fda <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f60:	d13b      	bne.n	8006fda <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	7812      	ldrb	r2, [r2, #0]
 8006f76:	0151      	lsls	r1, r2, #5
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	440a      	add	r2, r1
 8006f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f84:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	7812      	ldrb	r2, [r2, #0]
 8006f9a:	0151      	lsls	r1, r2, #5
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	440a      	add	r2, r1
 8006fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3301      	adds	r3, #1
 8006fae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d902      	bls.n	8006fc0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	75fb      	strb	r3, [r7, #23]
          break;
 8006fbe:	e00c      	b.n	8006fda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fd8:	d0e7      	beq.n	8006faa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	371c      	adds	r7, #28
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b089      	sub	sp, #36	; 0x24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	71fb      	strb	r3, [r7, #7]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007006:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800700a:	2b00      	cmp	r3, #0
 800700c:	d123      	bne.n	8007056 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800700e:	88bb      	ldrh	r3, [r7, #4]
 8007010:	3303      	adds	r3, #3
 8007012:	089b      	lsrs	r3, r3, #2
 8007014:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007016:	2300      	movs	r3, #0
 8007018:	61bb      	str	r3, [r7, #24]
 800701a:	e018      	b.n	800704e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800701c:	79fb      	ldrb	r3, [r7, #7]
 800701e:	031a      	lsls	r2, r3, #12
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	4413      	add	r3, r2
 8007024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007028:	461a      	mov	r2, r3
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	3301      	adds	r3, #1
 8007034:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	3301      	adds	r3, #1
 800703a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	3301      	adds	r3, #1
 8007040:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	3301      	adds	r3, #1
 8007046:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	3301      	adds	r3, #1
 800704c:	61bb      	str	r3, [r7, #24]
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	429a      	cmp	r2, r3
 8007054:	d3e2      	bcc.n	800701c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3724      	adds	r7, #36	; 0x24
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007064:	b480      	push	{r7}
 8007066:	b08b      	sub	sp, #44	; 0x2c
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800707a:	88fb      	ldrh	r3, [r7, #6]
 800707c:	089b      	lsrs	r3, r3, #2
 800707e:	b29b      	uxth	r3, r3
 8007080:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	f003 0303 	and.w	r3, r3, #3
 8007088:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800708a:	2300      	movs	r3, #0
 800708c:	623b      	str	r3, [r7, #32]
 800708e:	e014      	b.n	80070ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709a:	601a      	str	r2, [r3, #0]
    pDest++;
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	3301      	adds	r3, #1
 80070a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	3301      	adds	r3, #1
 80070a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	3301      	adds	r3, #1
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	3301      	adds	r3, #1
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	3301      	adds	r3, #1
 80070b8:	623b      	str	r3, [r7, #32]
 80070ba:	6a3a      	ldr	r2, [r7, #32]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d3e6      	bcc.n	8007090 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80070c2:	8bfb      	ldrh	r3, [r7, #30]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d01e      	beq.n	8007106 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d2:	461a      	mov	r2, r3
 80070d4:	f107 0310 	add.w	r3, r7, #16
 80070d8:	6812      	ldr	r2, [r2, #0]
 80070da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	00db      	lsls	r3, r3, #3
 80070e4:	fa22 f303 	lsr.w	r3, r2, r3
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	701a      	strb	r2, [r3, #0]
      i++;
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	3301      	adds	r3, #1
 80070f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	3301      	adds	r3, #1
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80070fa:	8bfb      	ldrh	r3, [r7, #30]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007100:	8bfb      	ldrh	r3, [r7, #30]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1ea      	bne.n	80070dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007108:	4618      	mov	r0, r3
 800710a:	372c      	adds	r7, #44	; 0x2c
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	785b      	ldrb	r3, [r3, #1]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d12c      	bne.n	800718a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	4413      	add	r3, r2
 8007138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	db12      	blt.n	8007168 <USB_EPSetStall+0x54>
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00f      	beq.n	8007168 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	440a      	add	r2, r1
 800715e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007162:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007166:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	0151      	lsls	r1, r2, #5
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	440a      	add	r2, r1
 800717e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007182:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007186:	6013      	str	r3, [r2, #0]
 8007188:	e02b      	b.n	80071e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	db12      	blt.n	80071c2 <USB_EPSetStall+0xae>
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00f      	beq.n	80071c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	0151      	lsls	r1, r2, #5
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	440a      	add	r2, r1
 80071b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	0151      	lsls	r1, r2, #5
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	440a      	add	r2, r1
 80071d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	785b      	ldrb	r3, [r3, #1]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d128      	bne.n	800725e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	015a      	lsls	r2, r3, #5
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4413      	add	r3, r2
 8007214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	0151      	lsls	r1, r2, #5
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	440a      	add	r2, r1
 8007222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007226:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800722a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	791b      	ldrb	r3, [r3, #4]
 8007230:	2b03      	cmp	r3, #3
 8007232:	d003      	beq.n	800723c <USB_EPClearStall+0x4c>
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	791b      	ldrb	r3, [r3, #4]
 8007238:	2b02      	cmp	r3, #2
 800723a:	d138      	bne.n	80072ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	0151      	lsls	r1, r2, #5
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	440a      	add	r2, r1
 8007252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800725a:	6013      	str	r3, [r2, #0]
 800725c:	e027      	b.n	80072ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	4413      	add	r3, r2
 8007266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	0151      	lsls	r1, r2, #5
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	440a      	add	r2, r1
 8007274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007278:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800727c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	791b      	ldrb	r3, [r3, #4]
 8007282:	2b03      	cmp	r3, #3
 8007284:	d003      	beq.n	800728e <USB_EPClearStall+0x9e>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	791b      	ldrb	r3, [r3, #4]
 800728a:	2b02      	cmp	r3, #2
 800728c:	d10f      	bne.n	80072ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	0151      	lsls	r1, r2, #5
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	440a      	add	r2, r1
 80072a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80072de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	78fb      	ldrb	r3, [r7, #3]
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80072f0:	68f9      	ldr	r1, [r7, #12]
 80072f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072f6:	4313      	orrs	r3, r2
 80072f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007322:	f023 0303 	bic.w	r3, r3, #3
 8007326:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007336:	f023 0302 	bic.w	r3, r3, #2
 800733a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800734a:	b480      	push	{r7}
 800734c:	b085      	sub	sp, #20
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007364:	f023 0303 	bic.w	r3, r3, #3
 8007368:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007378:	f043 0302 	orr.w	r3, r3, #2
 800737c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4013      	ands	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80073a4:	68fb      	ldr	r3, [r7, #12]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b085      	sub	sp, #20
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ce:	69db      	ldr	r3, [r3, #28]
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	4013      	ands	r3, r2
 80073d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	0c1b      	lsrs	r3, r3, #16
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b085      	sub	sp, #20
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	4013      	ands	r3, r2
 8007408:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	b29b      	uxth	r3, r3
}
 800740e:	4618      	mov	r0, r3
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800741a:	b480      	push	{r7}
 800741c:	b085      	sub	sp, #20
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	460b      	mov	r3, r1
 8007424:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800742a:	78fb      	ldrb	r3, [r7, #3]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	4013      	ands	r3, r2
 8007446:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007448:	68bb      	ldr	r3, [r7, #8]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007456:	b480      	push	{r7}
 8007458:	b087      	sub	sp, #28
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	460b      	mov	r3, r1
 8007460:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007478:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	f003 030f 	and.w	r3, r3, #15
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	fa22 f303 	lsr.w	r3, r2, r3
 8007486:	01db      	lsls	r3, r3, #7
 8007488:	b2db      	uxtb	r3, r3
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	4313      	orrs	r3, r2
 800748e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007490:	78fb      	ldrb	r3, [r7, #3]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	4013      	ands	r3, r2
 80074a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80074a4:	68bb      	ldr	r3, [r7, #8]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	f003 0301 	and.w	r3, r3, #1
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b085      	sub	sp, #20
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80074ec:	f023 0307 	bic.w	r3, r3, #7
 80074f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007504:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	460b      	mov	r3, r1
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	333c      	adds	r3, #60	; 0x3c
 800752a:	3304      	adds	r3, #4
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	4a26      	ldr	r2, [pc, #152]	; (80075cc <USB_EP0_OutStart+0xb8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d90a      	bls.n	800754e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007544:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007548:	d101      	bne.n	800754e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	e037      	b.n	80075be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007554:	461a      	mov	r2, r3
 8007556:	2300      	movs	r3, #0
 8007558:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007568:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800756c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800757c:	f043 0318 	orr.w	r3, r3, #24
 8007580:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007590:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007594:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007596:	7afb      	ldrb	r3, [r7, #11]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d10f      	bne.n	80075bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a2:	461a      	mov	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80075ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	4f54300a 	.word	0x4f54300a

080075d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4a13      	ldr	r2, [pc, #76]	; (8007634 <USB_CoreReset+0x64>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d901      	bls.n	80075ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e01b      	b.n	8007626 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	daf2      	bge.n	80075dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	f043 0201 	orr.w	r2, r3, #1
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3301      	adds	r3, #1
 800760a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4a09      	ldr	r2, [pc, #36]	; (8007634 <USB_CoreReset+0x64>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d901      	bls.n	8007618 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e006      	b.n	8007626 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b01      	cmp	r3, #1
 8007622:	d0f0      	beq.n	8007606 <USB_CoreReset+0x36>

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	00030d40 	.word	0x00030d40

08007638 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007644:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007648:	f002 fc1e 	bl	8009e88 <USBD_static_malloc>
 800764c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d109      	bne.n	8007668 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	32b0      	adds	r2, #176	; 0xb0
 800765e:	2100      	movs	r1, #0
 8007660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007664:	2302      	movs	r3, #2
 8007666:	e0d4      	b.n	8007812 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007668:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800766c:	2100      	movs	r1, #0
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f003 f9e1 	bl	800aa36 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	32b0      	adds	r2, #176	; 0xb0
 800767e:	68f9      	ldr	r1, [r7, #12]
 8007680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	32b0      	adds	r2, #176	; 0xb0
 800768e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	7c1b      	ldrb	r3, [r3, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d138      	bne.n	8007712 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80076a0:	4b5e      	ldr	r3, [pc, #376]	; (800781c <USBD_CDC_Init+0x1e4>)
 80076a2:	7819      	ldrb	r1, [r3, #0]
 80076a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076a8:	2202      	movs	r2, #2
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f002 fac9 	bl	8009c42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80076b0:	4b5a      	ldr	r3, [pc, #360]	; (800781c <USBD_CDC_Init+0x1e4>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	f003 020f 	and.w	r2, r3, #15
 80076b8:	6879      	ldr	r1, [r7, #4]
 80076ba:	4613      	mov	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	440b      	add	r3, r1
 80076c4:	3324      	adds	r3, #36	; 0x24
 80076c6:	2201      	movs	r2, #1
 80076c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80076ca:	4b55      	ldr	r3, [pc, #340]	; (8007820 <USBD_CDC_Init+0x1e8>)
 80076cc:	7819      	ldrb	r1, [r3, #0]
 80076ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076d2:	2202      	movs	r2, #2
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f002 fab4 	bl	8009c42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80076da:	4b51      	ldr	r3, [pc, #324]	; (8007820 <USBD_CDC_Init+0x1e8>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	f003 020f 	and.w	r2, r3, #15
 80076e2:	6879      	ldr	r1, [r7, #4]
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	440b      	add	r3, r1
 80076ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80076f2:	2201      	movs	r2, #1
 80076f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80076f6:	4b4b      	ldr	r3, [pc, #300]	; (8007824 <USBD_CDC_Init+0x1ec>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	f003 020f 	and.w	r2, r3, #15
 80076fe:	6879      	ldr	r1, [r7, #4]
 8007700:	4613      	mov	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	440b      	add	r3, r1
 800770a:	3326      	adds	r3, #38	; 0x26
 800770c:	2210      	movs	r2, #16
 800770e:	801a      	strh	r2, [r3, #0]
 8007710:	e035      	b.n	800777e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007712:	4b42      	ldr	r3, [pc, #264]	; (800781c <USBD_CDC_Init+0x1e4>)
 8007714:	7819      	ldrb	r1, [r3, #0]
 8007716:	2340      	movs	r3, #64	; 0x40
 8007718:	2202      	movs	r2, #2
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f002 fa91 	bl	8009c42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007720:	4b3e      	ldr	r3, [pc, #248]	; (800781c <USBD_CDC_Init+0x1e4>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	f003 020f 	and.w	r2, r3, #15
 8007728:	6879      	ldr	r1, [r7, #4]
 800772a:	4613      	mov	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	440b      	add	r3, r1
 8007734:	3324      	adds	r3, #36	; 0x24
 8007736:	2201      	movs	r2, #1
 8007738:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800773a:	4b39      	ldr	r3, [pc, #228]	; (8007820 <USBD_CDC_Init+0x1e8>)
 800773c:	7819      	ldrb	r1, [r3, #0]
 800773e:	2340      	movs	r3, #64	; 0x40
 8007740:	2202      	movs	r2, #2
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f002 fa7d 	bl	8009c42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007748:	4b35      	ldr	r3, [pc, #212]	; (8007820 <USBD_CDC_Init+0x1e8>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	f003 020f 	and.w	r2, r3, #15
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007760:	2201      	movs	r2, #1
 8007762:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007764:	4b2f      	ldr	r3, [pc, #188]	; (8007824 <USBD_CDC_Init+0x1ec>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	f003 020f 	and.w	r2, r3, #15
 800776c:	6879      	ldr	r1, [r7, #4]
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	440b      	add	r3, r1
 8007778:	3326      	adds	r3, #38	; 0x26
 800777a:	2210      	movs	r2, #16
 800777c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800777e:	4b29      	ldr	r3, [pc, #164]	; (8007824 <USBD_CDC_Init+0x1ec>)
 8007780:	7819      	ldrb	r1, [r3, #0]
 8007782:	2308      	movs	r3, #8
 8007784:	2203      	movs	r2, #3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f002 fa5b 	bl	8009c42 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800778c:	4b25      	ldr	r3, [pc, #148]	; (8007824 <USBD_CDC_Init+0x1ec>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f003 020f 	and.w	r2, r3, #15
 8007794:	6879      	ldr	r1, [r7, #4]
 8007796:	4613      	mov	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	440b      	add	r3, r1
 80077a0:	3324      	adds	r3, #36	; 0x24
 80077a2:	2201      	movs	r2, #1
 80077a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	33b0      	adds	r3, #176	; 0xb0
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80077dc:	2302      	movs	r3, #2
 80077de:	e018      	b.n	8007812 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	7c1b      	ldrb	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10a      	bne.n	80077fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077e8:	4b0d      	ldr	r3, [pc, #52]	; (8007820 <USBD_CDC_Init+0x1e8>)
 80077ea:	7819      	ldrb	r1, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f002 fb12 	bl	8009e20 <USBD_LL_PrepareReceive>
 80077fc:	e008      	b.n	8007810 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077fe:	4b08      	ldr	r3, [pc, #32]	; (8007820 <USBD_CDC_Init+0x1e8>)
 8007800:	7819      	ldrb	r1, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007808:	2340      	movs	r3, #64	; 0x40
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f002 fb08 	bl	8009e20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20000133 	.word	0x20000133
 8007820:	20000134 	.word	0x20000134
 8007824:	20000135 	.word	0x20000135

08007828 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007834:	4b3a      	ldr	r3, [pc, #232]	; (8007920 <USBD_CDC_DeInit+0xf8>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f002 fa27 	bl	8009c8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007840:	4b37      	ldr	r3, [pc, #220]	; (8007920 <USBD_CDC_DeInit+0xf8>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	f003 020f 	and.w	r2, r3, #15
 8007848:	6879      	ldr	r1, [r7, #4]
 800784a:	4613      	mov	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	440b      	add	r3, r1
 8007854:	3324      	adds	r3, #36	; 0x24
 8007856:	2200      	movs	r2, #0
 8007858:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800785a:	4b32      	ldr	r3, [pc, #200]	; (8007924 <USBD_CDC_DeInit+0xfc>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f002 fa14 	bl	8009c8e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007866:	4b2f      	ldr	r3, [pc, #188]	; (8007924 <USBD_CDC_DeInit+0xfc>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	f003 020f 	and.w	r2, r3, #15
 800786e:	6879      	ldr	r1, [r7, #4]
 8007870:	4613      	mov	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	440b      	add	r3, r1
 800787a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800787e:	2200      	movs	r2, #0
 8007880:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007882:	4b29      	ldr	r3, [pc, #164]	; (8007928 <USBD_CDC_DeInit+0x100>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f002 fa00 	bl	8009c8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800788e:	4b26      	ldr	r3, [pc, #152]	; (8007928 <USBD_CDC_DeInit+0x100>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	f003 020f 	and.w	r2, r3, #15
 8007896:	6879      	ldr	r1, [r7, #4]
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	440b      	add	r3, r1
 80078a2:	3324      	adds	r3, #36	; 0x24
 80078a4:	2200      	movs	r2, #0
 80078a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80078a8:	4b1f      	ldr	r3, [pc, #124]	; (8007928 <USBD_CDC_DeInit+0x100>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	f003 020f 	and.w	r2, r3, #15
 80078b0:	6879      	ldr	r1, [r7, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	440b      	add	r3, r1
 80078bc:	3326      	adds	r3, #38	; 0x26
 80078be:	2200      	movs	r2, #0
 80078c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	32b0      	adds	r2, #176	; 0xb0
 80078cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d01f      	beq.n	8007914 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	33b0      	adds	r3, #176	; 0xb0
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	32b0      	adds	r2, #176	; 0xb0
 80078f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f002 fad4 	bl	8009ea4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	32b0      	adds	r2, #176	; 0xb0
 8007906:	2100      	movs	r1, #0
 8007908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	20000133 	.word	0x20000133
 8007924:	20000134 	.word	0x20000134
 8007928:	20000135 	.word	0x20000135

0800792c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	32b0      	adds	r2, #176	; 0xb0
 8007940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007944:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800794a:	2300      	movs	r3, #0
 800794c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007958:	2303      	movs	r3, #3
 800795a:	e0bf      	b.n	8007adc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007964:	2b00      	cmp	r3, #0
 8007966:	d050      	beq.n	8007a0a <USBD_CDC_Setup+0xde>
 8007968:	2b20      	cmp	r3, #32
 800796a:	f040 80af 	bne.w	8007acc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	88db      	ldrh	r3, [r3, #6]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d03a      	beq.n	80079ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	b25b      	sxtb	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	da1b      	bge.n	80079b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	33b0      	adds	r3, #176	; 0xb0
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007996:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	88d2      	ldrh	r2, [r2, #6]
 800799c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	88db      	ldrh	r3, [r3, #6]
 80079a2:	2b07      	cmp	r3, #7
 80079a4:	bf28      	it	cs
 80079a6:	2307      	movcs	r3, #7
 80079a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	89fa      	ldrh	r2, [r7, #14]
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 fd43 	bl	800943c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80079b6:	e090      	b.n	8007ada <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	785a      	ldrb	r2, [r3, #1]
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	88db      	ldrh	r3, [r3, #6]
 80079c6:	2b3f      	cmp	r3, #63	; 0x3f
 80079c8:	d803      	bhi.n	80079d2 <USBD_CDC_Setup+0xa6>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	88db      	ldrh	r3, [r3, #6]
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	e000      	b.n	80079d4 <USBD_CDC_Setup+0xa8>
 80079d2:	2240      	movs	r2, #64	; 0x40
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80079da:	6939      	ldr	r1, [r7, #16]
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80079e2:	461a      	mov	r2, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 fd55 	bl	8009494 <USBD_CtlPrepareRx>
      break;
 80079ea:	e076      	b.n	8007ada <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	33b0      	adds	r3, #176	; 0xb0
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	7850      	ldrb	r0, [r2, #1]
 8007a02:	2200      	movs	r2, #0
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	4798      	blx	r3
      break;
 8007a08:	e067      	b.n	8007ada <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	2b0b      	cmp	r3, #11
 8007a10:	d851      	bhi.n	8007ab6 <USBD_CDC_Setup+0x18a>
 8007a12:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <USBD_CDC_Setup+0xec>)
 8007a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a18:	08007a49 	.word	0x08007a49
 8007a1c:	08007ac5 	.word	0x08007ac5
 8007a20:	08007ab7 	.word	0x08007ab7
 8007a24:	08007ab7 	.word	0x08007ab7
 8007a28:	08007ab7 	.word	0x08007ab7
 8007a2c:	08007ab7 	.word	0x08007ab7
 8007a30:	08007ab7 	.word	0x08007ab7
 8007a34:	08007ab7 	.word	0x08007ab7
 8007a38:	08007ab7 	.word	0x08007ab7
 8007a3c:	08007ab7 	.word	0x08007ab7
 8007a40:	08007a73 	.word	0x08007a73
 8007a44:	08007a9d 	.word	0x08007a9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d107      	bne.n	8007a64 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a54:	f107 030a 	add.w	r3, r7, #10
 8007a58:	2202      	movs	r2, #2
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 fced 	bl	800943c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a62:	e032      	b.n	8007aca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 fc77 	bl	800935a <USBD_CtlError>
            ret = USBD_FAIL;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	75fb      	strb	r3, [r7, #23]
          break;
 8007a70:	e02b      	b.n	8007aca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d107      	bne.n	8007a8e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a7e:	f107 030d 	add.w	r3, r7, #13
 8007a82:	2201      	movs	r2, #1
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 fcd8 	bl	800943c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a8c:	e01d      	b.n	8007aca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 fc62 	bl	800935a <USBD_CtlError>
            ret = USBD_FAIL;
 8007a96:	2303      	movs	r3, #3
 8007a98:	75fb      	strb	r3, [r7, #23]
          break;
 8007a9a:	e016      	b.n	8007aca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b03      	cmp	r3, #3
 8007aa6:	d00f      	beq.n	8007ac8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f001 fc55 	bl	800935a <USBD_CtlError>
            ret = USBD_FAIL;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ab4:	e008      	b.n	8007ac8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 fc4e 	bl	800935a <USBD_CtlError>
          ret = USBD_FAIL;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	75fb      	strb	r3, [r7, #23]
          break;
 8007ac2:	e002      	b.n	8007aca <USBD_CDC_Setup+0x19e>
          break;
 8007ac4:	bf00      	nop
 8007ac6:	e008      	b.n	8007ada <USBD_CDC_Setup+0x1ae>
          break;
 8007ac8:	bf00      	nop
      }
      break;
 8007aca:	e006      	b.n	8007ada <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f001 fc43 	bl	800935a <USBD_CtlError>
      ret = USBD_FAIL;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ad8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	460b      	mov	r3, r1
 8007aee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007af6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	32b0      	adds	r2, #176	; 0xb0
 8007b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e065      	b.n	8007bda <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	32b0      	adds	r2, #176	; 0xb0
 8007b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007b1e:	78fb      	ldrb	r3, [r7, #3]
 8007b20:	f003 020f 	and.w	r2, r3, #15
 8007b24:	6879      	ldr	r1, [r7, #4]
 8007b26:	4613      	mov	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	440b      	add	r3, r1
 8007b30:	3318      	adds	r3, #24
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d02f      	beq.n	8007b98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007b38:	78fb      	ldrb	r3, [r7, #3]
 8007b3a:	f003 020f 	and.w	r2, r3, #15
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	4613      	mov	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	440b      	add	r3, r1
 8007b4a:	3318      	adds	r3, #24
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	78fb      	ldrb	r3, [r7, #3]
 8007b50:	f003 010f 	and.w	r1, r3, #15
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	460b      	mov	r3, r1
 8007b58:	00db      	lsls	r3, r3, #3
 8007b5a:	440b      	add	r3, r1
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4403      	add	r3, r0
 8007b60:	3348      	adds	r3, #72	; 0x48
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b68:	fb01 f303 	mul.w	r3, r1, r3
 8007b6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d112      	bne.n	8007b98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007b72:	78fb      	ldrb	r3, [r7, #3]
 8007b74:	f003 020f 	and.w	r2, r3, #15
 8007b78:	6879      	ldr	r1, [r7, #4]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	440b      	add	r3, r1
 8007b84:	3318      	adds	r3, #24
 8007b86:	2200      	movs	r2, #0
 8007b88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b8a:	78f9      	ldrb	r1, [r7, #3]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	2200      	movs	r2, #0
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f002 f924 	bl	8009dde <USBD_LL_Transmit>
 8007b96:	e01f      	b.n	8007bd8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	33b0      	adds	r3, #176	; 0xb0
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d010      	beq.n	8007bd8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	33b0      	adds	r3, #176	; 0xb0
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007bd4:	78fa      	ldrb	r2, [r7, #3]
 8007bd6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	460b      	mov	r3, r1
 8007bec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	32b0      	adds	r2, #176	; 0xb0
 8007bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	32b0      	adds	r2, #176	; 0xb0
 8007c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e01a      	b.n	8007c4a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c14:	78fb      	ldrb	r3, [r7, #3]
 8007c16:	4619      	mov	r1, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f002 f922 	bl	8009e62 <USBD_LL_GetRxDataSize>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	33b0      	adds	r3, #176	; 0xb0
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c44:	4611      	mov	r1, r2
 8007c46:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	32b0      	adds	r2, #176	; 0xb0
 8007c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c70:	2303      	movs	r3, #3
 8007c72:	e025      	b.n	8007cc0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	33b0      	adds	r3, #176	; 0xb0
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d01a      	beq.n	8007cbe <USBD_CDC_EP0_RxReady+0x6c>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c8e:	2bff      	cmp	r3, #255	; 0xff
 8007c90:	d015      	beq.n	8007cbe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	33b0      	adds	r3, #176	; 0xb0
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007caa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007cb2:	b292      	uxth	r2, r2
 8007cb4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	22ff      	movs	r2, #255	; 0xff
 8007cba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007cd0:	2182      	movs	r1, #130	; 0x82
 8007cd2:	4818      	ldr	r0, [pc, #96]	; (8007d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007cd4:	f000 fd09 	bl	80086ea <USBD_GetEpDesc>
 8007cd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007cda:	2101      	movs	r1, #1
 8007cdc:	4815      	ldr	r0, [pc, #84]	; (8007d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007cde:	f000 fd04 	bl	80086ea <USBD_GetEpDesc>
 8007ce2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ce4:	2181      	movs	r1, #129	; 0x81
 8007ce6:	4813      	ldr	r0, [pc, #76]	; (8007d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ce8:	f000 fcff 	bl	80086ea <USBD_GetEpDesc>
 8007cec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d002      	beq.n	8007cfa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	2210      	movs	r2, #16
 8007cf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d006      	beq.n	8007d0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d08:	711a      	strb	r2, [r3, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d006      	beq.n	8007d22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d1c:	711a      	strb	r2, [r3, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2243      	movs	r2, #67	; 0x43
 8007d26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d28:	4b02      	ldr	r3, [pc, #8]	; (8007d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3718      	adds	r7, #24
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	200000f0 	.word	0x200000f0

08007d38 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d40:	2182      	movs	r1, #130	; 0x82
 8007d42:	4818      	ldr	r0, [pc, #96]	; (8007da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d44:	f000 fcd1 	bl	80086ea <USBD_GetEpDesc>
 8007d48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	4815      	ldr	r0, [pc, #84]	; (8007da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d4e:	f000 fccc 	bl	80086ea <USBD_GetEpDesc>
 8007d52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d54:	2181      	movs	r1, #129	; 0x81
 8007d56:	4813      	ldr	r0, [pc, #76]	; (8007da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d58:	f000 fcc7 	bl	80086ea <USBD_GetEpDesc>
 8007d5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2210      	movs	r2, #16
 8007d68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d006      	beq.n	8007d7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	2200      	movs	r2, #0
 8007d74:	711a      	strb	r2, [r3, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f042 0202 	orr.w	r2, r2, #2
 8007d7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d006      	beq.n	8007d92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	711a      	strb	r2, [r3, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f042 0202 	orr.w	r2, r2, #2
 8007d90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2243      	movs	r2, #67	; 0x43
 8007d96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d98:	4b02      	ldr	r3, [pc, #8]	; (8007da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	200000f0 	.word	0x200000f0

08007da8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007db0:	2182      	movs	r1, #130	; 0x82
 8007db2:	4818      	ldr	r0, [pc, #96]	; (8007e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007db4:	f000 fc99 	bl	80086ea <USBD_GetEpDesc>
 8007db8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007dba:	2101      	movs	r1, #1
 8007dbc:	4815      	ldr	r0, [pc, #84]	; (8007e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007dbe:	f000 fc94 	bl	80086ea <USBD_GetEpDesc>
 8007dc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007dc4:	2181      	movs	r1, #129	; 0x81
 8007dc6:	4813      	ldr	r0, [pc, #76]	; (8007e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007dc8:	f000 fc8f 	bl	80086ea <USBD_GetEpDesc>
 8007dcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	2210      	movs	r2, #16
 8007dd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d006      	beq.n	8007dee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007de8:	711a      	strb	r2, [r3, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d006      	beq.n	8007e02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dfc:	711a      	strb	r2, [r3, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2243      	movs	r2, #67	; 0x43
 8007e06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e08:	4b02      	ldr	r3, [pc, #8]	; (8007e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	200000f0 	.word	0x200000f0

08007e18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	220a      	movs	r2, #10
 8007e24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007e26:	4b03      	ldr	r3, [pc, #12]	; (8007e34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	200000ac 	.word	0x200000ac

08007e38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e009      	b.n	8007e60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	33b0      	adds	r3, #176	; 0xb0
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b087      	sub	sp, #28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	32b0      	adds	r2, #176	; 0xb0
 8007e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e86:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e008      	b.n	8007ea4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	371c      	adds	r7, #28
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	32b0      	adds	r2, #176	; 0xb0
 8007ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e004      	b.n	8007ede <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
	...

08007eec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	32b0      	adds	r2, #176	; 0xb0
 8007efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f02:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	32b0      	adds	r2, #176	; 0xb0
 8007f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e018      	b.n	8007f4c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	7c1b      	ldrb	r3, [r3, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10a      	bne.n	8007f38 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f22:	4b0c      	ldr	r3, [pc, #48]	; (8007f54 <USBD_CDC_ReceivePacket+0x68>)
 8007f24:	7819      	ldrb	r1, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 ff75 	bl	8009e20 <USBD_LL_PrepareReceive>
 8007f36:	e008      	b.n	8007f4a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f38:	4b06      	ldr	r3, [pc, #24]	; (8007f54 <USBD_CDC_ReceivePacket+0x68>)
 8007f3a:	7819      	ldrb	r1, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f42:	2340      	movs	r3, #64	; 0x40
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 ff6b 	bl	8009e20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	20000134 	.word	0x20000134

08007f58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	4613      	mov	r3, r2
 8007f64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d101      	bne.n	8007f70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e01f      	b.n	8007fb0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	79fa      	ldrb	r2, [r7, #7]
 8007fa2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f001 fde5 	bl	8009b74 <USBD_LL_Init>
 8007faa:	4603      	mov	r3, r0
 8007fac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3718      	adds	r7, #24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e025      	b.n	800801c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	32ae      	adds	r2, #174	; 0xae
 8007fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00f      	beq.n	800800c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	32ae      	adds	r2, #174	; 0xae
 8007ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	f107 020e 	add.w	r2, r7, #14
 8008000:	4610      	mov	r0, r2
 8008002:	4798      	blx	r3
 8008004:	4602      	mov	r2, r0
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008012:	1c5a      	adds	r2, r3, #1
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 fded 	bl	8009c0c <USBD_LL_Start>
 8008032:	4603      	mov	r3, r0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008044:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008046:	4618      	mov	r0, r3
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	460b      	mov	r3, r1
 800805c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008068:	2b00      	cmp	r3, #0
 800806a:	d009      	beq.n	8008080 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	78fa      	ldrb	r2, [r7, #3]
 8008076:	4611      	mov	r1, r2
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	4798      	blx	r3
 800807c:	4603      	mov	r3, r0
 800807e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008080:	7bfb      	ldrb	r3, [r7, #15]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b084      	sub	sp, #16
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	460b      	mov	r3, r1
 8008094:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	78fa      	ldrb	r2, [r7, #3]
 80080a4:	4611      	mov	r1, r2
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	4798      	blx	r3
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80080b0:	2303      	movs	r3, #3
 80080b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f001 f908 	bl	80092e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80080e4:	461a      	mov	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080f2:	f003 031f 	and.w	r3, r3, #31
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d01a      	beq.n	8008130 <USBD_LL_SetupStage+0x72>
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d822      	bhi.n	8008144 <USBD_LL_SetupStage+0x86>
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <USBD_LL_SetupStage+0x4a>
 8008102:	2b01      	cmp	r3, #1
 8008104:	d00a      	beq.n	800811c <USBD_LL_SetupStage+0x5e>
 8008106:	e01d      	b.n	8008144 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fb5f 	bl	80087d4 <USBD_StdDevReq>
 8008116:	4603      	mov	r3, r0
 8008118:	73fb      	strb	r3, [r7, #15]
      break;
 800811a:	e020      	b.n	800815e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fbc7 	bl	80088b8 <USBD_StdItfReq>
 800812a:	4603      	mov	r3, r0
 800812c:	73fb      	strb	r3, [r7, #15]
      break;
 800812e:	e016      	b.n	800815e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fc29 	bl	8008990 <USBD_StdEPReq>
 800813e:	4603      	mov	r3, r0
 8008140:	73fb      	strb	r3, [r7, #15]
      break;
 8008142:	e00c      	b.n	800815e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800814a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800814e:	b2db      	uxtb	r3, r3
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f001 fdba 	bl	8009ccc <USBD_LL_StallEP>
 8008158:	4603      	mov	r3, r0
 800815a:	73fb      	strb	r3, [r7, #15]
      break;
 800815c:	bf00      	nop
  }

  return ret;
 800815e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	460b      	mov	r3, r1
 8008172:	607a      	str	r2, [r7, #4]
 8008174:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800817a:	7afb      	ldrb	r3, [r7, #11]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d16e      	bne.n	800825e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008186:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800818e:	2b03      	cmp	r3, #3
 8008190:	f040 8098 	bne.w	80082c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	429a      	cmp	r2, r3
 800819e:	d913      	bls.n	80081c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	1ad2      	subs	r2, r2, r3
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	4293      	cmp	r3, r2
 80081b8:	bf28      	it	cs
 80081ba:	4613      	movcs	r3, r2
 80081bc:	461a      	mov	r2, r3
 80081be:	6879      	ldr	r1, [r7, #4]
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f001 f984 	bl	80094ce <USBD_CtlContinueRx>
 80081c6:	e07d      	b.n	80082c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80081ce:	f003 031f 	and.w	r3, r3, #31
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d014      	beq.n	8008200 <USBD_LL_DataOutStage+0x98>
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d81d      	bhi.n	8008216 <USBD_LL_DataOutStage+0xae>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d002      	beq.n	80081e4 <USBD_LL_DataOutStage+0x7c>
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d003      	beq.n	80081ea <USBD_LL_DataOutStage+0x82>
 80081e2:	e018      	b.n	8008216 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80081e4:	2300      	movs	r3, #0
 80081e6:	75bb      	strb	r3, [r7, #22]
            break;
 80081e8:	e018      	b.n	800821c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	4619      	mov	r1, r3
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 fa5e 	bl	80086b6 <USBD_CoreFindIF>
 80081fa:	4603      	mov	r3, r0
 80081fc:	75bb      	strb	r3, [r7, #22]
            break;
 80081fe:	e00d      	b.n	800821c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008206:	b2db      	uxtb	r3, r3
 8008208:	4619      	mov	r1, r3
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 fa60 	bl	80086d0 <USBD_CoreFindEP>
 8008210:	4603      	mov	r3, r0
 8008212:	75bb      	strb	r3, [r7, #22]
            break;
 8008214:	e002      	b.n	800821c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008216:	2300      	movs	r3, #0
 8008218:	75bb      	strb	r3, [r7, #22]
            break;
 800821a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800821c:	7dbb      	ldrb	r3, [r7, #22]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d119      	bne.n	8008256 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b03      	cmp	r3, #3
 800822c:	d113      	bne.n	8008256 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800822e:	7dba      	ldrb	r2, [r7, #22]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	32ae      	adds	r2, #174	; 0xae
 8008234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00b      	beq.n	8008256 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800823e:	7dba      	ldrb	r2, [r7, #22]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008246:	7dba      	ldrb	r2, [r7, #22]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	32ae      	adds	r2, #174	; 0xae
 800824c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f001 f94a 	bl	80094f0 <USBD_CtlSendStatus>
 800825c:	e032      	b.n	80082c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800825e:	7afb      	ldrb	r3, [r7, #11]
 8008260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008264:	b2db      	uxtb	r3, r3
 8008266:	4619      	mov	r1, r3
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 fa31 	bl	80086d0 <USBD_CoreFindEP>
 800826e:	4603      	mov	r3, r0
 8008270:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008272:	7dbb      	ldrb	r3, [r7, #22]
 8008274:	2bff      	cmp	r3, #255	; 0xff
 8008276:	d025      	beq.n	80082c4 <USBD_LL_DataOutStage+0x15c>
 8008278:	7dbb      	ldrb	r3, [r7, #22]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d122      	bne.n	80082c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b03      	cmp	r3, #3
 8008288:	d117      	bne.n	80082ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800828a:	7dba      	ldrb	r2, [r7, #22]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	32ae      	adds	r2, #174	; 0xae
 8008290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00f      	beq.n	80082ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800829a:	7dba      	ldrb	r2, [r7, #22]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80082a2:	7dba      	ldrb	r2, [r7, #22]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	32ae      	adds	r2, #174	; 0xae
 80082a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	7afa      	ldrb	r2, [r7, #11]
 80082b0:	4611      	mov	r1, r2
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	4798      	blx	r3
 80082b6:	4603      	mov	r3, r0
 80082b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
 80082c2:	e000      	b.n	80082c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3718      	adds	r7, #24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b086      	sub	sp, #24
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	460b      	mov	r3, r1
 80082d8:	607a      	str	r2, [r7, #4]
 80082da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80082dc:	7afb      	ldrb	r3, [r7, #11]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d16f      	bne.n	80083c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	3314      	adds	r3, #20
 80082e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d15a      	bne.n	80083a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	689a      	ldr	r2, [r3, #8]
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d914      	bls.n	8008328 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	689a      	ldr	r2, [r3, #8]
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	1ad2      	subs	r2, r2, r3
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	461a      	mov	r2, r3
 8008312:	6879      	ldr	r1, [r7, #4]
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f001 f8ac 	bl	8009472 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800831a:	2300      	movs	r3, #0
 800831c:	2200      	movs	r2, #0
 800831e:	2100      	movs	r1, #0
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f001 fd7d 	bl	8009e20 <USBD_LL_PrepareReceive>
 8008326:	e03f      	b.n	80083a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	429a      	cmp	r2, r3
 8008332:	d11c      	bne.n	800836e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800833c:	429a      	cmp	r2, r3
 800833e:	d316      	bcc.n	800836e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800834a:	429a      	cmp	r2, r3
 800834c:	d20f      	bcs.n	800836e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800834e:	2200      	movs	r2, #0
 8008350:	2100      	movs	r1, #0
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f001 f88d 	bl	8009472 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008360:	2300      	movs	r3, #0
 8008362:	2200      	movs	r2, #0
 8008364:	2100      	movs	r1, #0
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f001 fd5a 	bl	8009e20 <USBD_LL_PrepareReceive>
 800836c:	e01c      	b.n	80083a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b03      	cmp	r3, #3
 8008378:	d10f      	bne.n	800839a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d009      	beq.n	800839a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800839a:	2180      	movs	r1, #128	; 0x80
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f001 fc95 	bl	8009ccc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f001 f8b7 	bl	8009516 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d03a      	beq.n	8008428 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f7ff fe42 	bl	800803c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80083c0:	e032      	b.n	8008428 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80083c2:	7afb      	ldrb	r3, [r7, #11]
 80083c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	4619      	mov	r1, r3
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 f97f 	bl	80086d0 <USBD_CoreFindEP>
 80083d2:	4603      	mov	r3, r0
 80083d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
 80083d8:	2bff      	cmp	r3, #255	; 0xff
 80083da:	d025      	beq.n	8008428 <USBD_LL_DataInStage+0x15a>
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d122      	bne.n	8008428 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b03      	cmp	r3, #3
 80083ec:	d11c      	bne.n	8008428 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80083ee:	7dfa      	ldrb	r2, [r7, #23]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	32ae      	adds	r2, #174	; 0xae
 80083f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d014      	beq.n	8008428 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80083fe:	7dfa      	ldrb	r2, [r7, #23]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008406:	7dfa      	ldrb	r2, [r7, #23]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	32ae      	adds	r2, #174	; 0xae
 800840c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	7afa      	ldrb	r2, [r7, #11]
 8008414:	4611      	mov	r1, r2
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	4798      	blx	r3
 800841a:	4603      	mov	r3, r0
 800841c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800841e:	7dbb      	ldrb	r3, [r7, #22]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008424:	7dbb      	ldrb	r3, [r7, #22]
 8008426:	e000      	b.n	800842a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800846a:	2b00      	cmp	r3, #0
 800846c:	d014      	beq.n	8008498 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00e      	beq.n	8008498 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	6852      	ldr	r2, [r2, #4]
 8008486:	b2d2      	uxtb	r2, r2
 8008488:	4611      	mov	r1, r2
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	4798      	blx	r3
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008494:	2303      	movs	r3, #3
 8008496:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008498:	2340      	movs	r3, #64	; 0x40
 800849a:	2200      	movs	r2, #0
 800849c:	2100      	movs	r1, #0
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f001 fbcf 	bl	8009c42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2240      	movs	r2, #64	; 0x40
 80084b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084b4:	2340      	movs	r3, #64	; 0x40
 80084b6:	2200      	movs	r2, #0
 80084b8:	2180      	movs	r1, #128	; 0x80
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f001 fbc1 	bl	8009c42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2240      	movs	r2, #64	; 0x40
 80084ca:	621a      	str	r2, [r3, #32]

  return ret;
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b083      	sub	sp, #12
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	78fa      	ldrb	r2, [r7, #3]
 80084e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b083      	sub	sp, #12
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008504:	b2da      	uxtb	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2204      	movs	r2, #4
 8008510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008522:	b480      	push	{r7}
 8008524:	b083      	sub	sp, #12
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b04      	cmp	r3, #4
 8008534:	d106      	bne.n	8008544 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800853c:	b2da      	uxtb	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b082      	sub	sp, #8
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b03      	cmp	r3, #3
 8008564:	d110      	bne.n	8008588 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00b      	beq.n	8008588 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008576:	69db      	ldr	r3, [r3, #28]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d005      	beq.n	8008588 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008582:	69db      	ldr	r3, [r3, #28]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b082      	sub	sp, #8
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	460b      	mov	r3, r1
 800859c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	32ae      	adds	r2, #174	; 0xae
 80085a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e01c      	b.n	80085ee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d115      	bne.n	80085ec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	32ae      	adds	r2, #174	; 0xae
 80085ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ce:	6a1b      	ldr	r3, [r3, #32]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00b      	beq.n	80085ec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	32ae      	adds	r2, #174	; 0xae
 80085de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e2:	6a1b      	ldr	r3, [r3, #32]
 80085e4:	78fa      	ldrb	r2, [r7, #3]
 80085e6:	4611      	mov	r1, r2
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b082      	sub	sp, #8
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	460b      	mov	r3, r1
 8008600:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	32ae      	adds	r2, #174	; 0xae
 800860c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008614:	2303      	movs	r3, #3
 8008616:	e01c      	b.n	8008652 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b03      	cmp	r3, #3
 8008622:	d115      	bne.n	8008650 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	32ae      	adds	r2, #174	; 0xae
 800862e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00b      	beq.n	8008650 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	32ae      	adds	r2, #174	; 0xae
 8008642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	78fa      	ldrb	r2, [r7, #3]
 800864a:	4611      	mov	r1, r2
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00e      	beq.n	80086ac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	6852      	ldr	r2, [r2, #4]
 800869a:	b2d2      	uxtb	r2, r2
 800869c:	4611      	mov	r1, r2
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	4798      	blx	r3
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80086a8:	2303      	movs	r3, #3
 80086aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b083      	sub	sp, #12
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	460b      	mov	r3, r1
 80086c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80086c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80086dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80086de:	4618      	mov	r0, r3
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b086      	sub	sp, #24
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80086fe:	2300      	movs	r3, #0
 8008700:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	885b      	ldrh	r3, [r3, #2]
 8008706:	b29a      	uxth	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	b29b      	uxth	r3, r3
 800870e:	429a      	cmp	r2, r3
 8008710:	d920      	bls.n	8008754 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	b29b      	uxth	r3, r3
 8008718:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800871a:	e013      	b.n	8008744 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800871c:	f107 030a 	add.w	r3, r7, #10
 8008720:	4619      	mov	r1, r3
 8008722:	6978      	ldr	r0, [r7, #20]
 8008724:	f000 f81b 	bl	800875e <USBD_GetNextDesc>
 8008728:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	785b      	ldrb	r3, [r3, #1]
 800872e:	2b05      	cmp	r3, #5
 8008730:	d108      	bne.n	8008744 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	789b      	ldrb	r3, [r3, #2]
 800873a:	78fa      	ldrb	r2, [r7, #3]
 800873c:	429a      	cmp	r2, r3
 800873e:	d008      	beq.n	8008752 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008740:	2300      	movs	r3, #0
 8008742:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	885b      	ldrh	r3, [r3, #2]
 8008748:	b29a      	uxth	r2, r3
 800874a:	897b      	ldrh	r3, [r7, #10]
 800874c:	429a      	cmp	r2, r3
 800874e:	d8e5      	bhi.n	800871c <USBD_GetEpDesc+0x32>
 8008750:	e000      	b.n	8008754 <USBD_GetEpDesc+0x6a>
          break;
 8008752:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008754:	693b      	ldr	r3, [r7, #16]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3718      	adds	r7, #24
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800875e:	b480      	push	{r7}
 8008760:	b085      	sub	sp, #20
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	881a      	ldrh	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	b29b      	uxth	r3, r3
 8008776:	4413      	add	r3, r2
 8008778:	b29a      	uxth	r2, r3
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4413      	add	r3, r2
 8008788:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800878a:	68fb      	ldr	r3, [r7, #12]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	3301      	adds	r3, #1
 80087ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80087b6:	8a3b      	ldrh	r3, [r7, #16]
 80087b8:	021b      	lsls	r3, r3, #8
 80087ba:	b21a      	sxth	r2, r3
 80087bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	b21b      	sxth	r3, r3
 80087c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80087c6:	89fb      	ldrh	r3, [r7, #14]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	371c      	adds	r7, #28
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087ea:	2b40      	cmp	r3, #64	; 0x40
 80087ec:	d005      	beq.n	80087fa <USBD_StdDevReq+0x26>
 80087ee:	2b40      	cmp	r3, #64	; 0x40
 80087f0:	d857      	bhi.n	80088a2 <USBD_StdDevReq+0xce>
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00f      	beq.n	8008816 <USBD_StdDevReq+0x42>
 80087f6:	2b20      	cmp	r3, #32
 80087f8:	d153      	bne.n	80088a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	32ae      	adds	r2, #174	; 0xae
 8008804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	4798      	blx	r3
 8008810:	4603      	mov	r3, r0
 8008812:	73fb      	strb	r3, [r7, #15]
      break;
 8008814:	e04a      	b.n	80088ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	2b09      	cmp	r3, #9
 800881c:	d83b      	bhi.n	8008896 <USBD_StdDevReq+0xc2>
 800881e:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <USBD_StdDevReq+0x50>)
 8008820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008824:	08008879 	.word	0x08008879
 8008828:	0800888d 	.word	0x0800888d
 800882c:	08008897 	.word	0x08008897
 8008830:	08008883 	.word	0x08008883
 8008834:	08008897 	.word	0x08008897
 8008838:	08008857 	.word	0x08008857
 800883c:	0800884d 	.word	0x0800884d
 8008840:	08008897 	.word	0x08008897
 8008844:	0800886f 	.word	0x0800886f
 8008848:	08008861 	.word	0x08008861
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fa3c 	bl	8008ccc <USBD_GetDescriptor>
          break;
 8008854:	e024      	b.n	80088a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fba1 	bl	8008fa0 <USBD_SetAddress>
          break;
 800885e:	e01f      	b.n	80088a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fbe0 	bl	8009028 <USBD_SetConfig>
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]
          break;
 800886c:	e018      	b.n	80088a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fc83 	bl	800917c <USBD_GetConfig>
          break;
 8008876:	e013      	b.n	80088a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fcb4 	bl	80091e8 <USBD_GetStatus>
          break;
 8008880:	e00e      	b.n	80088a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fce3 	bl	8009250 <USBD_SetFeature>
          break;
 800888a:	e009      	b.n	80088a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fd07 	bl	80092a2 <USBD_ClrFeature>
          break;
 8008894:	e004      	b.n	80088a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fd5e 	bl	800935a <USBD_CtlError>
          break;
 800889e:	bf00      	nop
      }
      break;
 80088a0:	e004      	b.n	80088ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fd58 	bl	800935a <USBD_CtlError>
      break;
 80088aa:	bf00      	nop
  }

  return ret;
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop

080088b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088ce:	2b40      	cmp	r3, #64	; 0x40
 80088d0:	d005      	beq.n	80088de <USBD_StdItfReq+0x26>
 80088d2:	2b40      	cmp	r3, #64	; 0x40
 80088d4:	d852      	bhi.n	800897c <USBD_StdItfReq+0xc4>
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <USBD_StdItfReq+0x26>
 80088da:	2b20      	cmp	r3, #32
 80088dc:	d14e      	bne.n	800897c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	3b01      	subs	r3, #1
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d840      	bhi.n	800896e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	889b      	ldrh	r3, [r3, #4]
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d836      	bhi.n	8008964 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	889b      	ldrh	r3, [r3, #4]
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	4619      	mov	r1, r3
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7ff fed9 	bl	80086b6 <USBD_CoreFindIF>
 8008904:	4603      	mov	r3, r0
 8008906:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008908:	7bbb      	ldrb	r3, [r7, #14]
 800890a:	2bff      	cmp	r3, #255	; 0xff
 800890c:	d01d      	beq.n	800894a <USBD_StdItfReq+0x92>
 800890e:	7bbb      	ldrb	r3, [r7, #14]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d11a      	bne.n	800894a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008914:	7bba      	ldrb	r2, [r7, #14]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	32ae      	adds	r2, #174	; 0xae
 800891a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00f      	beq.n	8008944 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008924:	7bba      	ldrb	r2, [r7, #14]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800892c:	7bba      	ldrb	r2, [r7, #14]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	32ae      	adds	r2, #174	; 0xae
 8008932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	4798      	blx	r3
 800893e:	4603      	mov	r3, r0
 8008940:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008942:	e004      	b.n	800894e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008944:	2303      	movs	r3, #3
 8008946:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008948:	e001      	b.n	800894e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800894a:	2303      	movs	r3, #3
 800894c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	88db      	ldrh	r3, [r3, #6]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d110      	bne.n	8008978 <USBD_StdItfReq+0xc0>
 8008956:	7bfb      	ldrb	r3, [r7, #15]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10d      	bne.n	8008978 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fdc7 	bl	80094f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008962:	e009      	b.n	8008978 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fcf7 	bl	800935a <USBD_CtlError>
          break;
 800896c:	e004      	b.n	8008978 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fcf2 	bl	800935a <USBD_CtlError>
          break;
 8008976:	e000      	b.n	800897a <USBD_StdItfReq+0xc2>
          break;
 8008978:	bf00      	nop
      }
      break;
 800897a:	e004      	b.n	8008986 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fceb 	bl	800935a <USBD_CtlError>
      break;
 8008984:	bf00      	nop
  }

  return ret;
 8008986:	7bfb      	ldrb	r3, [r7, #15]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	889b      	ldrh	r3, [r3, #4]
 80089a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089ac:	2b40      	cmp	r3, #64	; 0x40
 80089ae:	d007      	beq.n	80089c0 <USBD_StdEPReq+0x30>
 80089b0:	2b40      	cmp	r3, #64	; 0x40
 80089b2:	f200 817f 	bhi.w	8008cb4 <USBD_StdEPReq+0x324>
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d02a      	beq.n	8008a10 <USBD_StdEPReq+0x80>
 80089ba:	2b20      	cmp	r3, #32
 80089bc:	f040 817a 	bne.w	8008cb4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7ff fe83 	bl	80086d0 <USBD_CoreFindEP>
 80089ca:	4603      	mov	r3, r0
 80089cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089ce:	7b7b      	ldrb	r3, [r7, #13]
 80089d0:	2bff      	cmp	r3, #255	; 0xff
 80089d2:	f000 8174 	beq.w	8008cbe <USBD_StdEPReq+0x32e>
 80089d6:	7b7b      	ldrb	r3, [r7, #13]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f040 8170 	bne.w	8008cbe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80089de:	7b7a      	ldrb	r2, [r7, #13]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80089e6:	7b7a      	ldrb	r2, [r7, #13]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	32ae      	adds	r2, #174	; 0xae
 80089ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f000 8163 	beq.w	8008cbe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80089f8:	7b7a      	ldrb	r2, [r7, #13]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	32ae      	adds	r2, #174	; 0xae
 80089fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	4798      	blx	r3
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008a0e:	e156      	b.n	8008cbe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	785b      	ldrb	r3, [r3, #1]
 8008a14:	2b03      	cmp	r3, #3
 8008a16:	d008      	beq.n	8008a2a <USBD_StdEPReq+0x9a>
 8008a18:	2b03      	cmp	r3, #3
 8008a1a:	f300 8145 	bgt.w	8008ca8 <USBD_StdEPReq+0x318>
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f000 809b 	beq.w	8008b5a <USBD_StdEPReq+0x1ca>
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d03c      	beq.n	8008aa2 <USBD_StdEPReq+0x112>
 8008a28:	e13e      	b.n	8008ca8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d002      	beq.n	8008a3c <USBD_StdEPReq+0xac>
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d016      	beq.n	8008a68 <USBD_StdEPReq+0xd8>
 8008a3a:	e02c      	b.n	8008a96 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00d      	beq.n	8008a5e <USBD_StdEPReq+0xce>
 8008a42:	7bbb      	ldrb	r3, [r7, #14]
 8008a44:	2b80      	cmp	r3, #128	; 0x80
 8008a46:	d00a      	beq.n	8008a5e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a48:	7bbb      	ldrb	r3, [r7, #14]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f001 f93d 	bl	8009ccc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a52:	2180      	movs	r1, #128	; 0x80
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f001 f939 	bl	8009ccc <USBD_LL_StallEP>
 8008a5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a5c:	e020      	b.n	8008aa0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fc7a 	bl	800935a <USBD_CtlError>
              break;
 8008a66:	e01b      	b.n	8008aa0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	885b      	ldrh	r3, [r3, #2]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10e      	bne.n	8008a8e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a70:	7bbb      	ldrb	r3, [r7, #14]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00b      	beq.n	8008a8e <USBD_StdEPReq+0xfe>
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	2b80      	cmp	r3, #128	; 0x80
 8008a7a:	d008      	beq.n	8008a8e <USBD_StdEPReq+0xfe>
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	88db      	ldrh	r3, [r3, #6]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d104      	bne.n	8008a8e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a84:	7bbb      	ldrb	r3, [r7, #14]
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f001 f91f 	bl	8009ccc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fd2e 	bl	80094f0 <USBD_CtlSendStatus>

              break;
 8008a94:	e004      	b.n	8008aa0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fc5e 	bl	800935a <USBD_CtlError>
              break;
 8008a9e:	bf00      	nop
          }
          break;
 8008aa0:	e107      	b.n	8008cb2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d002      	beq.n	8008ab4 <USBD_StdEPReq+0x124>
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	d016      	beq.n	8008ae0 <USBD_StdEPReq+0x150>
 8008ab2:	e04b      	b.n	8008b4c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ab4:	7bbb      	ldrb	r3, [r7, #14]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00d      	beq.n	8008ad6 <USBD_StdEPReq+0x146>
 8008aba:	7bbb      	ldrb	r3, [r7, #14]
 8008abc:	2b80      	cmp	r3, #128	; 0x80
 8008abe:	d00a      	beq.n	8008ad6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ac0:	7bbb      	ldrb	r3, [r7, #14]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f001 f901 	bl	8009ccc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008aca:	2180      	movs	r1, #128	; 0x80
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 f8fd 	bl	8009ccc <USBD_LL_StallEP>
 8008ad2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ad4:	e040      	b.n	8008b58 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fc3e 	bl	800935a <USBD_CtlError>
              break;
 8008ade:	e03b      	b.n	8008b58 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	885b      	ldrh	r3, [r3, #2]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d136      	bne.n	8008b56 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d004      	beq.n	8008afc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f001 f907 	bl	8009d0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fcf7 	bl	80094f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7ff fde2 	bl	80086d0 <USBD_CoreFindEP>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b10:	7b7b      	ldrb	r3, [r7, #13]
 8008b12:	2bff      	cmp	r3, #255	; 0xff
 8008b14:	d01f      	beq.n	8008b56 <USBD_StdEPReq+0x1c6>
 8008b16:	7b7b      	ldrb	r3, [r7, #13]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d11c      	bne.n	8008b56 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008b1c:	7b7a      	ldrb	r2, [r7, #13]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008b24:	7b7a      	ldrb	r2, [r7, #13]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	32ae      	adds	r2, #174	; 0xae
 8008b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d010      	beq.n	8008b56 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b34:	7b7a      	ldrb	r2, [r7, #13]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	32ae      	adds	r2, #174	; 0xae
 8008b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	4798      	blx	r3
 8008b46:	4603      	mov	r3, r0
 8008b48:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008b4a:	e004      	b.n	8008b56 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fc03 	bl	800935a <USBD_CtlError>
              break;
 8008b54:	e000      	b.n	8008b58 <USBD_StdEPReq+0x1c8>
              break;
 8008b56:	bf00      	nop
          }
          break;
 8008b58:	e0ab      	b.n	8008cb2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d002      	beq.n	8008b6c <USBD_StdEPReq+0x1dc>
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d032      	beq.n	8008bd0 <USBD_StdEPReq+0x240>
 8008b6a:	e097      	b.n	8008c9c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d007      	beq.n	8008b82 <USBD_StdEPReq+0x1f2>
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
 8008b74:	2b80      	cmp	r3, #128	; 0x80
 8008b76:	d004      	beq.n	8008b82 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fbed 	bl	800935a <USBD_CtlError>
                break;
 8008b80:	e091      	b.n	8008ca6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	da0b      	bge.n	8008ba2 <USBD_StdEPReq+0x212>
 8008b8a:	7bbb      	ldrb	r3, [r7, #14]
 8008b8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b90:	4613      	mov	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	3310      	adds	r3, #16
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	e00b      	b.n	8008bba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
 8008ba4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ba8:	4613      	mov	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	3304      	adds	r3, #4
 8008bba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fc37 	bl	800943c <USBD_CtlSendData>
              break;
 8008bce:	e06a      	b.n	8008ca6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008bd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	da11      	bge.n	8008bfc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
 8008bda:	f003 020f 	and.w	r2, r3, #15
 8008bde:	6879      	ldr	r1, [r7, #4]
 8008be0:	4613      	mov	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	440b      	add	r3, r1
 8008bea:	3324      	adds	r3, #36	; 0x24
 8008bec:	881b      	ldrh	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d117      	bne.n	8008c22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008bf2:	6839      	ldr	r1, [r7, #0]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fbb0 	bl	800935a <USBD_CtlError>
                  break;
 8008bfa:	e054      	b.n	8008ca6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	f003 020f 	and.w	r2, r3, #15
 8008c02:	6879      	ldr	r1, [r7, #4]
 8008c04:	4613      	mov	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	440b      	add	r3, r1
 8008c0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d104      	bne.n	8008c22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fb9d 	bl	800935a <USBD_CtlError>
                  break;
 8008c20:	e041      	b.n	8008ca6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	da0b      	bge.n	8008c42 <USBD_StdEPReq+0x2b2>
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
 8008c2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c30:	4613      	mov	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	3310      	adds	r3, #16
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	3304      	adds	r3, #4
 8008c40:	e00b      	b.n	8008c5a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
 8008c44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c48:	4613      	mov	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	4413      	add	r3, r2
 8008c58:	3304      	adds	r3, #4
 8008c5a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d002      	beq.n	8008c68 <USBD_StdEPReq+0x2d8>
 8008c62:	7bbb      	ldrb	r3, [r7, #14]
 8008c64:	2b80      	cmp	r3, #128	; 0x80
 8008c66:	d103      	bne.n	8008c70 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	e00e      	b.n	8008c8e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008c70:	7bbb      	ldrb	r3, [r7, #14]
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f001 f867 	bl	8009d48 <USBD_LL_IsStallEP>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d003      	beq.n	8008c88 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2201      	movs	r2, #1
 8008c84:	601a      	str	r2, [r3, #0]
 8008c86:	e002      	b.n	8008c8e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2202      	movs	r2, #2
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fbd1 	bl	800943c <USBD_CtlSendData>
              break;
 8008c9a:	e004      	b.n	8008ca6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fb5b 	bl	800935a <USBD_CtlError>
              break;
 8008ca4:	bf00      	nop
          }
          break;
 8008ca6:	e004      	b.n	8008cb2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fb55 	bl	800935a <USBD_CtlError>
          break;
 8008cb0:	bf00      	nop
      }
      break;
 8008cb2:	e005      	b.n	8008cc0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fb4f 	bl	800935a <USBD_CtlError>
      break;
 8008cbc:	e000      	b.n	8008cc0 <USBD_StdEPReq+0x330>
      break;
 8008cbe:	bf00      	nop
  }

  return ret;
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	885b      	ldrh	r3, [r3, #2]
 8008ce6:	0a1b      	lsrs	r3, r3, #8
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	3b01      	subs	r3, #1
 8008cec:	2b06      	cmp	r3, #6
 8008cee:	f200 8128 	bhi.w	8008f42 <USBD_GetDescriptor+0x276>
 8008cf2:	a201      	add	r2, pc, #4	; (adr r2, 8008cf8 <USBD_GetDescriptor+0x2c>)
 8008cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf8:	08008d15 	.word	0x08008d15
 8008cfc:	08008d2d 	.word	0x08008d2d
 8008d00:	08008d6d 	.word	0x08008d6d
 8008d04:	08008f43 	.word	0x08008f43
 8008d08:	08008f43 	.word	0x08008f43
 8008d0c:	08008ee3 	.word	0x08008ee3
 8008d10:	08008f0f 	.word	0x08008f0f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	7c12      	ldrb	r2, [r2, #16]
 8008d20:	f107 0108 	add.w	r1, r7, #8
 8008d24:	4610      	mov	r0, r2
 8008d26:	4798      	blx	r3
 8008d28:	60f8      	str	r0, [r7, #12]
      break;
 8008d2a:	e112      	b.n	8008f52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	7c1b      	ldrb	r3, [r3, #16]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10d      	bne.n	8008d50 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3c:	f107 0208 	add.w	r2, r7, #8
 8008d40:	4610      	mov	r0, r2
 8008d42:	4798      	blx	r3
 8008d44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d4e:	e100      	b.n	8008f52 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d58:	f107 0208 	add.w	r2, r7, #8
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	4798      	blx	r3
 8008d60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3301      	adds	r3, #1
 8008d66:	2202      	movs	r2, #2
 8008d68:	701a      	strb	r2, [r3, #0]
      break;
 8008d6a:	e0f2      	b.n	8008f52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	885b      	ldrh	r3, [r3, #2]
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b05      	cmp	r3, #5
 8008d74:	f200 80ac 	bhi.w	8008ed0 <USBD_GetDescriptor+0x204>
 8008d78:	a201      	add	r2, pc, #4	; (adr r2, 8008d80 <USBD_GetDescriptor+0xb4>)
 8008d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7e:	bf00      	nop
 8008d80:	08008d99 	.word	0x08008d99
 8008d84:	08008dcd 	.word	0x08008dcd
 8008d88:	08008e01 	.word	0x08008e01
 8008d8c:	08008e35 	.word	0x08008e35
 8008d90:	08008e69 	.word	0x08008e69
 8008d94:	08008e9d 	.word	0x08008e9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00b      	beq.n	8008dbc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	7c12      	ldrb	r2, [r2, #16]
 8008db0:	f107 0108 	add.w	r1, r7, #8
 8008db4:	4610      	mov	r0, r2
 8008db6:	4798      	blx	r3
 8008db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dba:	e091      	b.n	8008ee0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 facb 	bl	800935a <USBD_CtlError>
            err++;
 8008dc4:	7afb      	ldrb	r3, [r7, #11]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8008dca:	e089      	b.n	8008ee0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00b      	beq.n	8008df0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	7c12      	ldrb	r2, [r2, #16]
 8008de4:	f107 0108 	add.w	r1, r7, #8
 8008de8:	4610      	mov	r0, r2
 8008dea:	4798      	blx	r3
 8008dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dee:	e077      	b.n	8008ee0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fab1 	bl	800935a <USBD_CtlError>
            err++;
 8008df8:	7afb      	ldrb	r3, [r7, #11]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8008dfe:	e06f      	b.n	8008ee0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00b      	beq.n	8008e24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	7c12      	ldrb	r2, [r2, #16]
 8008e18:	f107 0108 	add.w	r1, r7, #8
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	4798      	blx	r3
 8008e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e22:	e05d      	b.n	8008ee0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fa97 	bl	800935a <USBD_CtlError>
            err++;
 8008e2c:	7afb      	ldrb	r3, [r7, #11]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	72fb      	strb	r3, [r7, #11]
          break;
 8008e32:	e055      	b.n	8008ee0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00b      	beq.n	8008e58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	7c12      	ldrb	r2, [r2, #16]
 8008e4c:	f107 0108 	add.w	r1, r7, #8
 8008e50:	4610      	mov	r0, r2
 8008e52:	4798      	blx	r3
 8008e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e56:	e043      	b.n	8008ee0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fa7d 	bl	800935a <USBD_CtlError>
            err++;
 8008e60:	7afb      	ldrb	r3, [r7, #11]
 8008e62:	3301      	adds	r3, #1
 8008e64:	72fb      	strb	r3, [r7, #11]
          break;
 8008e66:	e03b      	b.n	8008ee0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e6e:	695b      	ldr	r3, [r3, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00b      	beq.n	8008e8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	7c12      	ldrb	r2, [r2, #16]
 8008e80:	f107 0108 	add.w	r1, r7, #8
 8008e84:	4610      	mov	r0, r2
 8008e86:	4798      	blx	r3
 8008e88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e8a:	e029      	b.n	8008ee0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fa63 	bl	800935a <USBD_CtlError>
            err++;
 8008e94:	7afb      	ldrb	r3, [r7, #11]
 8008e96:	3301      	adds	r3, #1
 8008e98:	72fb      	strb	r3, [r7, #11]
          break;
 8008e9a:	e021      	b.n	8008ee0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00b      	beq.n	8008ec0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	7c12      	ldrb	r2, [r2, #16]
 8008eb4:	f107 0108 	add.w	r1, r7, #8
 8008eb8:	4610      	mov	r0, r2
 8008eba:	4798      	blx	r3
 8008ebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ebe:	e00f      	b.n	8008ee0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fa49 	bl	800935a <USBD_CtlError>
            err++;
 8008ec8:	7afb      	ldrb	r3, [r7, #11]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	72fb      	strb	r3, [r7, #11]
          break;
 8008ece:	e007      	b.n	8008ee0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa41 	bl	800935a <USBD_CtlError>
          err++;
 8008ed8:	7afb      	ldrb	r3, [r7, #11]
 8008eda:	3301      	adds	r3, #1
 8008edc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008ede:	bf00      	nop
      }
      break;
 8008ee0:	e037      	b.n	8008f52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	7c1b      	ldrb	r3, [r3, #16]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d109      	bne.n	8008efe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef2:	f107 0208 	add.w	r2, r7, #8
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	4798      	blx	r3
 8008efa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008efc:	e029      	b.n	8008f52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fa2a 	bl	800935a <USBD_CtlError>
        err++;
 8008f06:	7afb      	ldrb	r3, [r7, #11]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	72fb      	strb	r3, [r7, #11]
      break;
 8008f0c:	e021      	b.n	8008f52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	7c1b      	ldrb	r3, [r3, #16]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10d      	bne.n	8008f32 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1e:	f107 0208 	add.w	r2, r7, #8
 8008f22:	4610      	mov	r0, r2
 8008f24:	4798      	blx	r3
 8008f26:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	2207      	movs	r2, #7
 8008f2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f30:	e00f      	b.n	8008f52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fa10 	bl	800935a <USBD_CtlError>
        err++;
 8008f3a:	7afb      	ldrb	r3, [r7, #11]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	72fb      	strb	r3, [r7, #11]
      break;
 8008f40:	e007      	b.n	8008f52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fa08 	bl	800935a <USBD_CtlError>
      err++;
 8008f4a:	7afb      	ldrb	r3, [r7, #11]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	72fb      	strb	r3, [r7, #11]
      break;
 8008f50:	bf00      	nop
  }

  if (err != 0U)
 8008f52:	7afb      	ldrb	r3, [r7, #11]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d11e      	bne.n	8008f96 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	88db      	ldrh	r3, [r3, #6]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d016      	beq.n	8008f8e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008f60:	893b      	ldrh	r3, [r7, #8]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00e      	beq.n	8008f84 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	88da      	ldrh	r2, [r3, #6]
 8008f6a:	893b      	ldrh	r3, [r7, #8]
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	bf28      	it	cs
 8008f70:	4613      	movcs	r3, r2
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f76:	893b      	ldrh	r3, [r7, #8]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	68f9      	ldr	r1, [r7, #12]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fa5d 	bl	800943c <USBD_CtlSendData>
 8008f82:	e009      	b.n	8008f98 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f9e7 	bl	800935a <USBD_CtlError>
 8008f8c:	e004      	b.n	8008f98 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 faae 	bl	80094f0 <USBD_CtlSendStatus>
 8008f94:	e000      	b.n	8008f98 <USBD_GetDescriptor+0x2cc>
    return;
 8008f96:	bf00      	nop
  }
}
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop

08008fa0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	889b      	ldrh	r3, [r3, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d131      	bne.n	8009016 <USBD_SetAddress+0x76>
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	88db      	ldrh	r3, [r3, #6]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d12d      	bne.n	8009016 <USBD_SetAddress+0x76>
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	885b      	ldrh	r3, [r3, #2]
 8008fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8008fc0:	d829      	bhi.n	8009016 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	885b      	ldrh	r3, [r3, #2]
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b03      	cmp	r3, #3
 8008fd8:	d104      	bne.n	8008fe4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008fda:	6839      	ldr	r1, [r7, #0]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f9bc 	bl	800935a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fe2:	e01d      	b.n	8009020 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	7bfa      	ldrb	r2, [r7, #15]
 8008fe8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fed5 	bl	8009da0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fa7a 	bl	80094f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d004      	beq.n	800900c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2202      	movs	r2, #2
 8009006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800900a:	e009      	b.n	8009020 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009014:	e004      	b.n	8009020 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009016:	6839      	ldr	r1, [r7, #0]
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f99e 	bl	800935a <USBD_CtlError>
  }
}
 800901e:	bf00      	nop
 8009020:	bf00      	nop
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	885b      	ldrh	r3, [r3, #2]
 800903a:	b2da      	uxtb	r2, r3
 800903c:	4b4e      	ldr	r3, [pc, #312]	; (8009178 <USBD_SetConfig+0x150>)
 800903e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009040:	4b4d      	ldr	r3, [pc, #308]	; (8009178 <USBD_SetConfig+0x150>)
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d905      	bls.n	8009054 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f985 	bl	800935a <USBD_CtlError>
    return USBD_FAIL;
 8009050:	2303      	movs	r3, #3
 8009052:	e08c      	b.n	800916e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b02      	cmp	r3, #2
 800905e:	d002      	beq.n	8009066 <USBD_SetConfig+0x3e>
 8009060:	2b03      	cmp	r3, #3
 8009062:	d029      	beq.n	80090b8 <USBD_SetConfig+0x90>
 8009064:	e075      	b.n	8009152 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009066:	4b44      	ldr	r3, [pc, #272]	; (8009178 <USBD_SetConfig+0x150>)
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d020      	beq.n	80090b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800906e:	4b42      	ldr	r3, [pc, #264]	; (8009178 <USBD_SetConfig+0x150>)
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	461a      	mov	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009078:	4b3f      	ldr	r3, [pc, #252]	; (8009178 <USBD_SetConfig+0x150>)
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7fe ffe7 	bl	8008052 <USBD_SetClassConfig>
 8009084:	4603      	mov	r3, r0
 8009086:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009088:	7bfb      	ldrb	r3, [r7, #15]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d008      	beq.n	80090a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f962 	bl	800935a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2202      	movs	r2, #2
 800909a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800909e:	e065      	b.n	800916c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fa25 	bl	80094f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2203      	movs	r2, #3
 80090aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80090ae:	e05d      	b.n	800916c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 fa1d 	bl	80094f0 <USBD_CtlSendStatus>
      break;
 80090b6:	e059      	b.n	800916c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80090b8:	4b2f      	ldr	r3, [pc, #188]	; (8009178 <USBD_SetConfig+0x150>)
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d112      	bne.n	80090e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2202      	movs	r2, #2
 80090c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80090c8:	4b2b      	ldr	r3, [pc, #172]	; (8009178 <USBD_SetConfig+0x150>)
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	461a      	mov	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090d2:	4b29      	ldr	r3, [pc, #164]	; (8009178 <USBD_SetConfig+0x150>)
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7fe ffd6 	bl	800808a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fa06 	bl	80094f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80090e4:	e042      	b.n	800916c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80090e6:	4b24      	ldr	r3, [pc, #144]	; (8009178 <USBD_SetConfig+0x150>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d02a      	beq.n	800914a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7fe ffc4 	bl	800808a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009102:	4b1d      	ldr	r3, [pc, #116]	; (8009178 <USBD_SetConfig+0x150>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	461a      	mov	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800910c:	4b1a      	ldr	r3, [pc, #104]	; (8009178 <USBD_SetConfig+0x150>)
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f7fe ff9d 	bl	8008052 <USBD_SetClassConfig>
 8009118:	4603      	mov	r3, r0
 800911a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800911c:	7bfb      	ldrb	r3, [r7, #15]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00f      	beq.n	8009142 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f918 	bl	800935a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	b2db      	uxtb	r3, r3
 8009130:	4619      	mov	r1, r3
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7fe ffa9 	bl	800808a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2202      	movs	r2, #2
 800913c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009140:	e014      	b.n	800916c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f9d4 	bl	80094f0 <USBD_CtlSendStatus>
      break;
 8009148:	e010      	b.n	800916c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f9d0 	bl	80094f0 <USBD_CtlSendStatus>
      break;
 8009150:	e00c      	b.n	800916c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009152:	6839      	ldr	r1, [r7, #0]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f900 	bl	800935a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800915a:	4b07      	ldr	r3, [pc, #28]	; (8009178 <USBD_SetConfig+0x150>)
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	4619      	mov	r1, r3
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7fe ff92 	bl	800808a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009166:	2303      	movs	r3, #3
 8009168:	73fb      	strb	r3, [r7, #15]
      break;
 800916a:	bf00      	nop
  }

  return ret;
 800916c:	7bfb      	ldrb	r3, [r7, #15]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20000c7c 	.word	0x20000c7c

0800917c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	88db      	ldrh	r3, [r3, #6]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d004      	beq.n	8009198 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 f8e2 	bl	800935a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009196:	e023      	b.n	80091e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	dc02      	bgt.n	80091aa <USBD_GetConfig+0x2e>
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	dc03      	bgt.n	80091b0 <USBD_GetConfig+0x34>
 80091a8:	e015      	b.n	80091d6 <USBD_GetConfig+0x5a>
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d00b      	beq.n	80091c6 <USBD_GetConfig+0x4a>
 80091ae:	e012      	b.n	80091d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	3308      	adds	r3, #8
 80091ba:	2201      	movs	r2, #1
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f93c 	bl	800943c <USBD_CtlSendData>
        break;
 80091c4:	e00c      	b.n	80091e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	3304      	adds	r3, #4
 80091ca:	2201      	movs	r2, #1
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f934 	bl	800943c <USBD_CtlSendData>
        break;
 80091d4:	e004      	b.n	80091e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f8be 	bl	800935a <USBD_CtlError>
        break;
 80091de:	bf00      	nop
}
 80091e0:	bf00      	nop
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	3b01      	subs	r3, #1
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d81e      	bhi.n	800923e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	88db      	ldrh	r3, [r3, #6]
 8009204:	2b02      	cmp	r3, #2
 8009206:	d004      	beq.n	8009212 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009208:	6839      	ldr	r1, [r7, #0]
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f8a5 	bl	800935a <USBD_CtlError>
        break;
 8009210:	e01a      	b.n	8009248 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800921e:	2b00      	cmp	r3, #0
 8009220:	d005      	beq.n	800922e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	f043 0202 	orr.w	r2, r3, #2
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	330c      	adds	r3, #12
 8009232:	2202      	movs	r2, #2
 8009234:	4619      	mov	r1, r3
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f900 	bl	800943c <USBD_CtlSendData>
      break;
 800923c:	e004      	b.n	8009248 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f88a 	bl	800935a <USBD_CtlError>
      break;
 8009246:	bf00      	nop
  }
}
 8009248:	bf00      	nop
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	885b      	ldrh	r3, [r3, #2]
 800925e:	2b01      	cmp	r3, #1
 8009260:	d107      	bne.n	8009272 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2201      	movs	r2, #1
 8009266:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f940 	bl	80094f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009270:	e013      	b.n	800929a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	885b      	ldrh	r3, [r3, #2]
 8009276:	2b02      	cmp	r3, #2
 8009278:	d10b      	bne.n	8009292 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	889b      	ldrh	r3, [r3, #4]
 800927e:	0a1b      	lsrs	r3, r3, #8
 8009280:	b29b      	uxth	r3, r3
 8009282:	b2da      	uxtb	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f930 	bl	80094f0 <USBD_CtlSendStatus>
}
 8009290:	e003      	b.n	800929a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f860 	bl	800935a <USBD_CtlError>
}
 800929a:	bf00      	nop
 800929c:	3708      	adds	r7, #8
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b082      	sub	sp, #8
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	3b01      	subs	r3, #1
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d80b      	bhi.n	80092d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	885b      	ldrh	r3, [r3, #2]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d10c      	bne.n	80092dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f910 	bl	80094f0 <USBD_CtlSendStatus>
      }
      break;
 80092d0:	e004      	b.n	80092dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80092d2:	6839      	ldr	r1, [r7, #0]
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f840 	bl	800935a <USBD_CtlError>
      break;
 80092da:	e000      	b.n	80092de <USBD_ClrFeature+0x3c>
      break;
 80092dc:	bf00      	nop
  }
}
 80092de:	bf00      	nop
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b084      	sub	sp, #16
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	781a      	ldrb	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	3301      	adds	r3, #1
 8009300:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	781a      	ldrb	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3301      	adds	r3, #1
 800930e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f7ff fa41 	bl	8008798 <SWAPBYTE>
 8009316:	4603      	mov	r3, r0
 8009318:	461a      	mov	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3301      	adds	r3, #1
 8009322:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	3301      	adds	r3, #1
 8009328:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f7ff fa34 	bl	8008798 <SWAPBYTE>
 8009330:	4603      	mov	r3, r0
 8009332:	461a      	mov	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	3301      	adds	r3, #1
 800933c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	3301      	adds	r3, #1
 8009342:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f7ff fa27 	bl	8008798 <SWAPBYTE>
 800934a:	4603      	mov	r3, r0
 800934c:	461a      	mov	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	80da      	strh	r2, [r3, #6]
}
 8009352:	bf00      	nop
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b082      	sub	sp, #8
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009364:	2180      	movs	r1, #128	; 0x80
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fcb0 	bl	8009ccc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800936c:	2100      	movs	r1, #0
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fcac 	bl	8009ccc <USBD_LL_StallEP>
}
 8009374:	bf00      	nop
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009388:	2300      	movs	r3, #0
 800938a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d036      	beq.n	8009400 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009396:	6938      	ldr	r0, [r7, #16]
 8009398:	f000 f836 	bl	8009408 <USBD_GetLen>
 800939c:	4603      	mov	r3, r0
 800939e:	3301      	adds	r3, #1
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80093aa:	7dfb      	ldrb	r3, [r7, #23]
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	4413      	add	r3, r2
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	7812      	ldrb	r2, [r2, #0]
 80093b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80093b6:	7dfb      	ldrb	r3, [r7, #23]
 80093b8:	3301      	adds	r3, #1
 80093ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	4413      	add	r3, r2
 80093c2:	2203      	movs	r2, #3
 80093c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
 80093c8:	3301      	adds	r3, #1
 80093ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80093cc:	e013      	b.n	80093f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80093ce:	7dfb      	ldrb	r3, [r7, #23]
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	4413      	add	r3, r2
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	7812      	ldrb	r2, [r2, #0]
 80093d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	3301      	adds	r3, #1
 80093de:	613b      	str	r3, [r7, #16]
    idx++;
 80093e0:	7dfb      	ldrb	r3, [r7, #23]
 80093e2:	3301      	adds	r3, #1
 80093e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	4413      	add	r3, r2
 80093ec:	2200      	movs	r2, #0
 80093ee:	701a      	strb	r2, [r3, #0]
    idx++;
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	3301      	adds	r3, #1
 80093f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1e7      	bne.n	80093ce <USBD_GetString+0x52>
 80093fe:	e000      	b.n	8009402 <USBD_GetString+0x86>
    return;
 8009400:	bf00      	nop
  }
}
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009410:	2300      	movs	r3, #0
 8009412:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009418:	e005      	b.n	8009426 <USBD_GetLen+0x1e>
  {
    len++;
 800941a:	7bfb      	ldrb	r3, [r7, #15]
 800941c:	3301      	adds	r3, #1
 800941e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	3301      	adds	r3, #1
 8009424:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1f5      	bne.n	800941a <USBD_GetLen+0x12>
  }

  return len;
 800942e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2202      	movs	r2, #2
 800944c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	2100      	movs	r1, #0
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 fcbb 	bl	8009dde <USBD_LL_Transmit>

  return USBD_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	60f8      	str	r0, [r7, #12]
 800947a:	60b9      	str	r1, [r7, #8]
 800947c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	2100      	movs	r1, #0
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 fcaa 	bl	8009dde <USBD_LL_Transmit>

  return USBD_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2203      	movs	r2, #3
 80094a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	2100      	movs	r1, #0
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f000 fcae 	bl	8009e20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b084      	sub	sp, #16
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	2100      	movs	r1, #0
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f000 fc9d 	bl	8009e20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2204      	movs	r2, #4
 80094fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009500:	2300      	movs	r3, #0
 8009502:	2200      	movs	r2, #0
 8009504:	2100      	movs	r1, #0
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fc69 	bl	8009dde <USBD_LL_Transmit>

  return USBD_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b082      	sub	sp, #8
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2205      	movs	r2, #5
 8009522:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009526:	2300      	movs	r3, #0
 8009528:	2200      	movs	r2, #0
 800952a:	2100      	movs	r1, #0
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fc77 	bl	8009e20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009540:	2200      	movs	r2, #0
 8009542:	4912      	ldr	r1, [pc, #72]	; (800958c <MX_USB_DEVICE_Init+0x50>)
 8009544:	4812      	ldr	r0, [pc, #72]	; (8009590 <MX_USB_DEVICE_Init+0x54>)
 8009546:	f7fe fd07 	bl	8007f58 <USBD_Init>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d001      	beq.n	8009554 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009550:	f7f8 f93e 	bl	80017d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009554:	490f      	ldr	r1, [pc, #60]	; (8009594 <MX_USB_DEVICE_Init+0x58>)
 8009556:	480e      	ldr	r0, [pc, #56]	; (8009590 <MX_USB_DEVICE_Init+0x54>)
 8009558:	f7fe fd2e 	bl	8007fb8 <USBD_RegisterClass>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009562:	f7f8 f935 	bl	80017d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009566:	490c      	ldr	r1, [pc, #48]	; (8009598 <MX_USB_DEVICE_Init+0x5c>)
 8009568:	4809      	ldr	r0, [pc, #36]	; (8009590 <MX_USB_DEVICE_Init+0x54>)
 800956a:	f7fe fc65 	bl	8007e38 <USBD_CDC_RegisterInterface>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009574:	f7f8 f92c 	bl	80017d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009578:	4805      	ldr	r0, [pc, #20]	; (8009590 <MX_USB_DEVICE_Init+0x54>)
 800957a:	f7fe fd53 	bl	8008024 <USBD_Start>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009584:	f7f8 f924 	bl	80017d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009588:	bf00      	nop
 800958a:	bd80      	pop	{r7, pc}
 800958c:	2000014c 	.word	0x2000014c
 8009590:	20000c80 	.word	0x20000c80
 8009594:	200000b8 	.word	0x200000b8
 8009598:	20000138 	.word	0x20000138

0800959c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80095a0:	2200      	movs	r2, #0
 80095a2:	4905      	ldr	r1, [pc, #20]	; (80095b8 <CDC_Init_FS+0x1c>)
 80095a4:	4805      	ldr	r0, [pc, #20]	; (80095bc <CDC_Init_FS+0x20>)
 80095a6:	f7fe fc61 	bl	8007e6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80095aa:	4905      	ldr	r1, [pc, #20]	; (80095c0 <CDC_Init_FS+0x24>)
 80095ac:	4803      	ldr	r0, [pc, #12]	; (80095bc <CDC_Init_FS+0x20>)
 80095ae:	f7fe fc7f 	bl	8007eb0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80095b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	2000175c 	.word	0x2000175c
 80095bc:	20000c80 	.word	0x20000c80
 80095c0:	20000f5c 	.word	0x20000f5c

080095c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80095c4:	b480      	push	{r7}
 80095c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80095c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	6039      	str	r1, [r7, #0]
 80095de:	71fb      	strb	r3, [r7, #7]
 80095e0:	4613      	mov	r3, r2
 80095e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80095e4:	79fb      	ldrb	r3, [r7, #7]
 80095e6:	2b23      	cmp	r3, #35	; 0x23
 80095e8:	d84a      	bhi.n	8009680 <CDC_Control_FS+0xac>
 80095ea:	a201      	add	r2, pc, #4	; (adr r2, 80095f0 <CDC_Control_FS+0x1c>)
 80095ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f0:	08009681 	.word	0x08009681
 80095f4:	08009681 	.word	0x08009681
 80095f8:	08009681 	.word	0x08009681
 80095fc:	08009681 	.word	0x08009681
 8009600:	08009681 	.word	0x08009681
 8009604:	08009681 	.word	0x08009681
 8009608:	08009681 	.word	0x08009681
 800960c:	08009681 	.word	0x08009681
 8009610:	08009681 	.word	0x08009681
 8009614:	08009681 	.word	0x08009681
 8009618:	08009681 	.word	0x08009681
 800961c:	08009681 	.word	0x08009681
 8009620:	08009681 	.word	0x08009681
 8009624:	08009681 	.word	0x08009681
 8009628:	08009681 	.word	0x08009681
 800962c:	08009681 	.word	0x08009681
 8009630:	08009681 	.word	0x08009681
 8009634:	08009681 	.word	0x08009681
 8009638:	08009681 	.word	0x08009681
 800963c:	08009681 	.word	0x08009681
 8009640:	08009681 	.word	0x08009681
 8009644:	08009681 	.word	0x08009681
 8009648:	08009681 	.word	0x08009681
 800964c:	08009681 	.word	0x08009681
 8009650:	08009681 	.word	0x08009681
 8009654:	08009681 	.word	0x08009681
 8009658:	08009681 	.word	0x08009681
 800965c:	08009681 	.word	0x08009681
 8009660:	08009681 	.word	0x08009681
 8009664:	08009681 	.word	0x08009681
 8009668:	08009681 	.word	0x08009681
 800966c:	08009681 	.word	0x08009681
 8009670:	08009681 	.word	0x08009681
 8009674:	08009681 	.word	0x08009681
 8009678:	08009681 	.word	0x08009681
 800967c:	08009681 	.word	0x08009681
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009680:	bf00      	nop
  }

  return (USBD_OK);
 8009682:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009684:	4618      	mov	r0, r3
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	4805      	ldr	r0, [pc, #20]	; (80096b4 <CDC_Receive_FS+0x24>)
 800969e:	f7fe fc07 	bl	8007eb0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096a2:	4804      	ldr	r0, [pc, #16]	; (80096b4 <CDC_Receive_FS+0x24>)
 80096a4:	f7fe fc22 	bl	8007eec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80096a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	20000c80 	.word	0x20000c80

080096b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b087      	sub	sp, #28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	4613      	mov	r3, r2
 80096c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80096ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	371c      	adds	r7, #28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
	...

080096dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	4603      	mov	r3, r0
 80096e4:	6039      	str	r1, [r7, #0]
 80096e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2212      	movs	r2, #18
 80096ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80096ee:	4b03      	ldr	r3, [pc, #12]	; (80096fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr
 80096fc:	20000168 	.word	0x20000168

08009700 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	6039      	str	r1, [r7, #0]
 800970a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2204      	movs	r2, #4
 8009710:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009712:	4b03      	ldr	r3, [pc, #12]	; (8009720 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009714:	4618      	mov	r0, r3
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	2000017c 	.word	0x2000017c

08009724 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	4603      	mov	r3, r0
 800972c:	6039      	str	r1, [r7, #0]
 800972e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009730:	79fb      	ldrb	r3, [r7, #7]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d105      	bne.n	8009742 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	4907      	ldr	r1, [pc, #28]	; (8009758 <USBD_FS_ProductStrDescriptor+0x34>)
 800973a:	4808      	ldr	r0, [pc, #32]	; (800975c <USBD_FS_ProductStrDescriptor+0x38>)
 800973c:	f7ff fe1e 	bl	800937c <USBD_GetString>
 8009740:	e004      	b.n	800974c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009742:	683a      	ldr	r2, [r7, #0]
 8009744:	4904      	ldr	r1, [pc, #16]	; (8009758 <USBD_FS_ProductStrDescriptor+0x34>)
 8009746:	4805      	ldr	r0, [pc, #20]	; (800975c <USBD_FS_ProductStrDescriptor+0x38>)
 8009748:	f7ff fe18 	bl	800937c <USBD_GetString>
  }
  return USBD_StrDesc;
 800974c:	4b02      	ldr	r3, [pc, #8]	; (8009758 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800974e:	4618      	mov	r0, r3
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	20001f5c 	.word	0x20001f5c
 800975c:	0800d358 	.word	0x0800d358

08009760 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	6039      	str	r1, [r7, #0]
 800976a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	4904      	ldr	r1, [pc, #16]	; (8009780 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009770:	4804      	ldr	r0, [pc, #16]	; (8009784 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009772:	f7ff fe03 	bl	800937c <USBD_GetString>
  return USBD_StrDesc;
 8009776:	4b02      	ldr	r3, [pc, #8]	; (8009780 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009778:	4618      	mov	r0, r3
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	20001f5c 	.word	0x20001f5c
 8009784:	0800d360 	.word	0x0800d360

08009788 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	4603      	mov	r3, r0
 8009790:	6039      	str	r1, [r7, #0]
 8009792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	221a      	movs	r2, #26
 8009798:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800979a:	f000 f843 	bl	8009824 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800979e:	4b02      	ldr	r3, [pc, #8]	; (80097a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	20000180 	.word	0x20000180

080097ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4603      	mov	r3, r0
 80097b4:	6039      	str	r1, [r7, #0]
 80097b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80097b8:	79fb      	ldrb	r3, [r7, #7]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d105      	bne.n	80097ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	4907      	ldr	r1, [pc, #28]	; (80097e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097c2:	4808      	ldr	r0, [pc, #32]	; (80097e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097c4:	f7ff fdda 	bl	800937c <USBD_GetString>
 80097c8:	e004      	b.n	80097d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	4904      	ldr	r1, [pc, #16]	; (80097e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097ce:	4805      	ldr	r0, [pc, #20]	; (80097e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097d0:	f7ff fdd4 	bl	800937c <USBD_GetString>
  }
  return USBD_StrDesc;
 80097d4:	4b02      	ldr	r3, [pc, #8]	; (80097e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20001f5c 	.word	0x20001f5c
 80097e4:	0800d374 	.word	0x0800d374

080097e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	4603      	mov	r3, r0
 80097f0:	6039      	str	r1, [r7, #0]
 80097f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d105      	bne.n	8009806 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	4907      	ldr	r1, [pc, #28]	; (800981c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097fe:	4808      	ldr	r0, [pc, #32]	; (8009820 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009800:	f7ff fdbc 	bl	800937c <USBD_GetString>
 8009804:	e004      	b.n	8009810 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	4904      	ldr	r1, [pc, #16]	; (800981c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800980a:	4805      	ldr	r0, [pc, #20]	; (8009820 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800980c:	f7ff fdb6 	bl	800937c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009810:	4b02      	ldr	r3, [pc, #8]	; (800981c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	20001f5c 	.word	0x20001f5c
 8009820:	0800d380 	.word	0x0800d380

08009824 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800982a:	4b0f      	ldr	r3, [pc, #60]	; (8009868 <Get_SerialNum+0x44>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009830:	4b0e      	ldr	r3, [pc, #56]	; (800986c <Get_SerialNum+0x48>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009836:	4b0e      	ldr	r3, [pc, #56]	; (8009870 <Get_SerialNum+0x4c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4413      	add	r3, r2
 8009842:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d009      	beq.n	800985e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800984a:	2208      	movs	r2, #8
 800984c:	4909      	ldr	r1, [pc, #36]	; (8009874 <Get_SerialNum+0x50>)
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f000 f814 	bl	800987c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009854:	2204      	movs	r2, #4
 8009856:	4908      	ldr	r1, [pc, #32]	; (8009878 <Get_SerialNum+0x54>)
 8009858:	68b8      	ldr	r0, [r7, #8]
 800985a:	f000 f80f 	bl	800987c <IntToUnicode>
  }
}
 800985e:	bf00      	nop
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	1fff7a10 	.word	0x1fff7a10
 800986c:	1fff7a14 	.word	0x1fff7a14
 8009870:	1fff7a18 	.word	0x1fff7a18
 8009874:	20000182 	.word	0x20000182
 8009878:	20000192 	.word	0x20000192

0800987c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800987c:	b480      	push	{r7}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	4613      	mov	r3, r2
 8009888:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800988a:	2300      	movs	r3, #0
 800988c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800988e:	2300      	movs	r3, #0
 8009890:	75fb      	strb	r3, [r7, #23]
 8009892:	e027      	b.n	80098e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	0f1b      	lsrs	r3, r3, #28
 8009898:	2b09      	cmp	r3, #9
 800989a:	d80b      	bhi.n	80098b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	0f1b      	lsrs	r3, r3, #28
 80098a0:	b2da      	uxtb	r2, r3
 80098a2:	7dfb      	ldrb	r3, [r7, #23]
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	4619      	mov	r1, r3
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	440b      	add	r3, r1
 80098ac:	3230      	adds	r2, #48	; 0x30
 80098ae:	b2d2      	uxtb	r2, r2
 80098b0:	701a      	strb	r2, [r3, #0]
 80098b2:	e00a      	b.n	80098ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	0f1b      	lsrs	r3, r3, #28
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	7dfb      	ldrb	r3, [r7, #23]
 80098bc:	005b      	lsls	r3, r3, #1
 80098be:	4619      	mov	r1, r3
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	440b      	add	r3, r1
 80098c4:	3237      	adds	r2, #55	; 0x37
 80098c6:	b2d2      	uxtb	r2, r2
 80098c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	011b      	lsls	r3, r3, #4
 80098ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80098d0:	7dfb      	ldrb	r3, [r7, #23]
 80098d2:	005b      	lsls	r3, r3, #1
 80098d4:	3301      	adds	r3, #1
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	4413      	add	r3, r2
 80098da:	2200      	movs	r2, #0
 80098dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80098de:	7dfb      	ldrb	r3, [r7, #23]
 80098e0:	3301      	adds	r3, #1
 80098e2:	75fb      	strb	r3, [r7, #23]
 80098e4:	7dfa      	ldrb	r2, [r7, #23]
 80098e6:	79fb      	ldrb	r3, [r7, #7]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d3d3      	bcc.n	8009894 <IntToUnicode+0x18>
  }
}
 80098ec:	bf00      	nop
 80098ee:	bf00      	nop
 80098f0:	371c      	adds	r7, #28
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
	...

080098fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b08a      	sub	sp, #40	; 0x28
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009904:	f107 0314 	add.w	r3, r7, #20
 8009908:	2200      	movs	r2, #0
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	605a      	str	r2, [r3, #4]
 800990e:	609a      	str	r2, [r3, #8]
 8009910:	60da      	str	r2, [r3, #12]
 8009912:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800991c:	d13a      	bne.n	8009994 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800991e:	2300      	movs	r3, #0
 8009920:	613b      	str	r3, [r7, #16]
 8009922:	4b1e      	ldr	r3, [pc, #120]	; (800999c <HAL_PCD_MspInit+0xa0>)
 8009924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009926:	4a1d      	ldr	r2, [pc, #116]	; (800999c <HAL_PCD_MspInit+0xa0>)
 8009928:	f043 0301 	orr.w	r3, r3, #1
 800992c:	6313      	str	r3, [r2, #48]	; 0x30
 800992e:	4b1b      	ldr	r3, [pc, #108]	; (800999c <HAL_PCD_MspInit+0xa0>)
 8009930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	613b      	str	r3, [r7, #16]
 8009938:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800993a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800993e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009940:	2302      	movs	r3, #2
 8009942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009944:	2300      	movs	r3, #0
 8009946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009948:	2303      	movs	r3, #3
 800994a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800994c:	230a      	movs	r3, #10
 800994e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009950:	f107 0314 	add.w	r3, r7, #20
 8009954:	4619      	mov	r1, r3
 8009956:	4812      	ldr	r0, [pc, #72]	; (80099a0 <HAL_PCD_MspInit+0xa4>)
 8009958:	f7f9 f882 	bl	8002a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800995c:	4b0f      	ldr	r3, [pc, #60]	; (800999c <HAL_PCD_MspInit+0xa0>)
 800995e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009960:	4a0e      	ldr	r2, [pc, #56]	; (800999c <HAL_PCD_MspInit+0xa0>)
 8009962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009966:	6353      	str	r3, [r2, #52]	; 0x34
 8009968:	2300      	movs	r3, #0
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	4b0b      	ldr	r3, [pc, #44]	; (800999c <HAL_PCD_MspInit+0xa0>)
 800996e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009970:	4a0a      	ldr	r2, [pc, #40]	; (800999c <HAL_PCD_MspInit+0xa0>)
 8009972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009976:	6453      	str	r3, [r2, #68]	; 0x44
 8009978:	4b08      	ldr	r3, [pc, #32]	; (800999c <HAL_PCD_MspInit+0xa0>)
 800997a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800997c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009980:	60fb      	str	r3, [r7, #12]
 8009982:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009984:	2200      	movs	r2, #0
 8009986:	2100      	movs	r1, #0
 8009988:	2043      	movs	r0, #67	; 0x43
 800998a:	f7f9 f832 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800998e:	2043      	movs	r0, #67	; 0x43
 8009990:	f7f9 f84b 	bl	8002a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009994:	bf00      	nop
 8009996:	3728      	adds	r7, #40	; 0x28
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	40023800 	.word	0x40023800
 80099a0:	40020000 	.word	0x40020000

080099a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80099b8:	4619      	mov	r1, r3
 80099ba:	4610      	mov	r0, r2
 80099bc:	f7fe fb7f 	bl	80080be <USBD_LL_SetupStage>
}
 80099c0:	bf00      	nop
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80099da:	78fa      	ldrb	r2, [r7, #3]
 80099dc:	6879      	ldr	r1, [r7, #4]
 80099de:	4613      	mov	r3, r2
 80099e0:	00db      	lsls	r3, r3, #3
 80099e2:	4413      	add	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	440b      	add	r3, r1
 80099e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	78fb      	ldrb	r3, [r7, #3]
 80099f0:	4619      	mov	r1, r3
 80099f2:	f7fe fbb9 	bl	8008168 <USBD_LL_DataOutStage>
}
 80099f6:	bf00      	nop
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b082      	sub	sp, #8
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	460b      	mov	r3, r1
 8009a08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009a10:	78fa      	ldrb	r2, [r7, #3]
 8009a12:	6879      	ldr	r1, [r7, #4]
 8009a14:	4613      	mov	r3, r2
 8009a16:	00db      	lsls	r3, r3, #3
 8009a18:	4413      	add	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	440b      	add	r3, r1
 8009a1e:	334c      	adds	r3, #76	; 0x4c
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	78fb      	ldrb	r3, [r7, #3]
 8009a24:	4619      	mov	r1, r3
 8009a26:	f7fe fc52 	bl	80082ce <USBD_LL_DataInStage>
}
 8009a2a:	bf00      	nop
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b082      	sub	sp, #8
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7fe fd86 	bl	8008552 <USBD_LL_SOF>
}
 8009a46:	bf00      	nop
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b084      	sub	sp, #16
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a56:	2301      	movs	r3, #1
 8009a58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d001      	beq.n	8009a66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a62:	f7f7 feb5 	bl	80017d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a6c:	7bfa      	ldrb	r2, [r7, #15]
 8009a6e:	4611      	mov	r1, r2
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fe fd30 	bl	80084d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7fe fcd8 	bl	8008432 <USBD_LL_Reset>
}
 8009a82:	bf00      	nop
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
	...

08009a8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fe fd2b 	bl	80084f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	6812      	ldr	r2, [r2, #0]
 8009aae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ab2:	f043 0301 	orr.w	r3, r3, #1
 8009ab6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a1b      	ldr	r3, [r3, #32]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d005      	beq.n	8009acc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ac0:	4b04      	ldr	r3, [pc, #16]	; (8009ad4 <HAL_PCD_SuspendCallback+0x48>)
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	4a03      	ldr	r2, [pc, #12]	; (8009ad4 <HAL_PCD_SuspendCallback+0x48>)
 8009ac6:	f043 0306 	orr.w	r3, r3, #6
 8009aca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	e000ed00 	.word	0xe000ed00

08009ad8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fe fd1b 	bl	8008522 <USBD_LL_Resume>
}
 8009aec:	bf00      	nop
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	460b      	mov	r3, r1
 8009afe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b06:	78fa      	ldrb	r2, [r7, #3]
 8009b08:	4611      	mov	r1, r2
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe fd73 	bl	80085f6 <USBD_LL_IsoOUTIncomplete>
}
 8009b10:	bf00      	nop
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	460b      	mov	r3, r1
 8009b22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b2a:	78fa      	ldrb	r2, [r7, #3]
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fe fd2f 	bl	8008592 <USBD_LL_IsoINIncomplete>
}
 8009b34:	bf00      	nop
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fe fd85 	bl	800865a <USBD_LL_DevConnected>
}
 8009b50:	bf00      	nop
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe fd82 	bl	8008670 <USBD_LL_DevDisconnected>
}
 8009b6c:	bf00      	nop
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d13c      	bne.n	8009bfe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009b84:	4a20      	ldr	r2, [pc, #128]	; (8009c08 <USBD_LL_Init+0x94>)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a1e      	ldr	r2, [pc, #120]	; (8009c08 <USBD_LL_Init+0x94>)
 8009b90:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b94:	4b1c      	ldr	r3, [pc, #112]	; (8009c08 <USBD_LL_Init+0x94>)
 8009b96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009b9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009b9c:	4b1a      	ldr	r3, [pc, #104]	; (8009c08 <USBD_LL_Init+0x94>)
 8009b9e:	2204      	movs	r2, #4
 8009ba0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ba2:	4b19      	ldr	r3, [pc, #100]	; (8009c08 <USBD_LL_Init+0x94>)
 8009ba4:	2202      	movs	r2, #2
 8009ba6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ba8:	4b17      	ldr	r3, [pc, #92]	; (8009c08 <USBD_LL_Init+0x94>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009bae:	4b16      	ldr	r3, [pc, #88]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009bb4:	4b14      	ldr	r3, [pc, #80]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009bba:	4b13      	ldr	r3, [pc, #76]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009bc0:	4b11      	ldr	r3, [pc, #68]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009bc6:	4b10      	ldr	r3, [pc, #64]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009bcc:	4b0e      	ldr	r3, [pc, #56]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009bd2:	480d      	ldr	r0, [pc, #52]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bd4:	f7fa fa21 	bl	800401a <HAL_PCD_Init>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009bde:	f7f7 fdf7 	bl	80017d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009be2:	2180      	movs	r1, #128	; 0x80
 8009be4:	4808      	ldr	r0, [pc, #32]	; (8009c08 <USBD_LL_Init+0x94>)
 8009be6:	f7fb fc78 	bl	80054da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009bea:	2240      	movs	r2, #64	; 0x40
 8009bec:	2100      	movs	r1, #0
 8009bee:	4806      	ldr	r0, [pc, #24]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bf0:	f7fb fc2c 	bl	800544c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009bf4:	2280      	movs	r2, #128	; 0x80
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	4803      	ldr	r0, [pc, #12]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bfa:	f7fb fc27 	bl	800544c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	2000215c 	.word	0x2000215c

08009c0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fa fb16 	bl	8004254 <HAL_PCD_Start>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 f942 	bl	8009eb8 <USBD_Get_USB_Status>
 8009c34:	4603      	mov	r3, r0
 8009c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	4608      	mov	r0, r1
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	461a      	mov	r2, r3
 8009c50:	4603      	mov	r3, r0
 8009c52:	70fb      	strb	r3, [r7, #3]
 8009c54:	460b      	mov	r3, r1
 8009c56:	70bb      	strb	r3, [r7, #2]
 8009c58:	4613      	mov	r3, r2
 8009c5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009c6a:	78bb      	ldrb	r3, [r7, #2]
 8009c6c:	883a      	ldrh	r2, [r7, #0]
 8009c6e:	78f9      	ldrb	r1, [r7, #3]
 8009c70:	f7fa ffe7 	bl	8004c42 <HAL_PCD_EP_Open>
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 f91c 	bl	8009eb8 <USBD_Get_USB_Status>
 8009c80:	4603      	mov	r3, r0
 8009c82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	460b      	mov	r3, r1
 8009c98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ca8:	78fa      	ldrb	r2, [r7, #3]
 8009caa:	4611      	mov	r1, r2
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fb f830 	bl	8004d12 <HAL_PCD_EP_Close>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 f8fd 	bl	8009eb8 <USBD_Get_USB_Status>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ce6:	78fa      	ldrb	r2, [r7, #3]
 8009ce8:	4611      	mov	r1, r2
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fb f908 	bl	8004f00 <HAL_PCD_EP_SetStall>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 f8de 	bl	8009eb8 <USBD_Get_USB_Status>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b084      	sub	sp, #16
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	460b      	mov	r3, r1
 8009d14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d24:	78fa      	ldrb	r2, [r7, #3]
 8009d26:	4611      	mov	r1, r2
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fb f94d 	bl	8004fc8 <HAL_PCD_EP_ClrStall>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 f8bf 	bl	8009eb8 <USBD_Get_USB_Status>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	da0b      	bge.n	8009d7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d64:	78fb      	ldrb	r3, [r7, #3]
 8009d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d6a:	68f9      	ldr	r1, [r7, #12]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	00db      	lsls	r3, r3, #3
 8009d70:	4413      	add	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	440b      	add	r3, r1
 8009d76:	333e      	adds	r3, #62	; 0x3e
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	e00b      	b.n	8009d94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d7c:	78fb      	ldrb	r3, [r7, #3]
 8009d7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d82:	68f9      	ldr	r1, [r7, #12]
 8009d84:	4613      	mov	r3, r2
 8009d86:	00db      	lsls	r3, r3, #3
 8009d88:	4413      	add	r3, r2
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	440b      	add	r3, r1
 8009d8e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009d92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	460b      	mov	r3, r1
 8009daa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dac:	2300      	movs	r3, #0
 8009dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009dba:	78fa      	ldrb	r2, [r7, #3]
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fa ff1a 	bl	8004bf8 <HAL_PCD_SetAddress>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f000 f874 	bl	8009eb8 <USBD_Get_USB_Status>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b086      	sub	sp, #24
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	607a      	str	r2, [r7, #4]
 8009de8:	603b      	str	r3, [r7, #0]
 8009dea:	460b      	mov	r3, r1
 8009dec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dee:	2300      	movs	r3, #0
 8009df0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009dfc:	7af9      	ldrb	r1, [r7, #11]
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	f7fb f833 	bl	8004e6c <HAL_PCD_EP_Transmit>
 8009e06:	4603      	mov	r3, r0
 8009e08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e0a:	7dfb      	ldrb	r3, [r7, #23]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f000 f853 	bl	8009eb8 <USBD_Get_USB_Status>
 8009e12:	4603      	mov	r3, r0
 8009e14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e16:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3718      	adds	r7, #24
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	607a      	str	r2, [r7, #4]
 8009e2a:	603b      	str	r3, [r7, #0]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009e3e:	7af9      	ldrb	r1, [r7, #11]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	f7fa ffaf 	bl	8004da6 <HAL_PCD_EP_Receive>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e4c:	7dfb      	ldrb	r3, [r7, #23]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 f832 	bl	8009eb8 <USBD_Get_USB_Status>
 8009e54:	4603      	mov	r3, r0
 8009e56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e58:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3718      	adds	r7, #24
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b082      	sub	sp, #8
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e74:	78fa      	ldrb	r2, [r7, #3]
 8009e76:	4611      	mov	r1, r2
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fa ffdf 	bl	8004e3c <HAL_PCD_EP_GetRxCount>
 8009e7e:	4603      	mov	r3, r0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e90:	4b03      	ldr	r3, [pc, #12]	; (8009ea0 <USBD_static_malloc+0x18>)
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	370c      	adds	r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	20002668 	.word	0x20002668

08009ea4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]

}
 8009eac:	bf00      	nop
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ec6:	79fb      	ldrb	r3, [r7, #7]
 8009ec8:	2b03      	cmp	r3, #3
 8009eca:	d817      	bhi.n	8009efc <USBD_Get_USB_Status+0x44>
 8009ecc:	a201      	add	r2, pc, #4	; (adr r2, 8009ed4 <USBD_Get_USB_Status+0x1c>)
 8009ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed2:	bf00      	nop
 8009ed4:	08009ee5 	.word	0x08009ee5
 8009ed8:	08009eeb 	.word	0x08009eeb
 8009edc:	08009ef1 	.word	0x08009ef1
 8009ee0:	08009ef7 	.word	0x08009ef7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ee8:	e00b      	b.n	8009f02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009eea:	2303      	movs	r3, #3
 8009eec:	73fb      	strb	r3, [r7, #15]
    break;
 8009eee:	e008      	b.n	8009f02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ef4:	e005      	b.n	8009f02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	73fb      	strb	r3, [r7, #15]
    break;
 8009efa:	e002      	b.n	8009f02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009efc:	2303      	movs	r3, #3
 8009efe:	73fb      	strb	r3, [r7, #15]
    break;
 8009f00:	bf00      	nop
  }
  return usb_status;
 8009f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3714      	adds	r7, #20
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <__cvt>:
 8009f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f14:	ec55 4b10 	vmov	r4, r5, d0
 8009f18:	2d00      	cmp	r5, #0
 8009f1a:	460e      	mov	r6, r1
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	462b      	mov	r3, r5
 8009f20:	bfbb      	ittet	lt
 8009f22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f26:	461d      	movlt	r5, r3
 8009f28:	2300      	movge	r3, #0
 8009f2a:	232d      	movlt	r3, #45	; 0x2d
 8009f2c:	700b      	strb	r3, [r1, #0]
 8009f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f34:	4691      	mov	r9, r2
 8009f36:	f023 0820 	bic.w	r8, r3, #32
 8009f3a:	bfbc      	itt	lt
 8009f3c:	4622      	movlt	r2, r4
 8009f3e:	4614      	movlt	r4, r2
 8009f40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f44:	d005      	beq.n	8009f52 <__cvt+0x42>
 8009f46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009f4a:	d100      	bne.n	8009f4e <__cvt+0x3e>
 8009f4c:	3601      	adds	r6, #1
 8009f4e:	2102      	movs	r1, #2
 8009f50:	e000      	b.n	8009f54 <__cvt+0x44>
 8009f52:	2103      	movs	r1, #3
 8009f54:	ab03      	add	r3, sp, #12
 8009f56:	9301      	str	r3, [sp, #4]
 8009f58:	ab02      	add	r3, sp, #8
 8009f5a:	9300      	str	r3, [sp, #0]
 8009f5c:	ec45 4b10 	vmov	d0, r4, r5
 8009f60:	4653      	mov	r3, sl
 8009f62:	4632      	mov	r2, r6
 8009f64:	f000 fe7c 	bl	800ac60 <_dtoa_r>
 8009f68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f6c:	4607      	mov	r7, r0
 8009f6e:	d102      	bne.n	8009f76 <__cvt+0x66>
 8009f70:	f019 0f01 	tst.w	r9, #1
 8009f74:	d022      	beq.n	8009fbc <__cvt+0xac>
 8009f76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f7a:	eb07 0906 	add.w	r9, r7, r6
 8009f7e:	d110      	bne.n	8009fa2 <__cvt+0x92>
 8009f80:	783b      	ldrb	r3, [r7, #0]
 8009f82:	2b30      	cmp	r3, #48	; 0x30
 8009f84:	d10a      	bne.n	8009f9c <__cvt+0x8c>
 8009f86:	2200      	movs	r2, #0
 8009f88:	2300      	movs	r3, #0
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	f7f6 fda3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f92:	b918      	cbnz	r0, 8009f9c <__cvt+0x8c>
 8009f94:	f1c6 0601 	rsb	r6, r6, #1
 8009f98:	f8ca 6000 	str.w	r6, [sl]
 8009f9c:	f8da 3000 	ldr.w	r3, [sl]
 8009fa0:	4499      	add	r9, r3
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	4629      	mov	r1, r5
 8009faa:	f7f6 fd95 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fae:	b108      	cbz	r0, 8009fb4 <__cvt+0xa4>
 8009fb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009fb4:	2230      	movs	r2, #48	; 0x30
 8009fb6:	9b03      	ldr	r3, [sp, #12]
 8009fb8:	454b      	cmp	r3, r9
 8009fba:	d307      	bcc.n	8009fcc <__cvt+0xbc>
 8009fbc:	9b03      	ldr	r3, [sp, #12]
 8009fbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fc0:	1bdb      	subs	r3, r3, r7
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	6013      	str	r3, [r2, #0]
 8009fc6:	b004      	add	sp, #16
 8009fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fcc:	1c59      	adds	r1, r3, #1
 8009fce:	9103      	str	r1, [sp, #12]
 8009fd0:	701a      	strb	r2, [r3, #0]
 8009fd2:	e7f0      	b.n	8009fb6 <__cvt+0xa6>

08009fd4 <__exponent>:
 8009fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2900      	cmp	r1, #0
 8009fda:	bfb8      	it	lt
 8009fdc:	4249      	neglt	r1, r1
 8009fde:	f803 2b02 	strb.w	r2, [r3], #2
 8009fe2:	bfb4      	ite	lt
 8009fe4:	222d      	movlt	r2, #45	; 0x2d
 8009fe6:	222b      	movge	r2, #43	; 0x2b
 8009fe8:	2909      	cmp	r1, #9
 8009fea:	7042      	strb	r2, [r0, #1]
 8009fec:	dd2a      	ble.n	800a044 <__exponent+0x70>
 8009fee:	f10d 0207 	add.w	r2, sp, #7
 8009ff2:	4617      	mov	r7, r2
 8009ff4:	260a      	movs	r6, #10
 8009ff6:	4694      	mov	ip, r2
 8009ff8:	fb91 f5f6 	sdiv	r5, r1, r6
 8009ffc:	fb06 1415 	mls	r4, r6, r5, r1
 800a000:	3430      	adds	r4, #48	; 0x30
 800a002:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a006:	460c      	mov	r4, r1
 800a008:	2c63      	cmp	r4, #99	; 0x63
 800a00a:	f102 32ff 	add.w	r2, r2, #4294967295
 800a00e:	4629      	mov	r1, r5
 800a010:	dcf1      	bgt.n	8009ff6 <__exponent+0x22>
 800a012:	3130      	adds	r1, #48	; 0x30
 800a014:	f1ac 0402 	sub.w	r4, ip, #2
 800a018:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a01c:	1c41      	adds	r1, r0, #1
 800a01e:	4622      	mov	r2, r4
 800a020:	42ba      	cmp	r2, r7
 800a022:	d30a      	bcc.n	800a03a <__exponent+0x66>
 800a024:	f10d 0209 	add.w	r2, sp, #9
 800a028:	eba2 020c 	sub.w	r2, r2, ip
 800a02c:	42bc      	cmp	r4, r7
 800a02e:	bf88      	it	hi
 800a030:	2200      	movhi	r2, #0
 800a032:	4413      	add	r3, r2
 800a034:	1a18      	subs	r0, r3, r0
 800a036:	b003      	add	sp, #12
 800a038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a03a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a03e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a042:	e7ed      	b.n	800a020 <__exponent+0x4c>
 800a044:	2330      	movs	r3, #48	; 0x30
 800a046:	3130      	adds	r1, #48	; 0x30
 800a048:	7083      	strb	r3, [r0, #2]
 800a04a:	70c1      	strb	r1, [r0, #3]
 800a04c:	1d03      	adds	r3, r0, #4
 800a04e:	e7f1      	b.n	800a034 <__exponent+0x60>

0800a050 <_printf_float>:
 800a050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a054:	ed2d 8b02 	vpush	{d8}
 800a058:	b08d      	sub	sp, #52	; 0x34
 800a05a:	460c      	mov	r4, r1
 800a05c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a060:	4616      	mov	r6, r2
 800a062:	461f      	mov	r7, r3
 800a064:	4605      	mov	r5, r0
 800a066:	f000 fcef 	bl	800aa48 <_localeconv_r>
 800a06a:	f8d0 a000 	ldr.w	sl, [r0]
 800a06e:	4650      	mov	r0, sl
 800a070:	f7f6 f906 	bl	8000280 <strlen>
 800a074:	2300      	movs	r3, #0
 800a076:	930a      	str	r3, [sp, #40]	; 0x28
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	9305      	str	r3, [sp, #20]
 800a07c:	f8d8 3000 	ldr.w	r3, [r8]
 800a080:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a084:	3307      	adds	r3, #7
 800a086:	f023 0307 	bic.w	r3, r3, #7
 800a08a:	f103 0208 	add.w	r2, r3, #8
 800a08e:	f8c8 2000 	str.w	r2, [r8]
 800a092:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a096:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a09a:	9307      	str	r3, [sp, #28]
 800a09c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0a0:	ee08 0a10 	vmov	s16, r0
 800a0a4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a0a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0ac:	4b9e      	ldr	r3, [pc, #632]	; (800a328 <_printf_float+0x2d8>)
 800a0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b2:	f7f6 fd43 	bl	8000b3c <__aeabi_dcmpun>
 800a0b6:	bb88      	cbnz	r0, 800a11c <_printf_float+0xcc>
 800a0b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0bc:	4b9a      	ldr	r3, [pc, #616]	; (800a328 <_printf_float+0x2d8>)
 800a0be:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c2:	f7f6 fd1d 	bl	8000b00 <__aeabi_dcmple>
 800a0c6:	bb48      	cbnz	r0, 800a11c <_printf_float+0xcc>
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	4640      	mov	r0, r8
 800a0ce:	4649      	mov	r1, r9
 800a0d0:	f7f6 fd0c 	bl	8000aec <__aeabi_dcmplt>
 800a0d4:	b110      	cbz	r0, 800a0dc <_printf_float+0x8c>
 800a0d6:	232d      	movs	r3, #45	; 0x2d
 800a0d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0dc:	4a93      	ldr	r2, [pc, #588]	; (800a32c <_printf_float+0x2dc>)
 800a0de:	4b94      	ldr	r3, [pc, #592]	; (800a330 <_printf_float+0x2e0>)
 800a0e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a0e4:	bf94      	ite	ls
 800a0e6:	4690      	movls	r8, r2
 800a0e8:	4698      	movhi	r8, r3
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	6123      	str	r3, [r4, #16]
 800a0ee:	9b05      	ldr	r3, [sp, #20]
 800a0f0:	f023 0304 	bic.w	r3, r3, #4
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	f04f 0900 	mov.w	r9, #0
 800a0fa:	9700      	str	r7, [sp, #0]
 800a0fc:	4633      	mov	r3, r6
 800a0fe:	aa0b      	add	r2, sp, #44	; 0x2c
 800a100:	4621      	mov	r1, r4
 800a102:	4628      	mov	r0, r5
 800a104:	f000 f9da 	bl	800a4bc <_printf_common>
 800a108:	3001      	adds	r0, #1
 800a10a:	f040 8090 	bne.w	800a22e <_printf_float+0x1de>
 800a10e:	f04f 30ff 	mov.w	r0, #4294967295
 800a112:	b00d      	add	sp, #52	; 0x34
 800a114:	ecbd 8b02 	vpop	{d8}
 800a118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11c:	4642      	mov	r2, r8
 800a11e:	464b      	mov	r3, r9
 800a120:	4640      	mov	r0, r8
 800a122:	4649      	mov	r1, r9
 800a124:	f7f6 fd0a 	bl	8000b3c <__aeabi_dcmpun>
 800a128:	b140      	cbz	r0, 800a13c <_printf_float+0xec>
 800a12a:	464b      	mov	r3, r9
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	bfbc      	itt	lt
 800a130:	232d      	movlt	r3, #45	; 0x2d
 800a132:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a136:	4a7f      	ldr	r2, [pc, #508]	; (800a334 <_printf_float+0x2e4>)
 800a138:	4b7f      	ldr	r3, [pc, #508]	; (800a338 <_printf_float+0x2e8>)
 800a13a:	e7d1      	b.n	800a0e0 <_printf_float+0x90>
 800a13c:	6863      	ldr	r3, [r4, #4]
 800a13e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a142:	9206      	str	r2, [sp, #24]
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	d13f      	bne.n	800a1c8 <_printf_float+0x178>
 800a148:	2306      	movs	r3, #6
 800a14a:	6063      	str	r3, [r4, #4]
 800a14c:	9b05      	ldr	r3, [sp, #20]
 800a14e:	6861      	ldr	r1, [r4, #4]
 800a150:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a154:	2300      	movs	r3, #0
 800a156:	9303      	str	r3, [sp, #12]
 800a158:	ab0a      	add	r3, sp, #40	; 0x28
 800a15a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a15e:	ab09      	add	r3, sp, #36	; 0x24
 800a160:	ec49 8b10 	vmov	d0, r8, r9
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	6022      	str	r2, [r4, #0]
 800a168:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a16c:	4628      	mov	r0, r5
 800a16e:	f7ff fecf 	bl	8009f10 <__cvt>
 800a172:	9b06      	ldr	r3, [sp, #24]
 800a174:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a176:	2b47      	cmp	r3, #71	; 0x47
 800a178:	4680      	mov	r8, r0
 800a17a:	d108      	bne.n	800a18e <_printf_float+0x13e>
 800a17c:	1cc8      	adds	r0, r1, #3
 800a17e:	db02      	blt.n	800a186 <_printf_float+0x136>
 800a180:	6863      	ldr	r3, [r4, #4]
 800a182:	4299      	cmp	r1, r3
 800a184:	dd41      	ble.n	800a20a <_printf_float+0x1ba>
 800a186:	f1ab 0302 	sub.w	r3, fp, #2
 800a18a:	fa5f fb83 	uxtb.w	fp, r3
 800a18e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a192:	d820      	bhi.n	800a1d6 <_printf_float+0x186>
 800a194:	3901      	subs	r1, #1
 800a196:	465a      	mov	r2, fp
 800a198:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a19c:	9109      	str	r1, [sp, #36]	; 0x24
 800a19e:	f7ff ff19 	bl	8009fd4 <__exponent>
 800a1a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1a4:	1813      	adds	r3, r2, r0
 800a1a6:	2a01      	cmp	r2, #1
 800a1a8:	4681      	mov	r9, r0
 800a1aa:	6123      	str	r3, [r4, #16]
 800a1ac:	dc02      	bgt.n	800a1b4 <_printf_float+0x164>
 800a1ae:	6822      	ldr	r2, [r4, #0]
 800a1b0:	07d2      	lsls	r2, r2, #31
 800a1b2:	d501      	bpl.n	800a1b8 <_printf_float+0x168>
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	6123      	str	r3, [r4, #16]
 800a1b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d09c      	beq.n	800a0fa <_printf_float+0xaa>
 800a1c0:	232d      	movs	r3, #45	; 0x2d
 800a1c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1c6:	e798      	b.n	800a0fa <_printf_float+0xaa>
 800a1c8:	9a06      	ldr	r2, [sp, #24]
 800a1ca:	2a47      	cmp	r2, #71	; 0x47
 800a1cc:	d1be      	bne.n	800a14c <_printf_float+0xfc>
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1bc      	bne.n	800a14c <_printf_float+0xfc>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e7b9      	b.n	800a14a <_printf_float+0xfa>
 800a1d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a1da:	d118      	bne.n	800a20e <_printf_float+0x1be>
 800a1dc:	2900      	cmp	r1, #0
 800a1de:	6863      	ldr	r3, [r4, #4]
 800a1e0:	dd0b      	ble.n	800a1fa <_printf_float+0x1aa>
 800a1e2:	6121      	str	r1, [r4, #16]
 800a1e4:	b913      	cbnz	r3, 800a1ec <_printf_float+0x19c>
 800a1e6:	6822      	ldr	r2, [r4, #0]
 800a1e8:	07d0      	lsls	r0, r2, #31
 800a1ea:	d502      	bpl.n	800a1f2 <_printf_float+0x1a2>
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	440b      	add	r3, r1
 800a1f0:	6123      	str	r3, [r4, #16]
 800a1f2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a1f4:	f04f 0900 	mov.w	r9, #0
 800a1f8:	e7de      	b.n	800a1b8 <_printf_float+0x168>
 800a1fa:	b913      	cbnz	r3, 800a202 <_printf_float+0x1b2>
 800a1fc:	6822      	ldr	r2, [r4, #0]
 800a1fe:	07d2      	lsls	r2, r2, #31
 800a200:	d501      	bpl.n	800a206 <_printf_float+0x1b6>
 800a202:	3302      	adds	r3, #2
 800a204:	e7f4      	b.n	800a1f0 <_printf_float+0x1a0>
 800a206:	2301      	movs	r3, #1
 800a208:	e7f2      	b.n	800a1f0 <_printf_float+0x1a0>
 800a20a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a20e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a210:	4299      	cmp	r1, r3
 800a212:	db05      	blt.n	800a220 <_printf_float+0x1d0>
 800a214:	6823      	ldr	r3, [r4, #0]
 800a216:	6121      	str	r1, [r4, #16]
 800a218:	07d8      	lsls	r0, r3, #31
 800a21a:	d5ea      	bpl.n	800a1f2 <_printf_float+0x1a2>
 800a21c:	1c4b      	adds	r3, r1, #1
 800a21e:	e7e7      	b.n	800a1f0 <_printf_float+0x1a0>
 800a220:	2900      	cmp	r1, #0
 800a222:	bfd4      	ite	le
 800a224:	f1c1 0202 	rsble	r2, r1, #2
 800a228:	2201      	movgt	r2, #1
 800a22a:	4413      	add	r3, r2
 800a22c:	e7e0      	b.n	800a1f0 <_printf_float+0x1a0>
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	055a      	lsls	r2, r3, #21
 800a232:	d407      	bmi.n	800a244 <_printf_float+0x1f4>
 800a234:	6923      	ldr	r3, [r4, #16]
 800a236:	4642      	mov	r2, r8
 800a238:	4631      	mov	r1, r6
 800a23a:	4628      	mov	r0, r5
 800a23c:	47b8      	blx	r7
 800a23e:	3001      	adds	r0, #1
 800a240:	d12c      	bne.n	800a29c <_printf_float+0x24c>
 800a242:	e764      	b.n	800a10e <_printf_float+0xbe>
 800a244:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a248:	f240 80e0 	bls.w	800a40c <_printf_float+0x3bc>
 800a24c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a250:	2200      	movs	r2, #0
 800a252:	2300      	movs	r3, #0
 800a254:	f7f6 fc40 	bl	8000ad8 <__aeabi_dcmpeq>
 800a258:	2800      	cmp	r0, #0
 800a25a:	d034      	beq.n	800a2c6 <_printf_float+0x276>
 800a25c:	4a37      	ldr	r2, [pc, #220]	; (800a33c <_printf_float+0x2ec>)
 800a25e:	2301      	movs	r3, #1
 800a260:	4631      	mov	r1, r6
 800a262:	4628      	mov	r0, r5
 800a264:	47b8      	blx	r7
 800a266:	3001      	adds	r0, #1
 800a268:	f43f af51 	beq.w	800a10e <_printf_float+0xbe>
 800a26c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a270:	429a      	cmp	r2, r3
 800a272:	db02      	blt.n	800a27a <_printf_float+0x22a>
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	07d8      	lsls	r0, r3, #31
 800a278:	d510      	bpl.n	800a29c <_printf_float+0x24c>
 800a27a:	ee18 3a10 	vmov	r3, s16
 800a27e:	4652      	mov	r2, sl
 800a280:	4631      	mov	r1, r6
 800a282:	4628      	mov	r0, r5
 800a284:	47b8      	blx	r7
 800a286:	3001      	adds	r0, #1
 800a288:	f43f af41 	beq.w	800a10e <_printf_float+0xbe>
 800a28c:	f04f 0800 	mov.w	r8, #0
 800a290:	f104 091a 	add.w	r9, r4, #26
 800a294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a296:	3b01      	subs	r3, #1
 800a298:	4543      	cmp	r3, r8
 800a29a:	dc09      	bgt.n	800a2b0 <_printf_float+0x260>
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	079b      	lsls	r3, r3, #30
 800a2a0:	f100 8107 	bmi.w	800a4b2 <_printf_float+0x462>
 800a2a4:	68e0      	ldr	r0, [r4, #12]
 800a2a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2a8:	4298      	cmp	r0, r3
 800a2aa:	bfb8      	it	lt
 800a2ac:	4618      	movlt	r0, r3
 800a2ae:	e730      	b.n	800a112 <_printf_float+0xc2>
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	464a      	mov	r2, r9
 800a2b4:	4631      	mov	r1, r6
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	47b8      	blx	r7
 800a2ba:	3001      	adds	r0, #1
 800a2bc:	f43f af27 	beq.w	800a10e <_printf_float+0xbe>
 800a2c0:	f108 0801 	add.w	r8, r8, #1
 800a2c4:	e7e6      	b.n	800a294 <_printf_float+0x244>
 800a2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	dc39      	bgt.n	800a340 <_printf_float+0x2f0>
 800a2cc:	4a1b      	ldr	r2, [pc, #108]	; (800a33c <_printf_float+0x2ec>)
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	4631      	mov	r1, r6
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	47b8      	blx	r7
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	f43f af19 	beq.w	800a10e <_printf_float+0xbe>
 800a2dc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	d102      	bne.n	800a2ea <_printf_float+0x29a>
 800a2e4:	6823      	ldr	r3, [r4, #0]
 800a2e6:	07d9      	lsls	r1, r3, #31
 800a2e8:	d5d8      	bpl.n	800a29c <_printf_float+0x24c>
 800a2ea:	ee18 3a10 	vmov	r3, s16
 800a2ee:	4652      	mov	r2, sl
 800a2f0:	4631      	mov	r1, r6
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	47b8      	blx	r7
 800a2f6:	3001      	adds	r0, #1
 800a2f8:	f43f af09 	beq.w	800a10e <_printf_float+0xbe>
 800a2fc:	f04f 0900 	mov.w	r9, #0
 800a300:	f104 0a1a 	add.w	sl, r4, #26
 800a304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a306:	425b      	negs	r3, r3
 800a308:	454b      	cmp	r3, r9
 800a30a:	dc01      	bgt.n	800a310 <_printf_float+0x2c0>
 800a30c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a30e:	e792      	b.n	800a236 <_printf_float+0x1e6>
 800a310:	2301      	movs	r3, #1
 800a312:	4652      	mov	r2, sl
 800a314:	4631      	mov	r1, r6
 800a316:	4628      	mov	r0, r5
 800a318:	47b8      	blx	r7
 800a31a:	3001      	adds	r0, #1
 800a31c:	f43f aef7 	beq.w	800a10e <_printf_float+0xbe>
 800a320:	f109 0901 	add.w	r9, r9, #1
 800a324:	e7ee      	b.n	800a304 <_printf_float+0x2b4>
 800a326:	bf00      	nop
 800a328:	7fefffff 	.word	0x7fefffff
 800a32c:	0800db20 	.word	0x0800db20
 800a330:	0800db24 	.word	0x0800db24
 800a334:	0800db28 	.word	0x0800db28
 800a338:	0800db2c 	.word	0x0800db2c
 800a33c:	0800db30 	.word	0x0800db30
 800a340:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a342:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a344:	429a      	cmp	r2, r3
 800a346:	bfa8      	it	ge
 800a348:	461a      	movge	r2, r3
 800a34a:	2a00      	cmp	r2, #0
 800a34c:	4691      	mov	r9, r2
 800a34e:	dc37      	bgt.n	800a3c0 <_printf_float+0x370>
 800a350:	f04f 0b00 	mov.w	fp, #0
 800a354:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a358:	f104 021a 	add.w	r2, r4, #26
 800a35c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a35e:	9305      	str	r3, [sp, #20]
 800a360:	eba3 0309 	sub.w	r3, r3, r9
 800a364:	455b      	cmp	r3, fp
 800a366:	dc33      	bgt.n	800a3d0 <_printf_float+0x380>
 800a368:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a36c:	429a      	cmp	r2, r3
 800a36e:	db3b      	blt.n	800a3e8 <_printf_float+0x398>
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	07da      	lsls	r2, r3, #31
 800a374:	d438      	bmi.n	800a3e8 <_printf_float+0x398>
 800a376:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a37a:	eba2 0903 	sub.w	r9, r2, r3
 800a37e:	9b05      	ldr	r3, [sp, #20]
 800a380:	1ad2      	subs	r2, r2, r3
 800a382:	4591      	cmp	r9, r2
 800a384:	bfa8      	it	ge
 800a386:	4691      	movge	r9, r2
 800a388:	f1b9 0f00 	cmp.w	r9, #0
 800a38c:	dc35      	bgt.n	800a3fa <_printf_float+0x3aa>
 800a38e:	f04f 0800 	mov.w	r8, #0
 800a392:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a396:	f104 0a1a 	add.w	sl, r4, #26
 800a39a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a39e:	1a9b      	subs	r3, r3, r2
 800a3a0:	eba3 0309 	sub.w	r3, r3, r9
 800a3a4:	4543      	cmp	r3, r8
 800a3a6:	f77f af79 	ble.w	800a29c <_printf_float+0x24c>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	4652      	mov	r2, sl
 800a3ae:	4631      	mov	r1, r6
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	47b8      	blx	r7
 800a3b4:	3001      	adds	r0, #1
 800a3b6:	f43f aeaa 	beq.w	800a10e <_printf_float+0xbe>
 800a3ba:	f108 0801 	add.w	r8, r8, #1
 800a3be:	e7ec      	b.n	800a39a <_printf_float+0x34a>
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	4631      	mov	r1, r6
 800a3c4:	4642      	mov	r2, r8
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	47b8      	blx	r7
 800a3ca:	3001      	adds	r0, #1
 800a3cc:	d1c0      	bne.n	800a350 <_printf_float+0x300>
 800a3ce:	e69e      	b.n	800a10e <_printf_float+0xbe>
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	4631      	mov	r1, r6
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	9205      	str	r2, [sp, #20]
 800a3d8:	47b8      	blx	r7
 800a3da:	3001      	adds	r0, #1
 800a3dc:	f43f ae97 	beq.w	800a10e <_printf_float+0xbe>
 800a3e0:	9a05      	ldr	r2, [sp, #20]
 800a3e2:	f10b 0b01 	add.w	fp, fp, #1
 800a3e6:	e7b9      	b.n	800a35c <_printf_float+0x30c>
 800a3e8:	ee18 3a10 	vmov	r3, s16
 800a3ec:	4652      	mov	r2, sl
 800a3ee:	4631      	mov	r1, r6
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	47b8      	blx	r7
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	d1be      	bne.n	800a376 <_printf_float+0x326>
 800a3f8:	e689      	b.n	800a10e <_printf_float+0xbe>
 800a3fa:	9a05      	ldr	r2, [sp, #20]
 800a3fc:	464b      	mov	r3, r9
 800a3fe:	4442      	add	r2, r8
 800a400:	4631      	mov	r1, r6
 800a402:	4628      	mov	r0, r5
 800a404:	47b8      	blx	r7
 800a406:	3001      	adds	r0, #1
 800a408:	d1c1      	bne.n	800a38e <_printf_float+0x33e>
 800a40a:	e680      	b.n	800a10e <_printf_float+0xbe>
 800a40c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a40e:	2a01      	cmp	r2, #1
 800a410:	dc01      	bgt.n	800a416 <_printf_float+0x3c6>
 800a412:	07db      	lsls	r3, r3, #31
 800a414:	d53a      	bpl.n	800a48c <_printf_float+0x43c>
 800a416:	2301      	movs	r3, #1
 800a418:	4642      	mov	r2, r8
 800a41a:	4631      	mov	r1, r6
 800a41c:	4628      	mov	r0, r5
 800a41e:	47b8      	blx	r7
 800a420:	3001      	adds	r0, #1
 800a422:	f43f ae74 	beq.w	800a10e <_printf_float+0xbe>
 800a426:	ee18 3a10 	vmov	r3, s16
 800a42a:	4652      	mov	r2, sl
 800a42c:	4631      	mov	r1, r6
 800a42e:	4628      	mov	r0, r5
 800a430:	47b8      	blx	r7
 800a432:	3001      	adds	r0, #1
 800a434:	f43f ae6b 	beq.w	800a10e <_printf_float+0xbe>
 800a438:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a43c:	2200      	movs	r2, #0
 800a43e:	2300      	movs	r3, #0
 800a440:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a444:	f7f6 fb48 	bl	8000ad8 <__aeabi_dcmpeq>
 800a448:	b9d8      	cbnz	r0, 800a482 <_printf_float+0x432>
 800a44a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a44e:	f108 0201 	add.w	r2, r8, #1
 800a452:	4631      	mov	r1, r6
 800a454:	4628      	mov	r0, r5
 800a456:	47b8      	blx	r7
 800a458:	3001      	adds	r0, #1
 800a45a:	d10e      	bne.n	800a47a <_printf_float+0x42a>
 800a45c:	e657      	b.n	800a10e <_printf_float+0xbe>
 800a45e:	2301      	movs	r3, #1
 800a460:	4652      	mov	r2, sl
 800a462:	4631      	mov	r1, r6
 800a464:	4628      	mov	r0, r5
 800a466:	47b8      	blx	r7
 800a468:	3001      	adds	r0, #1
 800a46a:	f43f ae50 	beq.w	800a10e <_printf_float+0xbe>
 800a46e:	f108 0801 	add.w	r8, r8, #1
 800a472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a474:	3b01      	subs	r3, #1
 800a476:	4543      	cmp	r3, r8
 800a478:	dcf1      	bgt.n	800a45e <_printf_float+0x40e>
 800a47a:	464b      	mov	r3, r9
 800a47c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a480:	e6da      	b.n	800a238 <_printf_float+0x1e8>
 800a482:	f04f 0800 	mov.w	r8, #0
 800a486:	f104 0a1a 	add.w	sl, r4, #26
 800a48a:	e7f2      	b.n	800a472 <_printf_float+0x422>
 800a48c:	2301      	movs	r3, #1
 800a48e:	4642      	mov	r2, r8
 800a490:	e7df      	b.n	800a452 <_printf_float+0x402>
 800a492:	2301      	movs	r3, #1
 800a494:	464a      	mov	r2, r9
 800a496:	4631      	mov	r1, r6
 800a498:	4628      	mov	r0, r5
 800a49a:	47b8      	blx	r7
 800a49c:	3001      	adds	r0, #1
 800a49e:	f43f ae36 	beq.w	800a10e <_printf_float+0xbe>
 800a4a2:	f108 0801 	add.w	r8, r8, #1
 800a4a6:	68e3      	ldr	r3, [r4, #12]
 800a4a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4aa:	1a5b      	subs	r3, r3, r1
 800a4ac:	4543      	cmp	r3, r8
 800a4ae:	dcf0      	bgt.n	800a492 <_printf_float+0x442>
 800a4b0:	e6f8      	b.n	800a2a4 <_printf_float+0x254>
 800a4b2:	f04f 0800 	mov.w	r8, #0
 800a4b6:	f104 0919 	add.w	r9, r4, #25
 800a4ba:	e7f4      	b.n	800a4a6 <_printf_float+0x456>

0800a4bc <_printf_common>:
 800a4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c0:	4616      	mov	r6, r2
 800a4c2:	4699      	mov	r9, r3
 800a4c4:	688a      	ldr	r2, [r1, #8]
 800a4c6:	690b      	ldr	r3, [r1, #16]
 800a4c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	bfb8      	it	lt
 800a4d0:	4613      	movlt	r3, r2
 800a4d2:	6033      	str	r3, [r6, #0]
 800a4d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4d8:	4607      	mov	r7, r0
 800a4da:	460c      	mov	r4, r1
 800a4dc:	b10a      	cbz	r2, 800a4e2 <_printf_common+0x26>
 800a4de:	3301      	adds	r3, #1
 800a4e0:	6033      	str	r3, [r6, #0]
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	0699      	lsls	r1, r3, #26
 800a4e6:	bf42      	ittt	mi
 800a4e8:	6833      	ldrmi	r3, [r6, #0]
 800a4ea:	3302      	addmi	r3, #2
 800a4ec:	6033      	strmi	r3, [r6, #0]
 800a4ee:	6825      	ldr	r5, [r4, #0]
 800a4f0:	f015 0506 	ands.w	r5, r5, #6
 800a4f4:	d106      	bne.n	800a504 <_printf_common+0x48>
 800a4f6:	f104 0a19 	add.w	sl, r4, #25
 800a4fa:	68e3      	ldr	r3, [r4, #12]
 800a4fc:	6832      	ldr	r2, [r6, #0]
 800a4fe:	1a9b      	subs	r3, r3, r2
 800a500:	42ab      	cmp	r3, r5
 800a502:	dc26      	bgt.n	800a552 <_printf_common+0x96>
 800a504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a508:	1e13      	subs	r3, r2, #0
 800a50a:	6822      	ldr	r2, [r4, #0]
 800a50c:	bf18      	it	ne
 800a50e:	2301      	movne	r3, #1
 800a510:	0692      	lsls	r2, r2, #26
 800a512:	d42b      	bmi.n	800a56c <_printf_common+0xb0>
 800a514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a518:	4649      	mov	r1, r9
 800a51a:	4638      	mov	r0, r7
 800a51c:	47c0      	blx	r8
 800a51e:	3001      	adds	r0, #1
 800a520:	d01e      	beq.n	800a560 <_printf_common+0xa4>
 800a522:	6823      	ldr	r3, [r4, #0]
 800a524:	6922      	ldr	r2, [r4, #16]
 800a526:	f003 0306 	and.w	r3, r3, #6
 800a52a:	2b04      	cmp	r3, #4
 800a52c:	bf02      	ittt	eq
 800a52e:	68e5      	ldreq	r5, [r4, #12]
 800a530:	6833      	ldreq	r3, [r6, #0]
 800a532:	1aed      	subeq	r5, r5, r3
 800a534:	68a3      	ldr	r3, [r4, #8]
 800a536:	bf0c      	ite	eq
 800a538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a53c:	2500      	movne	r5, #0
 800a53e:	4293      	cmp	r3, r2
 800a540:	bfc4      	itt	gt
 800a542:	1a9b      	subgt	r3, r3, r2
 800a544:	18ed      	addgt	r5, r5, r3
 800a546:	2600      	movs	r6, #0
 800a548:	341a      	adds	r4, #26
 800a54a:	42b5      	cmp	r5, r6
 800a54c:	d11a      	bne.n	800a584 <_printf_common+0xc8>
 800a54e:	2000      	movs	r0, #0
 800a550:	e008      	b.n	800a564 <_printf_common+0xa8>
 800a552:	2301      	movs	r3, #1
 800a554:	4652      	mov	r2, sl
 800a556:	4649      	mov	r1, r9
 800a558:	4638      	mov	r0, r7
 800a55a:	47c0      	blx	r8
 800a55c:	3001      	adds	r0, #1
 800a55e:	d103      	bne.n	800a568 <_printf_common+0xac>
 800a560:	f04f 30ff 	mov.w	r0, #4294967295
 800a564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a568:	3501      	adds	r5, #1
 800a56a:	e7c6      	b.n	800a4fa <_printf_common+0x3e>
 800a56c:	18e1      	adds	r1, r4, r3
 800a56e:	1c5a      	adds	r2, r3, #1
 800a570:	2030      	movs	r0, #48	; 0x30
 800a572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a576:	4422      	add	r2, r4
 800a578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a57c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a580:	3302      	adds	r3, #2
 800a582:	e7c7      	b.n	800a514 <_printf_common+0x58>
 800a584:	2301      	movs	r3, #1
 800a586:	4622      	mov	r2, r4
 800a588:	4649      	mov	r1, r9
 800a58a:	4638      	mov	r0, r7
 800a58c:	47c0      	blx	r8
 800a58e:	3001      	adds	r0, #1
 800a590:	d0e6      	beq.n	800a560 <_printf_common+0xa4>
 800a592:	3601      	adds	r6, #1
 800a594:	e7d9      	b.n	800a54a <_printf_common+0x8e>
	...

0800a598 <_printf_i>:
 800a598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a59c:	7e0f      	ldrb	r7, [r1, #24]
 800a59e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a5a0:	2f78      	cmp	r7, #120	; 0x78
 800a5a2:	4691      	mov	r9, r2
 800a5a4:	4680      	mov	r8, r0
 800a5a6:	460c      	mov	r4, r1
 800a5a8:	469a      	mov	sl, r3
 800a5aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a5ae:	d807      	bhi.n	800a5c0 <_printf_i+0x28>
 800a5b0:	2f62      	cmp	r7, #98	; 0x62
 800a5b2:	d80a      	bhi.n	800a5ca <_printf_i+0x32>
 800a5b4:	2f00      	cmp	r7, #0
 800a5b6:	f000 80d4 	beq.w	800a762 <_printf_i+0x1ca>
 800a5ba:	2f58      	cmp	r7, #88	; 0x58
 800a5bc:	f000 80c0 	beq.w	800a740 <_printf_i+0x1a8>
 800a5c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5c8:	e03a      	b.n	800a640 <_printf_i+0xa8>
 800a5ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5ce:	2b15      	cmp	r3, #21
 800a5d0:	d8f6      	bhi.n	800a5c0 <_printf_i+0x28>
 800a5d2:	a101      	add	r1, pc, #4	; (adr r1, 800a5d8 <_printf_i+0x40>)
 800a5d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5d8:	0800a631 	.word	0x0800a631
 800a5dc:	0800a645 	.word	0x0800a645
 800a5e0:	0800a5c1 	.word	0x0800a5c1
 800a5e4:	0800a5c1 	.word	0x0800a5c1
 800a5e8:	0800a5c1 	.word	0x0800a5c1
 800a5ec:	0800a5c1 	.word	0x0800a5c1
 800a5f0:	0800a645 	.word	0x0800a645
 800a5f4:	0800a5c1 	.word	0x0800a5c1
 800a5f8:	0800a5c1 	.word	0x0800a5c1
 800a5fc:	0800a5c1 	.word	0x0800a5c1
 800a600:	0800a5c1 	.word	0x0800a5c1
 800a604:	0800a749 	.word	0x0800a749
 800a608:	0800a671 	.word	0x0800a671
 800a60c:	0800a703 	.word	0x0800a703
 800a610:	0800a5c1 	.word	0x0800a5c1
 800a614:	0800a5c1 	.word	0x0800a5c1
 800a618:	0800a76b 	.word	0x0800a76b
 800a61c:	0800a5c1 	.word	0x0800a5c1
 800a620:	0800a671 	.word	0x0800a671
 800a624:	0800a5c1 	.word	0x0800a5c1
 800a628:	0800a5c1 	.word	0x0800a5c1
 800a62c:	0800a70b 	.word	0x0800a70b
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	1d1a      	adds	r2, r3, #4
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	602a      	str	r2, [r5, #0]
 800a638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a63c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a640:	2301      	movs	r3, #1
 800a642:	e09f      	b.n	800a784 <_printf_i+0x1ec>
 800a644:	6820      	ldr	r0, [r4, #0]
 800a646:	682b      	ldr	r3, [r5, #0]
 800a648:	0607      	lsls	r7, r0, #24
 800a64a:	f103 0104 	add.w	r1, r3, #4
 800a64e:	6029      	str	r1, [r5, #0]
 800a650:	d501      	bpl.n	800a656 <_printf_i+0xbe>
 800a652:	681e      	ldr	r6, [r3, #0]
 800a654:	e003      	b.n	800a65e <_printf_i+0xc6>
 800a656:	0646      	lsls	r6, r0, #25
 800a658:	d5fb      	bpl.n	800a652 <_printf_i+0xba>
 800a65a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a65e:	2e00      	cmp	r6, #0
 800a660:	da03      	bge.n	800a66a <_printf_i+0xd2>
 800a662:	232d      	movs	r3, #45	; 0x2d
 800a664:	4276      	negs	r6, r6
 800a666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a66a:	485a      	ldr	r0, [pc, #360]	; (800a7d4 <_printf_i+0x23c>)
 800a66c:	230a      	movs	r3, #10
 800a66e:	e012      	b.n	800a696 <_printf_i+0xfe>
 800a670:	682b      	ldr	r3, [r5, #0]
 800a672:	6820      	ldr	r0, [r4, #0]
 800a674:	1d19      	adds	r1, r3, #4
 800a676:	6029      	str	r1, [r5, #0]
 800a678:	0605      	lsls	r5, r0, #24
 800a67a:	d501      	bpl.n	800a680 <_printf_i+0xe8>
 800a67c:	681e      	ldr	r6, [r3, #0]
 800a67e:	e002      	b.n	800a686 <_printf_i+0xee>
 800a680:	0641      	lsls	r1, r0, #25
 800a682:	d5fb      	bpl.n	800a67c <_printf_i+0xe4>
 800a684:	881e      	ldrh	r6, [r3, #0]
 800a686:	4853      	ldr	r0, [pc, #332]	; (800a7d4 <_printf_i+0x23c>)
 800a688:	2f6f      	cmp	r7, #111	; 0x6f
 800a68a:	bf0c      	ite	eq
 800a68c:	2308      	moveq	r3, #8
 800a68e:	230a      	movne	r3, #10
 800a690:	2100      	movs	r1, #0
 800a692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a696:	6865      	ldr	r5, [r4, #4]
 800a698:	60a5      	str	r5, [r4, #8]
 800a69a:	2d00      	cmp	r5, #0
 800a69c:	bfa2      	ittt	ge
 800a69e:	6821      	ldrge	r1, [r4, #0]
 800a6a0:	f021 0104 	bicge.w	r1, r1, #4
 800a6a4:	6021      	strge	r1, [r4, #0]
 800a6a6:	b90e      	cbnz	r6, 800a6ac <_printf_i+0x114>
 800a6a8:	2d00      	cmp	r5, #0
 800a6aa:	d04b      	beq.n	800a744 <_printf_i+0x1ac>
 800a6ac:	4615      	mov	r5, r2
 800a6ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800a6b2:	fb03 6711 	mls	r7, r3, r1, r6
 800a6b6:	5dc7      	ldrb	r7, [r0, r7]
 800a6b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a6bc:	4637      	mov	r7, r6
 800a6be:	42bb      	cmp	r3, r7
 800a6c0:	460e      	mov	r6, r1
 800a6c2:	d9f4      	bls.n	800a6ae <_printf_i+0x116>
 800a6c4:	2b08      	cmp	r3, #8
 800a6c6:	d10b      	bne.n	800a6e0 <_printf_i+0x148>
 800a6c8:	6823      	ldr	r3, [r4, #0]
 800a6ca:	07de      	lsls	r6, r3, #31
 800a6cc:	d508      	bpl.n	800a6e0 <_printf_i+0x148>
 800a6ce:	6923      	ldr	r3, [r4, #16]
 800a6d0:	6861      	ldr	r1, [r4, #4]
 800a6d2:	4299      	cmp	r1, r3
 800a6d4:	bfde      	ittt	le
 800a6d6:	2330      	movle	r3, #48	; 0x30
 800a6d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6e0:	1b52      	subs	r2, r2, r5
 800a6e2:	6122      	str	r2, [r4, #16]
 800a6e4:	f8cd a000 	str.w	sl, [sp]
 800a6e8:	464b      	mov	r3, r9
 800a6ea:	aa03      	add	r2, sp, #12
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	4640      	mov	r0, r8
 800a6f0:	f7ff fee4 	bl	800a4bc <_printf_common>
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	d14a      	bne.n	800a78e <_printf_i+0x1f6>
 800a6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6fc:	b004      	add	sp, #16
 800a6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	f043 0320 	orr.w	r3, r3, #32
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	4833      	ldr	r0, [pc, #204]	; (800a7d8 <_printf_i+0x240>)
 800a70c:	2778      	movs	r7, #120	; 0x78
 800a70e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a712:	6823      	ldr	r3, [r4, #0]
 800a714:	6829      	ldr	r1, [r5, #0]
 800a716:	061f      	lsls	r7, r3, #24
 800a718:	f851 6b04 	ldr.w	r6, [r1], #4
 800a71c:	d402      	bmi.n	800a724 <_printf_i+0x18c>
 800a71e:	065f      	lsls	r7, r3, #25
 800a720:	bf48      	it	mi
 800a722:	b2b6      	uxthmi	r6, r6
 800a724:	07df      	lsls	r7, r3, #31
 800a726:	bf48      	it	mi
 800a728:	f043 0320 	orrmi.w	r3, r3, #32
 800a72c:	6029      	str	r1, [r5, #0]
 800a72e:	bf48      	it	mi
 800a730:	6023      	strmi	r3, [r4, #0]
 800a732:	b91e      	cbnz	r6, 800a73c <_printf_i+0x1a4>
 800a734:	6823      	ldr	r3, [r4, #0]
 800a736:	f023 0320 	bic.w	r3, r3, #32
 800a73a:	6023      	str	r3, [r4, #0]
 800a73c:	2310      	movs	r3, #16
 800a73e:	e7a7      	b.n	800a690 <_printf_i+0xf8>
 800a740:	4824      	ldr	r0, [pc, #144]	; (800a7d4 <_printf_i+0x23c>)
 800a742:	e7e4      	b.n	800a70e <_printf_i+0x176>
 800a744:	4615      	mov	r5, r2
 800a746:	e7bd      	b.n	800a6c4 <_printf_i+0x12c>
 800a748:	682b      	ldr	r3, [r5, #0]
 800a74a:	6826      	ldr	r6, [r4, #0]
 800a74c:	6961      	ldr	r1, [r4, #20]
 800a74e:	1d18      	adds	r0, r3, #4
 800a750:	6028      	str	r0, [r5, #0]
 800a752:	0635      	lsls	r5, r6, #24
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	d501      	bpl.n	800a75c <_printf_i+0x1c4>
 800a758:	6019      	str	r1, [r3, #0]
 800a75a:	e002      	b.n	800a762 <_printf_i+0x1ca>
 800a75c:	0670      	lsls	r0, r6, #25
 800a75e:	d5fb      	bpl.n	800a758 <_printf_i+0x1c0>
 800a760:	8019      	strh	r1, [r3, #0]
 800a762:	2300      	movs	r3, #0
 800a764:	6123      	str	r3, [r4, #16]
 800a766:	4615      	mov	r5, r2
 800a768:	e7bc      	b.n	800a6e4 <_printf_i+0x14c>
 800a76a:	682b      	ldr	r3, [r5, #0]
 800a76c:	1d1a      	adds	r2, r3, #4
 800a76e:	602a      	str	r2, [r5, #0]
 800a770:	681d      	ldr	r5, [r3, #0]
 800a772:	6862      	ldr	r2, [r4, #4]
 800a774:	2100      	movs	r1, #0
 800a776:	4628      	mov	r0, r5
 800a778:	f7f5 fd32 	bl	80001e0 <memchr>
 800a77c:	b108      	cbz	r0, 800a782 <_printf_i+0x1ea>
 800a77e:	1b40      	subs	r0, r0, r5
 800a780:	6060      	str	r0, [r4, #4]
 800a782:	6863      	ldr	r3, [r4, #4]
 800a784:	6123      	str	r3, [r4, #16]
 800a786:	2300      	movs	r3, #0
 800a788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a78c:	e7aa      	b.n	800a6e4 <_printf_i+0x14c>
 800a78e:	6923      	ldr	r3, [r4, #16]
 800a790:	462a      	mov	r2, r5
 800a792:	4649      	mov	r1, r9
 800a794:	4640      	mov	r0, r8
 800a796:	47d0      	blx	sl
 800a798:	3001      	adds	r0, #1
 800a79a:	d0ad      	beq.n	800a6f8 <_printf_i+0x160>
 800a79c:	6823      	ldr	r3, [r4, #0]
 800a79e:	079b      	lsls	r3, r3, #30
 800a7a0:	d413      	bmi.n	800a7ca <_printf_i+0x232>
 800a7a2:	68e0      	ldr	r0, [r4, #12]
 800a7a4:	9b03      	ldr	r3, [sp, #12]
 800a7a6:	4298      	cmp	r0, r3
 800a7a8:	bfb8      	it	lt
 800a7aa:	4618      	movlt	r0, r3
 800a7ac:	e7a6      	b.n	800a6fc <_printf_i+0x164>
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	4632      	mov	r2, r6
 800a7b2:	4649      	mov	r1, r9
 800a7b4:	4640      	mov	r0, r8
 800a7b6:	47d0      	blx	sl
 800a7b8:	3001      	adds	r0, #1
 800a7ba:	d09d      	beq.n	800a6f8 <_printf_i+0x160>
 800a7bc:	3501      	adds	r5, #1
 800a7be:	68e3      	ldr	r3, [r4, #12]
 800a7c0:	9903      	ldr	r1, [sp, #12]
 800a7c2:	1a5b      	subs	r3, r3, r1
 800a7c4:	42ab      	cmp	r3, r5
 800a7c6:	dcf2      	bgt.n	800a7ae <_printf_i+0x216>
 800a7c8:	e7eb      	b.n	800a7a2 <_printf_i+0x20a>
 800a7ca:	2500      	movs	r5, #0
 800a7cc:	f104 0619 	add.w	r6, r4, #25
 800a7d0:	e7f5      	b.n	800a7be <_printf_i+0x226>
 800a7d2:	bf00      	nop
 800a7d4:	0800db32 	.word	0x0800db32
 800a7d8:	0800db43 	.word	0x0800db43

0800a7dc <std>:
 800a7dc:	2300      	movs	r3, #0
 800a7de:	b510      	push	{r4, lr}
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	e9c0 3300 	strd	r3, r3, [r0]
 800a7e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7ea:	6083      	str	r3, [r0, #8]
 800a7ec:	8181      	strh	r1, [r0, #12]
 800a7ee:	6643      	str	r3, [r0, #100]	; 0x64
 800a7f0:	81c2      	strh	r2, [r0, #14]
 800a7f2:	6183      	str	r3, [r0, #24]
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	2208      	movs	r2, #8
 800a7f8:	305c      	adds	r0, #92	; 0x5c
 800a7fa:	f000 f91c 	bl	800aa36 <memset>
 800a7fe:	4b05      	ldr	r3, [pc, #20]	; (800a814 <std+0x38>)
 800a800:	6263      	str	r3, [r4, #36]	; 0x24
 800a802:	4b05      	ldr	r3, [pc, #20]	; (800a818 <std+0x3c>)
 800a804:	62a3      	str	r3, [r4, #40]	; 0x28
 800a806:	4b05      	ldr	r3, [pc, #20]	; (800a81c <std+0x40>)
 800a808:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a80a:	4b05      	ldr	r3, [pc, #20]	; (800a820 <std+0x44>)
 800a80c:	6224      	str	r4, [r4, #32]
 800a80e:	6323      	str	r3, [r4, #48]	; 0x30
 800a810:	bd10      	pop	{r4, pc}
 800a812:	bf00      	nop
 800a814:	0800a97d 	.word	0x0800a97d
 800a818:	0800a99f 	.word	0x0800a99f
 800a81c:	0800a9d7 	.word	0x0800a9d7
 800a820:	0800a9fb 	.word	0x0800a9fb

0800a824 <stdio_exit_handler>:
 800a824:	4a02      	ldr	r2, [pc, #8]	; (800a830 <stdio_exit_handler+0xc>)
 800a826:	4903      	ldr	r1, [pc, #12]	; (800a834 <stdio_exit_handler+0x10>)
 800a828:	4803      	ldr	r0, [pc, #12]	; (800a838 <stdio_exit_handler+0x14>)
 800a82a:	f000 b869 	b.w	800a900 <_fwalk_sglue>
 800a82e:	bf00      	nop
 800a830:	2000019c 	.word	0x2000019c
 800a834:	0800c4f9 	.word	0x0800c4f9
 800a838:	200001a8 	.word	0x200001a8

0800a83c <cleanup_stdio>:
 800a83c:	6841      	ldr	r1, [r0, #4]
 800a83e:	4b0c      	ldr	r3, [pc, #48]	; (800a870 <cleanup_stdio+0x34>)
 800a840:	4299      	cmp	r1, r3
 800a842:	b510      	push	{r4, lr}
 800a844:	4604      	mov	r4, r0
 800a846:	d001      	beq.n	800a84c <cleanup_stdio+0x10>
 800a848:	f001 fe56 	bl	800c4f8 <_fflush_r>
 800a84c:	68a1      	ldr	r1, [r4, #8]
 800a84e:	4b09      	ldr	r3, [pc, #36]	; (800a874 <cleanup_stdio+0x38>)
 800a850:	4299      	cmp	r1, r3
 800a852:	d002      	beq.n	800a85a <cleanup_stdio+0x1e>
 800a854:	4620      	mov	r0, r4
 800a856:	f001 fe4f 	bl	800c4f8 <_fflush_r>
 800a85a:	68e1      	ldr	r1, [r4, #12]
 800a85c:	4b06      	ldr	r3, [pc, #24]	; (800a878 <cleanup_stdio+0x3c>)
 800a85e:	4299      	cmp	r1, r3
 800a860:	d004      	beq.n	800a86c <cleanup_stdio+0x30>
 800a862:	4620      	mov	r0, r4
 800a864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a868:	f001 be46 	b.w	800c4f8 <_fflush_r>
 800a86c:	bd10      	pop	{r4, pc}
 800a86e:	bf00      	nop
 800a870:	20002888 	.word	0x20002888
 800a874:	200028f0 	.word	0x200028f0
 800a878:	20002958 	.word	0x20002958

0800a87c <global_stdio_init.part.0>:
 800a87c:	b510      	push	{r4, lr}
 800a87e:	4b0b      	ldr	r3, [pc, #44]	; (800a8ac <global_stdio_init.part.0+0x30>)
 800a880:	4c0b      	ldr	r4, [pc, #44]	; (800a8b0 <global_stdio_init.part.0+0x34>)
 800a882:	4a0c      	ldr	r2, [pc, #48]	; (800a8b4 <global_stdio_init.part.0+0x38>)
 800a884:	601a      	str	r2, [r3, #0]
 800a886:	4620      	mov	r0, r4
 800a888:	2200      	movs	r2, #0
 800a88a:	2104      	movs	r1, #4
 800a88c:	f7ff ffa6 	bl	800a7dc <std>
 800a890:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a894:	2201      	movs	r2, #1
 800a896:	2109      	movs	r1, #9
 800a898:	f7ff ffa0 	bl	800a7dc <std>
 800a89c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a8a0:	2202      	movs	r2, #2
 800a8a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8a6:	2112      	movs	r1, #18
 800a8a8:	f7ff bf98 	b.w	800a7dc <std>
 800a8ac:	200029c0 	.word	0x200029c0
 800a8b0:	20002888 	.word	0x20002888
 800a8b4:	0800a825 	.word	0x0800a825

0800a8b8 <__sfp_lock_acquire>:
 800a8b8:	4801      	ldr	r0, [pc, #4]	; (800a8c0 <__sfp_lock_acquire+0x8>)
 800a8ba:	f000 b939 	b.w	800ab30 <__retarget_lock_acquire_recursive>
 800a8be:	bf00      	nop
 800a8c0:	200029c9 	.word	0x200029c9

0800a8c4 <__sfp_lock_release>:
 800a8c4:	4801      	ldr	r0, [pc, #4]	; (800a8cc <__sfp_lock_release+0x8>)
 800a8c6:	f000 b934 	b.w	800ab32 <__retarget_lock_release_recursive>
 800a8ca:	bf00      	nop
 800a8cc:	200029c9 	.word	0x200029c9

0800a8d0 <__sinit>:
 800a8d0:	b510      	push	{r4, lr}
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	f7ff fff0 	bl	800a8b8 <__sfp_lock_acquire>
 800a8d8:	6a23      	ldr	r3, [r4, #32]
 800a8da:	b11b      	cbz	r3, 800a8e4 <__sinit+0x14>
 800a8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8e0:	f7ff bff0 	b.w	800a8c4 <__sfp_lock_release>
 800a8e4:	4b04      	ldr	r3, [pc, #16]	; (800a8f8 <__sinit+0x28>)
 800a8e6:	6223      	str	r3, [r4, #32]
 800a8e8:	4b04      	ldr	r3, [pc, #16]	; (800a8fc <__sinit+0x2c>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1f5      	bne.n	800a8dc <__sinit+0xc>
 800a8f0:	f7ff ffc4 	bl	800a87c <global_stdio_init.part.0>
 800a8f4:	e7f2      	b.n	800a8dc <__sinit+0xc>
 800a8f6:	bf00      	nop
 800a8f8:	0800a83d 	.word	0x0800a83d
 800a8fc:	200029c0 	.word	0x200029c0

0800a900 <_fwalk_sglue>:
 800a900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a904:	4607      	mov	r7, r0
 800a906:	4688      	mov	r8, r1
 800a908:	4614      	mov	r4, r2
 800a90a:	2600      	movs	r6, #0
 800a90c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a910:	f1b9 0901 	subs.w	r9, r9, #1
 800a914:	d505      	bpl.n	800a922 <_fwalk_sglue+0x22>
 800a916:	6824      	ldr	r4, [r4, #0]
 800a918:	2c00      	cmp	r4, #0
 800a91a:	d1f7      	bne.n	800a90c <_fwalk_sglue+0xc>
 800a91c:	4630      	mov	r0, r6
 800a91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a922:	89ab      	ldrh	r3, [r5, #12]
 800a924:	2b01      	cmp	r3, #1
 800a926:	d907      	bls.n	800a938 <_fwalk_sglue+0x38>
 800a928:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a92c:	3301      	adds	r3, #1
 800a92e:	d003      	beq.n	800a938 <_fwalk_sglue+0x38>
 800a930:	4629      	mov	r1, r5
 800a932:	4638      	mov	r0, r7
 800a934:	47c0      	blx	r8
 800a936:	4306      	orrs	r6, r0
 800a938:	3568      	adds	r5, #104	; 0x68
 800a93a:	e7e9      	b.n	800a910 <_fwalk_sglue+0x10>

0800a93c <siprintf>:
 800a93c:	b40e      	push	{r1, r2, r3}
 800a93e:	b500      	push	{lr}
 800a940:	b09c      	sub	sp, #112	; 0x70
 800a942:	ab1d      	add	r3, sp, #116	; 0x74
 800a944:	9002      	str	r0, [sp, #8]
 800a946:	9006      	str	r0, [sp, #24]
 800a948:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a94c:	4809      	ldr	r0, [pc, #36]	; (800a974 <siprintf+0x38>)
 800a94e:	9107      	str	r1, [sp, #28]
 800a950:	9104      	str	r1, [sp, #16]
 800a952:	4909      	ldr	r1, [pc, #36]	; (800a978 <siprintf+0x3c>)
 800a954:	f853 2b04 	ldr.w	r2, [r3], #4
 800a958:	9105      	str	r1, [sp, #20]
 800a95a:	6800      	ldr	r0, [r0, #0]
 800a95c:	9301      	str	r3, [sp, #4]
 800a95e:	a902      	add	r1, sp, #8
 800a960:	f001 fc46 	bl	800c1f0 <_svfiprintf_r>
 800a964:	9b02      	ldr	r3, [sp, #8]
 800a966:	2200      	movs	r2, #0
 800a968:	701a      	strb	r2, [r3, #0]
 800a96a:	b01c      	add	sp, #112	; 0x70
 800a96c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a970:	b003      	add	sp, #12
 800a972:	4770      	bx	lr
 800a974:	200001f4 	.word	0x200001f4
 800a978:	ffff0208 	.word	0xffff0208

0800a97c <__sread>:
 800a97c:	b510      	push	{r4, lr}
 800a97e:	460c      	mov	r4, r1
 800a980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a984:	f000 f886 	bl	800aa94 <_read_r>
 800a988:	2800      	cmp	r0, #0
 800a98a:	bfab      	itete	ge
 800a98c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a98e:	89a3      	ldrhlt	r3, [r4, #12]
 800a990:	181b      	addge	r3, r3, r0
 800a992:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a996:	bfac      	ite	ge
 800a998:	6563      	strge	r3, [r4, #84]	; 0x54
 800a99a:	81a3      	strhlt	r3, [r4, #12]
 800a99c:	bd10      	pop	{r4, pc}

0800a99e <__swrite>:
 800a99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a2:	461f      	mov	r7, r3
 800a9a4:	898b      	ldrh	r3, [r1, #12]
 800a9a6:	05db      	lsls	r3, r3, #23
 800a9a8:	4605      	mov	r5, r0
 800a9aa:	460c      	mov	r4, r1
 800a9ac:	4616      	mov	r6, r2
 800a9ae:	d505      	bpl.n	800a9bc <__swrite+0x1e>
 800a9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b4:	2302      	movs	r3, #2
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f000 f85a 	bl	800aa70 <_lseek_r>
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9c6:	81a3      	strh	r3, [r4, #12]
 800a9c8:	4632      	mov	r2, r6
 800a9ca:	463b      	mov	r3, r7
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d2:	f000 b871 	b.w	800aab8 <_write_r>

0800a9d6 <__sseek>:
 800a9d6:	b510      	push	{r4, lr}
 800a9d8:	460c      	mov	r4, r1
 800a9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9de:	f000 f847 	bl	800aa70 <_lseek_r>
 800a9e2:	1c43      	adds	r3, r0, #1
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	bf15      	itete	ne
 800a9e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9f2:	81a3      	strheq	r3, [r4, #12]
 800a9f4:	bf18      	it	ne
 800a9f6:	81a3      	strhne	r3, [r4, #12]
 800a9f8:	bd10      	pop	{r4, pc}

0800a9fa <__sclose>:
 800a9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9fe:	f000 b827 	b.w	800aa50 <_close_r>

0800aa02 <memmove>:
 800aa02:	4288      	cmp	r0, r1
 800aa04:	b510      	push	{r4, lr}
 800aa06:	eb01 0402 	add.w	r4, r1, r2
 800aa0a:	d902      	bls.n	800aa12 <memmove+0x10>
 800aa0c:	4284      	cmp	r4, r0
 800aa0e:	4623      	mov	r3, r4
 800aa10:	d807      	bhi.n	800aa22 <memmove+0x20>
 800aa12:	1e43      	subs	r3, r0, #1
 800aa14:	42a1      	cmp	r1, r4
 800aa16:	d008      	beq.n	800aa2a <memmove+0x28>
 800aa18:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa1c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa20:	e7f8      	b.n	800aa14 <memmove+0x12>
 800aa22:	4402      	add	r2, r0
 800aa24:	4601      	mov	r1, r0
 800aa26:	428a      	cmp	r2, r1
 800aa28:	d100      	bne.n	800aa2c <memmove+0x2a>
 800aa2a:	bd10      	pop	{r4, pc}
 800aa2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa30:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa34:	e7f7      	b.n	800aa26 <memmove+0x24>

0800aa36 <memset>:
 800aa36:	4402      	add	r2, r0
 800aa38:	4603      	mov	r3, r0
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d100      	bne.n	800aa40 <memset+0xa>
 800aa3e:	4770      	bx	lr
 800aa40:	f803 1b01 	strb.w	r1, [r3], #1
 800aa44:	e7f9      	b.n	800aa3a <memset+0x4>
	...

0800aa48 <_localeconv_r>:
 800aa48:	4800      	ldr	r0, [pc, #0]	; (800aa4c <_localeconv_r+0x4>)
 800aa4a:	4770      	bx	lr
 800aa4c:	200002e8 	.word	0x200002e8

0800aa50 <_close_r>:
 800aa50:	b538      	push	{r3, r4, r5, lr}
 800aa52:	4d06      	ldr	r5, [pc, #24]	; (800aa6c <_close_r+0x1c>)
 800aa54:	2300      	movs	r3, #0
 800aa56:	4604      	mov	r4, r0
 800aa58:	4608      	mov	r0, r1
 800aa5a:	602b      	str	r3, [r5, #0]
 800aa5c:	f7f7 fdb1 	bl	80025c2 <_close>
 800aa60:	1c43      	adds	r3, r0, #1
 800aa62:	d102      	bne.n	800aa6a <_close_r+0x1a>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	b103      	cbz	r3, 800aa6a <_close_r+0x1a>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	200029c4 	.word	0x200029c4

0800aa70 <_lseek_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4d07      	ldr	r5, [pc, #28]	; (800aa90 <_lseek_r+0x20>)
 800aa74:	4604      	mov	r4, r0
 800aa76:	4608      	mov	r0, r1
 800aa78:	4611      	mov	r1, r2
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	602a      	str	r2, [r5, #0]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	f7f7 fdc6 	bl	8002610 <_lseek>
 800aa84:	1c43      	adds	r3, r0, #1
 800aa86:	d102      	bne.n	800aa8e <_lseek_r+0x1e>
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	b103      	cbz	r3, 800aa8e <_lseek_r+0x1e>
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	bd38      	pop	{r3, r4, r5, pc}
 800aa90:	200029c4 	.word	0x200029c4

0800aa94 <_read_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d07      	ldr	r5, [pc, #28]	; (800aab4 <_read_r+0x20>)
 800aa98:	4604      	mov	r4, r0
 800aa9a:	4608      	mov	r0, r1
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	602a      	str	r2, [r5, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f7f7 fd54 	bl	8002550 <_read>
 800aaa8:	1c43      	adds	r3, r0, #1
 800aaaa:	d102      	bne.n	800aab2 <_read_r+0x1e>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	b103      	cbz	r3, 800aab2 <_read_r+0x1e>
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	bd38      	pop	{r3, r4, r5, pc}
 800aab4:	200029c4 	.word	0x200029c4

0800aab8 <_write_r>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	4d07      	ldr	r5, [pc, #28]	; (800aad8 <_write_r+0x20>)
 800aabc:	4604      	mov	r4, r0
 800aabe:	4608      	mov	r0, r1
 800aac0:	4611      	mov	r1, r2
 800aac2:	2200      	movs	r2, #0
 800aac4:	602a      	str	r2, [r5, #0]
 800aac6:	461a      	mov	r2, r3
 800aac8:	f7f7 fd5f 	bl	800258a <_write>
 800aacc:	1c43      	adds	r3, r0, #1
 800aace:	d102      	bne.n	800aad6 <_write_r+0x1e>
 800aad0:	682b      	ldr	r3, [r5, #0]
 800aad2:	b103      	cbz	r3, 800aad6 <_write_r+0x1e>
 800aad4:	6023      	str	r3, [r4, #0]
 800aad6:	bd38      	pop	{r3, r4, r5, pc}
 800aad8:	200029c4 	.word	0x200029c4

0800aadc <__errno>:
 800aadc:	4b01      	ldr	r3, [pc, #4]	; (800aae4 <__errno+0x8>)
 800aade:	6818      	ldr	r0, [r3, #0]
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	200001f4 	.word	0x200001f4

0800aae8 <__libc_init_array>:
 800aae8:	b570      	push	{r4, r5, r6, lr}
 800aaea:	4d0d      	ldr	r5, [pc, #52]	; (800ab20 <__libc_init_array+0x38>)
 800aaec:	4c0d      	ldr	r4, [pc, #52]	; (800ab24 <__libc_init_array+0x3c>)
 800aaee:	1b64      	subs	r4, r4, r5
 800aaf0:	10a4      	asrs	r4, r4, #2
 800aaf2:	2600      	movs	r6, #0
 800aaf4:	42a6      	cmp	r6, r4
 800aaf6:	d109      	bne.n	800ab0c <__libc_init_array+0x24>
 800aaf8:	4d0b      	ldr	r5, [pc, #44]	; (800ab28 <__libc_init_array+0x40>)
 800aafa:	4c0c      	ldr	r4, [pc, #48]	; (800ab2c <__libc_init_array+0x44>)
 800aafc:	f002 fbf2 	bl	800d2e4 <_init>
 800ab00:	1b64      	subs	r4, r4, r5
 800ab02:	10a4      	asrs	r4, r4, #2
 800ab04:	2600      	movs	r6, #0
 800ab06:	42a6      	cmp	r6, r4
 800ab08:	d105      	bne.n	800ab16 <__libc_init_array+0x2e>
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab10:	4798      	blx	r3
 800ab12:	3601      	adds	r6, #1
 800ab14:	e7ee      	b.n	800aaf4 <__libc_init_array+0xc>
 800ab16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab1a:	4798      	blx	r3
 800ab1c:	3601      	adds	r6, #1
 800ab1e:	e7f2      	b.n	800ab06 <__libc_init_array+0x1e>
 800ab20:	0800df10 	.word	0x0800df10
 800ab24:	0800df10 	.word	0x0800df10
 800ab28:	0800df10 	.word	0x0800df10
 800ab2c:	0800df14 	.word	0x0800df14

0800ab30 <__retarget_lock_acquire_recursive>:
 800ab30:	4770      	bx	lr

0800ab32 <__retarget_lock_release_recursive>:
 800ab32:	4770      	bx	lr

0800ab34 <memcpy>:
 800ab34:	440a      	add	r2, r1
 800ab36:	4291      	cmp	r1, r2
 800ab38:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab3c:	d100      	bne.n	800ab40 <memcpy+0xc>
 800ab3e:	4770      	bx	lr
 800ab40:	b510      	push	{r4, lr}
 800ab42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab4a:	4291      	cmp	r1, r2
 800ab4c:	d1f9      	bne.n	800ab42 <memcpy+0xe>
 800ab4e:	bd10      	pop	{r4, pc}

0800ab50 <quorem>:
 800ab50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab54:	6903      	ldr	r3, [r0, #16]
 800ab56:	690c      	ldr	r4, [r1, #16]
 800ab58:	42a3      	cmp	r3, r4
 800ab5a:	4607      	mov	r7, r0
 800ab5c:	db7e      	blt.n	800ac5c <quorem+0x10c>
 800ab5e:	3c01      	subs	r4, #1
 800ab60:	f101 0814 	add.w	r8, r1, #20
 800ab64:	f100 0514 	add.w	r5, r0, #20
 800ab68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab6c:	9301      	str	r3, [sp, #4]
 800ab6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab76:	3301      	adds	r3, #1
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ab7e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab82:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab86:	d331      	bcc.n	800abec <quorem+0x9c>
 800ab88:	f04f 0e00 	mov.w	lr, #0
 800ab8c:	4640      	mov	r0, r8
 800ab8e:	46ac      	mov	ip, r5
 800ab90:	46f2      	mov	sl, lr
 800ab92:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab96:	b293      	uxth	r3, r2
 800ab98:	fb06 e303 	mla	r3, r6, r3, lr
 800ab9c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aba0:	0c1a      	lsrs	r2, r3, #16
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	ebaa 0303 	sub.w	r3, sl, r3
 800aba8:	f8dc a000 	ldr.w	sl, [ip]
 800abac:	fa13 f38a 	uxtah	r3, r3, sl
 800abb0:	fb06 220e 	mla	r2, r6, lr, r2
 800abb4:	9300      	str	r3, [sp, #0]
 800abb6:	9b00      	ldr	r3, [sp, #0]
 800abb8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abbc:	b292      	uxth	r2, r2
 800abbe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800abc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abc6:	f8bd 3000 	ldrh.w	r3, [sp]
 800abca:	4581      	cmp	r9, r0
 800abcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abd0:	f84c 3b04 	str.w	r3, [ip], #4
 800abd4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800abd8:	d2db      	bcs.n	800ab92 <quorem+0x42>
 800abda:	f855 300b 	ldr.w	r3, [r5, fp]
 800abde:	b92b      	cbnz	r3, 800abec <quorem+0x9c>
 800abe0:	9b01      	ldr	r3, [sp, #4]
 800abe2:	3b04      	subs	r3, #4
 800abe4:	429d      	cmp	r5, r3
 800abe6:	461a      	mov	r2, r3
 800abe8:	d32c      	bcc.n	800ac44 <quorem+0xf4>
 800abea:	613c      	str	r4, [r7, #16]
 800abec:	4638      	mov	r0, r7
 800abee:	f001 f9a5 	bl	800bf3c <__mcmp>
 800abf2:	2800      	cmp	r0, #0
 800abf4:	db22      	blt.n	800ac3c <quorem+0xec>
 800abf6:	3601      	adds	r6, #1
 800abf8:	4629      	mov	r1, r5
 800abfa:	2000      	movs	r0, #0
 800abfc:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac00:	f8d1 c000 	ldr.w	ip, [r1]
 800ac04:	b293      	uxth	r3, r2
 800ac06:	1ac3      	subs	r3, r0, r3
 800ac08:	0c12      	lsrs	r2, r2, #16
 800ac0a:	fa13 f38c 	uxtah	r3, r3, ip
 800ac0e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ac12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac1c:	45c1      	cmp	r9, r8
 800ac1e:	f841 3b04 	str.w	r3, [r1], #4
 800ac22:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac26:	d2e9      	bcs.n	800abfc <quorem+0xac>
 800ac28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac30:	b922      	cbnz	r2, 800ac3c <quorem+0xec>
 800ac32:	3b04      	subs	r3, #4
 800ac34:	429d      	cmp	r5, r3
 800ac36:	461a      	mov	r2, r3
 800ac38:	d30a      	bcc.n	800ac50 <quorem+0x100>
 800ac3a:	613c      	str	r4, [r7, #16]
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	b003      	add	sp, #12
 800ac40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac44:	6812      	ldr	r2, [r2, #0]
 800ac46:	3b04      	subs	r3, #4
 800ac48:	2a00      	cmp	r2, #0
 800ac4a:	d1ce      	bne.n	800abea <quorem+0x9a>
 800ac4c:	3c01      	subs	r4, #1
 800ac4e:	e7c9      	b.n	800abe4 <quorem+0x94>
 800ac50:	6812      	ldr	r2, [r2, #0]
 800ac52:	3b04      	subs	r3, #4
 800ac54:	2a00      	cmp	r2, #0
 800ac56:	d1f0      	bne.n	800ac3a <quorem+0xea>
 800ac58:	3c01      	subs	r4, #1
 800ac5a:	e7eb      	b.n	800ac34 <quorem+0xe4>
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	e7ee      	b.n	800ac3e <quorem+0xee>

0800ac60 <_dtoa_r>:
 800ac60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac64:	ed2d 8b04 	vpush	{d8-d9}
 800ac68:	69c5      	ldr	r5, [r0, #28]
 800ac6a:	b093      	sub	sp, #76	; 0x4c
 800ac6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ac70:	ec57 6b10 	vmov	r6, r7, d0
 800ac74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ac78:	9107      	str	r1, [sp, #28]
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	920a      	str	r2, [sp, #40]	; 0x28
 800ac7e:	930d      	str	r3, [sp, #52]	; 0x34
 800ac80:	b975      	cbnz	r5, 800aca0 <_dtoa_r+0x40>
 800ac82:	2010      	movs	r0, #16
 800ac84:	f000 fe2a 	bl	800b8dc <malloc>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	61e0      	str	r0, [r4, #28]
 800ac8c:	b920      	cbnz	r0, 800ac98 <_dtoa_r+0x38>
 800ac8e:	4bae      	ldr	r3, [pc, #696]	; (800af48 <_dtoa_r+0x2e8>)
 800ac90:	21ef      	movs	r1, #239	; 0xef
 800ac92:	48ae      	ldr	r0, [pc, #696]	; (800af4c <_dtoa_r+0x2ec>)
 800ac94:	f001 fc68 	bl	800c568 <__assert_func>
 800ac98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac9c:	6005      	str	r5, [r0, #0]
 800ac9e:	60c5      	str	r5, [r0, #12]
 800aca0:	69e3      	ldr	r3, [r4, #28]
 800aca2:	6819      	ldr	r1, [r3, #0]
 800aca4:	b151      	cbz	r1, 800acbc <_dtoa_r+0x5c>
 800aca6:	685a      	ldr	r2, [r3, #4]
 800aca8:	604a      	str	r2, [r1, #4]
 800acaa:	2301      	movs	r3, #1
 800acac:	4093      	lsls	r3, r2
 800acae:	608b      	str	r3, [r1, #8]
 800acb0:	4620      	mov	r0, r4
 800acb2:	f000 ff07 	bl	800bac4 <_Bfree>
 800acb6:	69e3      	ldr	r3, [r4, #28]
 800acb8:	2200      	movs	r2, #0
 800acba:	601a      	str	r2, [r3, #0]
 800acbc:	1e3b      	subs	r3, r7, #0
 800acbe:	bfbb      	ittet	lt
 800acc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800acc4:	9303      	strlt	r3, [sp, #12]
 800acc6:	2300      	movge	r3, #0
 800acc8:	2201      	movlt	r2, #1
 800acca:	bfac      	ite	ge
 800accc:	f8c8 3000 	strge.w	r3, [r8]
 800acd0:	f8c8 2000 	strlt.w	r2, [r8]
 800acd4:	4b9e      	ldr	r3, [pc, #632]	; (800af50 <_dtoa_r+0x2f0>)
 800acd6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800acda:	ea33 0308 	bics.w	r3, r3, r8
 800acde:	d11b      	bne.n	800ad18 <_dtoa_r+0xb8>
 800ace0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ace2:	f242 730f 	movw	r3, #9999	; 0x270f
 800ace6:	6013      	str	r3, [r2, #0]
 800ace8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800acec:	4333      	orrs	r3, r6
 800acee:	f000 8593 	beq.w	800b818 <_dtoa_r+0xbb8>
 800acf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acf4:	b963      	cbnz	r3, 800ad10 <_dtoa_r+0xb0>
 800acf6:	4b97      	ldr	r3, [pc, #604]	; (800af54 <_dtoa_r+0x2f4>)
 800acf8:	e027      	b.n	800ad4a <_dtoa_r+0xea>
 800acfa:	4b97      	ldr	r3, [pc, #604]	; (800af58 <_dtoa_r+0x2f8>)
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	3308      	adds	r3, #8
 800ad00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad02:	6013      	str	r3, [r2, #0]
 800ad04:	9800      	ldr	r0, [sp, #0]
 800ad06:	b013      	add	sp, #76	; 0x4c
 800ad08:	ecbd 8b04 	vpop	{d8-d9}
 800ad0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad10:	4b90      	ldr	r3, [pc, #576]	; (800af54 <_dtoa_r+0x2f4>)
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	3303      	adds	r3, #3
 800ad16:	e7f3      	b.n	800ad00 <_dtoa_r+0xa0>
 800ad18:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	ec51 0b17 	vmov	r0, r1, d7
 800ad22:	eeb0 8a47 	vmov.f32	s16, s14
 800ad26:	eef0 8a67 	vmov.f32	s17, s15
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	f7f5 fed4 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad30:	4681      	mov	r9, r0
 800ad32:	b160      	cbz	r0, 800ad4e <_dtoa_r+0xee>
 800ad34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad36:	2301      	movs	r3, #1
 800ad38:	6013      	str	r3, [r2, #0]
 800ad3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f000 8568 	beq.w	800b812 <_dtoa_r+0xbb2>
 800ad42:	4b86      	ldr	r3, [pc, #536]	; (800af5c <_dtoa_r+0x2fc>)
 800ad44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad46:	6013      	str	r3, [r2, #0]
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	9300      	str	r3, [sp, #0]
 800ad4c:	e7da      	b.n	800ad04 <_dtoa_r+0xa4>
 800ad4e:	aa10      	add	r2, sp, #64	; 0x40
 800ad50:	a911      	add	r1, sp, #68	; 0x44
 800ad52:	4620      	mov	r0, r4
 800ad54:	eeb0 0a48 	vmov.f32	s0, s16
 800ad58:	eef0 0a68 	vmov.f32	s1, s17
 800ad5c:	f001 f994 	bl	800c088 <__d2b>
 800ad60:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ad64:	4682      	mov	sl, r0
 800ad66:	2d00      	cmp	r5, #0
 800ad68:	d07f      	beq.n	800ae6a <_dtoa_r+0x20a>
 800ad6a:	ee18 3a90 	vmov	r3, s17
 800ad6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad72:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ad76:	ec51 0b18 	vmov	r0, r1, d8
 800ad7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ad7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ad82:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ad86:	4619      	mov	r1, r3
 800ad88:	2200      	movs	r2, #0
 800ad8a:	4b75      	ldr	r3, [pc, #468]	; (800af60 <_dtoa_r+0x300>)
 800ad8c:	f7f5 fa84 	bl	8000298 <__aeabi_dsub>
 800ad90:	a367      	add	r3, pc, #412	; (adr r3, 800af30 <_dtoa_r+0x2d0>)
 800ad92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad96:	f7f5 fc37 	bl	8000608 <__aeabi_dmul>
 800ad9a:	a367      	add	r3, pc, #412	; (adr r3, 800af38 <_dtoa_r+0x2d8>)
 800ad9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada0:	f7f5 fa7c 	bl	800029c <__adddf3>
 800ada4:	4606      	mov	r6, r0
 800ada6:	4628      	mov	r0, r5
 800ada8:	460f      	mov	r7, r1
 800adaa:	f7f5 fbc3 	bl	8000534 <__aeabi_i2d>
 800adae:	a364      	add	r3, pc, #400	; (adr r3, 800af40 <_dtoa_r+0x2e0>)
 800adb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb4:	f7f5 fc28 	bl	8000608 <__aeabi_dmul>
 800adb8:	4602      	mov	r2, r0
 800adba:	460b      	mov	r3, r1
 800adbc:	4630      	mov	r0, r6
 800adbe:	4639      	mov	r1, r7
 800adc0:	f7f5 fa6c 	bl	800029c <__adddf3>
 800adc4:	4606      	mov	r6, r0
 800adc6:	460f      	mov	r7, r1
 800adc8:	f7f5 fece 	bl	8000b68 <__aeabi_d2iz>
 800adcc:	2200      	movs	r2, #0
 800adce:	4683      	mov	fp, r0
 800add0:	2300      	movs	r3, #0
 800add2:	4630      	mov	r0, r6
 800add4:	4639      	mov	r1, r7
 800add6:	f7f5 fe89 	bl	8000aec <__aeabi_dcmplt>
 800adda:	b148      	cbz	r0, 800adf0 <_dtoa_r+0x190>
 800addc:	4658      	mov	r0, fp
 800adde:	f7f5 fba9 	bl	8000534 <__aeabi_i2d>
 800ade2:	4632      	mov	r2, r6
 800ade4:	463b      	mov	r3, r7
 800ade6:	f7f5 fe77 	bl	8000ad8 <__aeabi_dcmpeq>
 800adea:	b908      	cbnz	r0, 800adf0 <_dtoa_r+0x190>
 800adec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800adf0:	f1bb 0f16 	cmp.w	fp, #22
 800adf4:	d857      	bhi.n	800aea6 <_dtoa_r+0x246>
 800adf6:	4b5b      	ldr	r3, [pc, #364]	; (800af64 <_dtoa_r+0x304>)
 800adf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800adfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae00:	ec51 0b18 	vmov	r0, r1, d8
 800ae04:	f7f5 fe72 	bl	8000aec <__aeabi_dcmplt>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d04e      	beq.n	800aeaa <_dtoa_r+0x24a>
 800ae0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae10:	2300      	movs	r3, #0
 800ae12:	930c      	str	r3, [sp, #48]	; 0x30
 800ae14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae16:	1b5b      	subs	r3, r3, r5
 800ae18:	1e5a      	subs	r2, r3, #1
 800ae1a:	bf45      	ittet	mi
 800ae1c:	f1c3 0301 	rsbmi	r3, r3, #1
 800ae20:	9305      	strmi	r3, [sp, #20]
 800ae22:	2300      	movpl	r3, #0
 800ae24:	2300      	movmi	r3, #0
 800ae26:	9206      	str	r2, [sp, #24]
 800ae28:	bf54      	ite	pl
 800ae2a:	9305      	strpl	r3, [sp, #20]
 800ae2c:	9306      	strmi	r3, [sp, #24]
 800ae2e:	f1bb 0f00 	cmp.w	fp, #0
 800ae32:	db3c      	blt.n	800aeae <_dtoa_r+0x24e>
 800ae34:	9b06      	ldr	r3, [sp, #24]
 800ae36:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ae3a:	445b      	add	r3, fp
 800ae3c:	9306      	str	r3, [sp, #24]
 800ae3e:	2300      	movs	r3, #0
 800ae40:	9308      	str	r3, [sp, #32]
 800ae42:	9b07      	ldr	r3, [sp, #28]
 800ae44:	2b09      	cmp	r3, #9
 800ae46:	d868      	bhi.n	800af1a <_dtoa_r+0x2ba>
 800ae48:	2b05      	cmp	r3, #5
 800ae4a:	bfc4      	itt	gt
 800ae4c:	3b04      	subgt	r3, #4
 800ae4e:	9307      	strgt	r3, [sp, #28]
 800ae50:	9b07      	ldr	r3, [sp, #28]
 800ae52:	f1a3 0302 	sub.w	r3, r3, #2
 800ae56:	bfcc      	ite	gt
 800ae58:	2500      	movgt	r5, #0
 800ae5a:	2501      	movle	r5, #1
 800ae5c:	2b03      	cmp	r3, #3
 800ae5e:	f200 8085 	bhi.w	800af6c <_dtoa_r+0x30c>
 800ae62:	e8df f003 	tbb	[pc, r3]
 800ae66:	3b2e      	.short	0x3b2e
 800ae68:	5839      	.short	0x5839
 800ae6a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ae6e:	441d      	add	r5, r3
 800ae70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ae74:	2b20      	cmp	r3, #32
 800ae76:	bfc1      	itttt	gt
 800ae78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ae7c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ae80:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ae84:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ae88:	bfd6      	itet	le
 800ae8a:	f1c3 0320 	rsble	r3, r3, #32
 800ae8e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ae92:	fa06 f003 	lslle.w	r0, r6, r3
 800ae96:	f7f5 fb3d 	bl	8000514 <__aeabi_ui2d>
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800aea0:	3d01      	subs	r5, #1
 800aea2:	920e      	str	r2, [sp, #56]	; 0x38
 800aea4:	e76f      	b.n	800ad86 <_dtoa_r+0x126>
 800aea6:	2301      	movs	r3, #1
 800aea8:	e7b3      	b.n	800ae12 <_dtoa_r+0x1b2>
 800aeaa:	900c      	str	r0, [sp, #48]	; 0x30
 800aeac:	e7b2      	b.n	800ae14 <_dtoa_r+0x1b4>
 800aeae:	9b05      	ldr	r3, [sp, #20]
 800aeb0:	eba3 030b 	sub.w	r3, r3, fp
 800aeb4:	9305      	str	r3, [sp, #20]
 800aeb6:	f1cb 0300 	rsb	r3, fp, #0
 800aeba:	9308      	str	r3, [sp, #32]
 800aebc:	2300      	movs	r3, #0
 800aebe:	930b      	str	r3, [sp, #44]	; 0x2c
 800aec0:	e7bf      	b.n	800ae42 <_dtoa_r+0x1e2>
 800aec2:	2300      	movs	r3, #0
 800aec4:	9309      	str	r3, [sp, #36]	; 0x24
 800aec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	dc52      	bgt.n	800af72 <_dtoa_r+0x312>
 800aecc:	2301      	movs	r3, #1
 800aece:	9301      	str	r3, [sp, #4]
 800aed0:	9304      	str	r3, [sp, #16]
 800aed2:	461a      	mov	r2, r3
 800aed4:	920a      	str	r2, [sp, #40]	; 0x28
 800aed6:	e00b      	b.n	800aef0 <_dtoa_r+0x290>
 800aed8:	2301      	movs	r3, #1
 800aeda:	e7f3      	b.n	800aec4 <_dtoa_r+0x264>
 800aedc:	2300      	movs	r3, #0
 800aede:	9309      	str	r3, [sp, #36]	; 0x24
 800aee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aee2:	445b      	add	r3, fp
 800aee4:	9301      	str	r3, [sp, #4]
 800aee6:	3301      	adds	r3, #1
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	9304      	str	r3, [sp, #16]
 800aeec:	bfb8      	it	lt
 800aeee:	2301      	movlt	r3, #1
 800aef0:	69e0      	ldr	r0, [r4, #28]
 800aef2:	2100      	movs	r1, #0
 800aef4:	2204      	movs	r2, #4
 800aef6:	f102 0614 	add.w	r6, r2, #20
 800aefa:	429e      	cmp	r6, r3
 800aefc:	d93d      	bls.n	800af7a <_dtoa_r+0x31a>
 800aefe:	6041      	str	r1, [r0, #4]
 800af00:	4620      	mov	r0, r4
 800af02:	f000 fd9f 	bl	800ba44 <_Balloc>
 800af06:	9000      	str	r0, [sp, #0]
 800af08:	2800      	cmp	r0, #0
 800af0a:	d139      	bne.n	800af80 <_dtoa_r+0x320>
 800af0c:	4b16      	ldr	r3, [pc, #88]	; (800af68 <_dtoa_r+0x308>)
 800af0e:	4602      	mov	r2, r0
 800af10:	f240 11af 	movw	r1, #431	; 0x1af
 800af14:	e6bd      	b.n	800ac92 <_dtoa_r+0x32>
 800af16:	2301      	movs	r3, #1
 800af18:	e7e1      	b.n	800aede <_dtoa_r+0x27e>
 800af1a:	2501      	movs	r5, #1
 800af1c:	2300      	movs	r3, #0
 800af1e:	9307      	str	r3, [sp, #28]
 800af20:	9509      	str	r5, [sp, #36]	; 0x24
 800af22:	f04f 33ff 	mov.w	r3, #4294967295
 800af26:	9301      	str	r3, [sp, #4]
 800af28:	9304      	str	r3, [sp, #16]
 800af2a:	2200      	movs	r2, #0
 800af2c:	2312      	movs	r3, #18
 800af2e:	e7d1      	b.n	800aed4 <_dtoa_r+0x274>
 800af30:	636f4361 	.word	0x636f4361
 800af34:	3fd287a7 	.word	0x3fd287a7
 800af38:	8b60c8b3 	.word	0x8b60c8b3
 800af3c:	3fc68a28 	.word	0x3fc68a28
 800af40:	509f79fb 	.word	0x509f79fb
 800af44:	3fd34413 	.word	0x3fd34413
 800af48:	0800db61 	.word	0x0800db61
 800af4c:	0800db78 	.word	0x0800db78
 800af50:	7ff00000 	.word	0x7ff00000
 800af54:	0800db5d 	.word	0x0800db5d
 800af58:	0800db54 	.word	0x0800db54
 800af5c:	0800db31 	.word	0x0800db31
 800af60:	3ff80000 	.word	0x3ff80000
 800af64:	0800dc68 	.word	0x0800dc68
 800af68:	0800dbd0 	.word	0x0800dbd0
 800af6c:	2301      	movs	r3, #1
 800af6e:	9309      	str	r3, [sp, #36]	; 0x24
 800af70:	e7d7      	b.n	800af22 <_dtoa_r+0x2c2>
 800af72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af74:	9301      	str	r3, [sp, #4]
 800af76:	9304      	str	r3, [sp, #16]
 800af78:	e7ba      	b.n	800aef0 <_dtoa_r+0x290>
 800af7a:	3101      	adds	r1, #1
 800af7c:	0052      	lsls	r2, r2, #1
 800af7e:	e7ba      	b.n	800aef6 <_dtoa_r+0x296>
 800af80:	69e3      	ldr	r3, [r4, #28]
 800af82:	9a00      	ldr	r2, [sp, #0]
 800af84:	601a      	str	r2, [r3, #0]
 800af86:	9b04      	ldr	r3, [sp, #16]
 800af88:	2b0e      	cmp	r3, #14
 800af8a:	f200 80a8 	bhi.w	800b0de <_dtoa_r+0x47e>
 800af8e:	2d00      	cmp	r5, #0
 800af90:	f000 80a5 	beq.w	800b0de <_dtoa_r+0x47e>
 800af94:	f1bb 0f00 	cmp.w	fp, #0
 800af98:	dd38      	ble.n	800b00c <_dtoa_r+0x3ac>
 800af9a:	4bc0      	ldr	r3, [pc, #768]	; (800b29c <_dtoa_r+0x63c>)
 800af9c:	f00b 020f 	and.w	r2, fp, #15
 800afa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afa4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800afa8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800afac:	ea4f 182b 	mov.w	r8, fp, asr #4
 800afb0:	d019      	beq.n	800afe6 <_dtoa_r+0x386>
 800afb2:	4bbb      	ldr	r3, [pc, #748]	; (800b2a0 <_dtoa_r+0x640>)
 800afb4:	ec51 0b18 	vmov	r0, r1, d8
 800afb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afbc:	f7f5 fc4e 	bl	800085c <__aeabi_ddiv>
 800afc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afc4:	f008 080f 	and.w	r8, r8, #15
 800afc8:	2503      	movs	r5, #3
 800afca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b2a0 <_dtoa_r+0x640>
 800afce:	f1b8 0f00 	cmp.w	r8, #0
 800afd2:	d10a      	bne.n	800afea <_dtoa_r+0x38a>
 800afd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afd8:	4632      	mov	r2, r6
 800afda:	463b      	mov	r3, r7
 800afdc:	f7f5 fc3e 	bl	800085c <__aeabi_ddiv>
 800afe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afe4:	e02b      	b.n	800b03e <_dtoa_r+0x3de>
 800afe6:	2502      	movs	r5, #2
 800afe8:	e7ef      	b.n	800afca <_dtoa_r+0x36a>
 800afea:	f018 0f01 	tst.w	r8, #1
 800afee:	d008      	beq.n	800b002 <_dtoa_r+0x3a2>
 800aff0:	4630      	mov	r0, r6
 800aff2:	4639      	mov	r1, r7
 800aff4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aff8:	f7f5 fb06 	bl	8000608 <__aeabi_dmul>
 800affc:	3501      	adds	r5, #1
 800affe:	4606      	mov	r6, r0
 800b000:	460f      	mov	r7, r1
 800b002:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b006:	f109 0908 	add.w	r9, r9, #8
 800b00a:	e7e0      	b.n	800afce <_dtoa_r+0x36e>
 800b00c:	f000 809f 	beq.w	800b14e <_dtoa_r+0x4ee>
 800b010:	f1cb 0600 	rsb	r6, fp, #0
 800b014:	4ba1      	ldr	r3, [pc, #644]	; (800b29c <_dtoa_r+0x63c>)
 800b016:	4fa2      	ldr	r7, [pc, #648]	; (800b2a0 <_dtoa_r+0x640>)
 800b018:	f006 020f 	and.w	r2, r6, #15
 800b01c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b024:	ec51 0b18 	vmov	r0, r1, d8
 800b028:	f7f5 faee 	bl	8000608 <__aeabi_dmul>
 800b02c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b030:	1136      	asrs	r6, r6, #4
 800b032:	2300      	movs	r3, #0
 800b034:	2502      	movs	r5, #2
 800b036:	2e00      	cmp	r6, #0
 800b038:	d17e      	bne.n	800b138 <_dtoa_r+0x4d8>
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1d0      	bne.n	800afe0 <_dtoa_r+0x380>
 800b03e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b040:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b044:	2b00      	cmp	r3, #0
 800b046:	f000 8084 	beq.w	800b152 <_dtoa_r+0x4f2>
 800b04a:	4b96      	ldr	r3, [pc, #600]	; (800b2a4 <_dtoa_r+0x644>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	4640      	mov	r0, r8
 800b050:	4649      	mov	r1, r9
 800b052:	f7f5 fd4b 	bl	8000aec <__aeabi_dcmplt>
 800b056:	2800      	cmp	r0, #0
 800b058:	d07b      	beq.n	800b152 <_dtoa_r+0x4f2>
 800b05a:	9b04      	ldr	r3, [sp, #16]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d078      	beq.n	800b152 <_dtoa_r+0x4f2>
 800b060:	9b01      	ldr	r3, [sp, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	dd39      	ble.n	800b0da <_dtoa_r+0x47a>
 800b066:	4b90      	ldr	r3, [pc, #576]	; (800b2a8 <_dtoa_r+0x648>)
 800b068:	2200      	movs	r2, #0
 800b06a:	4640      	mov	r0, r8
 800b06c:	4649      	mov	r1, r9
 800b06e:	f7f5 facb 	bl	8000608 <__aeabi_dmul>
 800b072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b076:	9e01      	ldr	r6, [sp, #4]
 800b078:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b07c:	3501      	adds	r5, #1
 800b07e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b082:	4628      	mov	r0, r5
 800b084:	f7f5 fa56 	bl	8000534 <__aeabi_i2d>
 800b088:	4642      	mov	r2, r8
 800b08a:	464b      	mov	r3, r9
 800b08c:	f7f5 fabc 	bl	8000608 <__aeabi_dmul>
 800b090:	4b86      	ldr	r3, [pc, #536]	; (800b2ac <_dtoa_r+0x64c>)
 800b092:	2200      	movs	r2, #0
 800b094:	f7f5 f902 	bl	800029c <__adddf3>
 800b098:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b09c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0a0:	9303      	str	r3, [sp, #12]
 800b0a2:	2e00      	cmp	r6, #0
 800b0a4:	d158      	bne.n	800b158 <_dtoa_r+0x4f8>
 800b0a6:	4b82      	ldr	r3, [pc, #520]	; (800b2b0 <_dtoa_r+0x650>)
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	4640      	mov	r0, r8
 800b0ac:	4649      	mov	r1, r9
 800b0ae:	f7f5 f8f3 	bl	8000298 <__aeabi_dsub>
 800b0b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0b6:	4680      	mov	r8, r0
 800b0b8:	4689      	mov	r9, r1
 800b0ba:	f7f5 fd35 	bl	8000b28 <__aeabi_dcmpgt>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	f040 8296 	bne.w	800b5f0 <_dtoa_r+0x990>
 800b0c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b0c8:	4640      	mov	r0, r8
 800b0ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0ce:	4649      	mov	r1, r9
 800b0d0:	f7f5 fd0c 	bl	8000aec <__aeabi_dcmplt>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	f040 8289 	bne.w	800b5ec <_dtoa_r+0x98c>
 800b0da:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b0de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f2c0 814e 	blt.w	800b382 <_dtoa_r+0x722>
 800b0e6:	f1bb 0f0e 	cmp.w	fp, #14
 800b0ea:	f300 814a 	bgt.w	800b382 <_dtoa_r+0x722>
 800b0ee:	4b6b      	ldr	r3, [pc, #428]	; (800b29c <_dtoa_r+0x63c>)
 800b0f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b0f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	f280 80dc 	bge.w	800b2b8 <_dtoa_r+0x658>
 800b100:	9b04      	ldr	r3, [sp, #16]
 800b102:	2b00      	cmp	r3, #0
 800b104:	f300 80d8 	bgt.w	800b2b8 <_dtoa_r+0x658>
 800b108:	f040 826f 	bne.w	800b5ea <_dtoa_r+0x98a>
 800b10c:	4b68      	ldr	r3, [pc, #416]	; (800b2b0 <_dtoa_r+0x650>)
 800b10e:	2200      	movs	r2, #0
 800b110:	4640      	mov	r0, r8
 800b112:	4649      	mov	r1, r9
 800b114:	f7f5 fa78 	bl	8000608 <__aeabi_dmul>
 800b118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b11c:	f7f5 fcfa 	bl	8000b14 <__aeabi_dcmpge>
 800b120:	9e04      	ldr	r6, [sp, #16]
 800b122:	4637      	mov	r7, r6
 800b124:	2800      	cmp	r0, #0
 800b126:	f040 8245 	bne.w	800b5b4 <_dtoa_r+0x954>
 800b12a:	9d00      	ldr	r5, [sp, #0]
 800b12c:	2331      	movs	r3, #49	; 0x31
 800b12e:	f805 3b01 	strb.w	r3, [r5], #1
 800b132:	f10b 0b01 	add.w	fp, fp, #1
 800b136:	e241      	b.n	800b5bc <_dtoa_r+0x95c>
 800b138:	07f2      	lsls	r2, r6, #31
 800b13a:	d505      	bpl.n	800b148 <_dtoa_r+0x4e8>
 800b13c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b140:	f7f5 fa62 	bl	8000608 <__aeabi_dmul>
 800b144:	3501      	adds	r5, #1
 800b146:	2301      	movs	r3, #1
 800b148:	1076      	asrs	r6, r6, #1
 800b14a:	3708      	adds	r7, #8
 800b14c:	e773      	b.n	800b036 <_dtoa_r+0x3d6>
 800b14e:	2502      	movs	r5, #2
 800b150:	e775      	b.n	800b03e <_dtoa_r+0x3de>
 800b152:	9e04      	ldr	r6, [sp, #16]
 800b154:	465f      	mov	r7, fp
 800b156:	e792      	b.n	800b07e <_dtoa_r+0x41e>
 800b158:	9900      	ldr	r1, [sp, #0]
 800b15a:	4b50      	ldr	r3, [pc, #320]	; (800b29c <_dtoa_r+0x63c>)
 800b15c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b160:	4431      	add	r1, r6
 800b162:	9102      	str	r1, [sp, #8]
 800b164:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b166:	eeb0 9a47 	vmov.f32	s18, s14
 800b16a:	eef0 9a67 	vmov.f32	s19, s15
 800b16e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b172:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b176:	2900      	cmp	r1, #0
 800b178:	d044      	beq.n	800b204 <_dtoa_r+0x5a4>
 800b17a:	494e      	ldr	r1, [pc, #312]	; (800b2b4 <_dtoa_r+0x654>)
 800b17c:	2000      	movs	r0, #0
 800b17e:	f7f5 fb6d 	bl	800085c <__aeabi_ddiv>
 800b182:	ec53 2b19 	vmov	r2, r3, d9
 800b186:	f7f5 f887 	bl	8000298 <__aeabi_dsub>
 800b18a:	9d00      	ldr	r5, [sp, #0]
 800b18c:	ec41 0b19 	vmov	d9, r0, r1
 800b190:	4649      	mov	r1, r9
 800b192:	4640      	mov	r0, r8
 800b194:	f7f5 fce8 	bl	8000b68 <__aeabi_d2iz>
 800b198:	4606      	mov	r6, r0
 800b19a:	f7f5 f9cb 	bl	8000534 <__aeabi_i2d>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	f7f5 f877 	bl	8000298 <__aeabi_dsub>
 800b1aa:	3630      	adds	r6, #48	; 0x30
 800b1ac:	f805 6b01 	strb.w	r6, [r5], #1
 800b1b0:	ec53 2b19 	vmov	r2, r3, d9
 800b1b4:	4680      	mov	r8, r0
 800b1b6:	4689      	mov	r9, r1
 800b1b8:	f7f5 fc98 	bl	8000aec <__aeabi_dcmplt>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d164      	bne.n	800b28a <_dtoa_r+0x62a>
 800b1c0:	4642      	mov	r2, r8
 800b1c2:	464b      	mov	r3, r9
 800b1c4:	4937      	ldr	r1, [pc, #220]	; (800b2a4 <_dtoa_r+0x644>)
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	f7f5 f866 	bl	8000298 <__aeabi_dsub>
 800b1cc:	ec53 2b19 	vmov	r2, r3, d9
 800b1d0:	f7f5 fc8c 	bl	8000aec <__aeabi_dcmplt>
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	f040 80b6 	bne.w	800b346 <_dtoa_r+0x6e6>
 800b1da:	9b02      	ldr	r3, [sp, #8]
 800b1dc:	429d      	cmp	r5, r3
 800b1de:	f43f af7c 	beq.w	800b0da <_dtoa_r+0x47a>
 800b1e2:	4b31      	ldr	r3, [pc, #196]	; (800b2a8 <_dtoa_r+0x648>)
 800b1e4:	ec51 0b19 	vmov	r0, r1, d9
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f7f5 fa0d 	bl	8000608 <__aeabi_dmul>
 800b1ee:	4b2e      	ldr	r3, [pc, #184]	; (800b2a8 <_dtoa_r+0x648>)
 800b1f0:	ec41 0b19 	vmov	d9, r0, r1
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	4640      	mov	r0, r8
 800b1f8:	4649      	mov	r1, r9
 800b1fa:	f7f5 fa05 	bl	8000608 <__aeabi_dmul>
 800b1fe:	4680      	mov	r8, r0
 800b200:	4689      	mov	r9, r1
 800b202:	e7c5      	b.n	800b190 <_dtoa_r+0x530>
 800b204:	ec51 0b17 	vmov	r0, r1, d7
 800b208:	f7f5 f9fe 	bl	8000608 <__aeabi_dmul>
 800b20c:	9b02      	ldr	r3, [sp, #8]
 800b20e:	9d00      	ldr	r5, [sp, #0]
 800b210:	930f      	str	r3, [sp, #60]	; 0x3c
 800b212:	ec41 0b19 	vmov	d9, r0, r1
 800b216:	4649      	mov	r1, r9
 800b218:	4640      	mov	r0, r8
 800b21a:	f7f5 fca5 	bl	8000b68 <__aeabi_d2iz>
 800b21e:	4606      	mov	r6, r0
 800b220:	f7f5 f988 	bl	8000534 <__aeabi_i2d>
 800b224:	3630      	adds	r6, #48	; 0x30
 800b226:	4602      	mov	r2, r0
 800b228:	460b      	mov	r3, r1
 800b22a:	4640      	mov	r0, r8
 800b22c:	4649      	mov	r1, r9
 800b22e:	f7f5 f833 	bl	8000298 <__aeabi_dsub>
 800b232:	f805 6b01 	strb.w	r6, [r5], #1
 800b236:	9b02      	ldr	r3, [sp, #8]
 800b238:	429d      	cmp	r5, r3
 800b23a:	4680      	mov	r8, r0
 800b23c:	4689      	mov	r9, r1
 800b23e:	f04f 0200 	mov.w	r2, #0
 800b242:	d124      	bne.n	800b28e <_dtoa_r+0x62e>
 800b244:	4b1b      	ldr	r3, [pc, #108]	; (800b2b4 <_dtoa_r+0x654>)
 800b246:	ec51 0b19 	vmov	r0, r1, d9
 800b24a:	f7f5 f827 	bl	800029c <__adddf3>
 800b24e:	4602      	mov	r2, r0
 800b250:	460b      	mov	r3, r1
 800b252:	4640      	mov	r0, r8
 800b254:	4649      	mov	r1, r9
 800b256:	f7f5 fc67 	bl	8000b28 <__aeabi_dcmpgt>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	d173      	bne.n	800b346 <_dtoa_r+0x6e6>
 800b25e:	ec53 2b19 	vmov	r2, r3, d9
 800b262:	4914      	ldr	r1, [pc, #80]	; (800b2b4 <_dtoa_r+0x654>)
 800b264:	2000      	movs	r0, #0
 800b266:	f7f5 f817 	bl	8000298 <__aeabi_dsub>
 800b26a:	4602      	mov	r2, r0
 800b26c:	460b      	mov	r3, r1
 800b26e:	4640      	mov	r0, r8
 800b270:	4649      	mov	r1, r9
 800b272:	f7f5 fc3b 	bl	8000aec <__aeabi_dcmplt>
 800b276:	2800      	cmp	r0, #0
 800b278:	f43f af2f 	beq.w	800b0da <_dtoa_r+0x47a>
 800b27c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b27e:	1e6b      	subs	r3, r5, #1
 800b280:	930f      	str	r3, [sp, #60]	; 0x3c
 800b282:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b286:	2b30      	cmp	r3, #48	; 0x30
 800b288:	d0f8      	beq.n	800b27c <_dtoa_r+0x61c>
 800b28a:	46bb      	mov	fp, r7
 800b28c:	e04a      	b.n	800b324 <_dtoa_r+0x6c4>
 800b28e:	4b06      	ldr	r3, [pc, #24]	; (800b2a8 <_dtoa_r+0x648>)
 800b290:	f7f5 f9ba 	bl	8000608 <__aeabi_dmul>
 800b294:	4680      	mov	r8, r0
 800b296:	4689      	mov	r9, r1
 800b298:	e7bd      	b.n	800b216 <_dtoa_r+0x5b6>
 800b29a:	bf00      	nop
 800b29c:	0800dc68 	.word	0x0800dc68
 800b2a0:	0800dc40 	.word	0x0800dc40
 800b2a4:	3ff00000 	.word	0x3ff00000
 800b2a8:	40240000 	.word	0x40240000
 800b2ac:	401c0000 	.word	0x401c0000
 800b2b0:	40140000 	.word	0x40140000
 800b2b4:	3fe00000 	.word	0x3fe00000
 800b2b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b2bc:	9d00      	ldr	r5, [sp, #0]
 800b2be:	4642      	mov	r2, r8
 800b2c0:	464b      	mov	r3, r9
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	4639      	mov	r1, r7
 800b2c6:	f7f5 fac9 	bl	800085c <__aeabi_ddiv>
 800b2ca:	f7f5 fc4d 	bl	8000b68 <__aeabi_d2iz>
 800b2ce:	9001      	str	r0, [sp, #4]
 800b2d0:	f7f5 f930 	bl	8000534 <__aeabi_i2d>
 800b2d4:	4642      	mov	r2, r8
 800b2d6:	464b      	mov	r3, r9
 800b2d8:	f7f5 f996 	bl	8000608 <__aeabi_dmul>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	460b      	mov	r3, r1
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	4639      	mov	r1, r7
 800b2e4:	f7f4 ffd8 	bl	8000298 <__aeabi_dsub>
 800b2e8:	9e01      	ldr	r6, [sp, #4]
 800b2ea:	9f04      	ldr	r7, [sp, #16]
 800b2ec:	3630      	adds	r6, #48	; 0x30
 800b2ee:	f805 6b01 	strb.w	r6, [r5], #1
 800b2f2:	9e00      	ldr	r6, [sp, #0]
 800b2f4:	1bae      	subs	r6, r5, r6
 800b2f6:	42b7      	cmp	r7, r6
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	d134      	bne.n	800b368 <_dtoa_r+0x708>
 800b2fe:	f7f4 ffcd 	bl	800029c <__adddf3>
 800b302:	4642      	mov	r2, r8
 800b304:	464b      	mov	r3, r9
 800b306:	4606      	mov	r6, r0
 800b308:	460f      	mov	r7, r1
 800b30a:	f7f5 fc0d 	bl	8000b28 <__aeabi_dcmpgt>
 800b30e:	b9c8      	cbnz	r0, 800b344 <_dtoa_r+0x6e4>
 800b310:	4642      	mov	r2, r8
 800b312:	464b      	mov	r3, r9
 800b314:	4630      	mov	r0, r6
 800b316:	4639      	mov	r1, r7
 800b318:	f7f5 fbde 	bl	8000ad8 <__aeabi_dcmpeq>
 800b31c:	b110      	cbz	r0, 800b324 <_dtoa_r+0x6c4>
 800b31e:	9b01      	ldr	r3, [sp, #4]
 800b320:	07db      	lsls	r3, r3, #31
 800b322:	d40f      	bmi.n	800b344 <_dtoa_r+0x6e4>
 800b324:	4651      	mov	r1, sl
 800b326:	4620      	mov	r0, r4
 800b328:	f000 fbcc 	bl	800bac4 <_Bfree>
 800b32c:	2300      	movs	r3, #0
 800b32e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b330:	702b      	strb	r3, [r5, #0]
 800b332:	f10b 0301 	add.w	r3, fp, #1
 800b336:	6013      	str	r3, [r2, #0]
 800b338:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f43f ace2 	beq.w	800ad04 <_dtoa_r+0xa4>
 800b340:	601d      	str	r5, [r3, #0]
 800b342:	e4df      	b.n	800ad04 <_dtoa_r+0xa4>
 800b344:	465f      	mov	r7, fp
 800b346:	462b      	mov	r3, r5
 800b348:	461d      	mov	r5, r3
 800b34a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b34e:	2a39      	cmp	r2, #57	; 0x39
 800b350:	d106      	bne.n	800b360 <_dtoa_r+0x700>
 800b352:	9a00      	ldr	r2, [sp, #0]
 800b354:	429a      	cmp	r2, r3
 800b356:	d1f7      	bne.n	800b348 <_dtoa_r+0x6e8>
 800b358:	9900      	ldr	r1, [sp, #0]
 800b35a:	2230      	movs	r2, #48	; 0x30
 800b35c:	3701      	adds	r7, #1
 800b35e:	700a      	strb	r2, [r1, #0]
 800b360:	781a      	ldrb	r2, [r3, #0]
 800b362:	3201      	adds	r2, #1
 800b364:	701a      	strb	r2, [r3, #0]
 800b366:	e790      	b.n	800b28a <_dtoa_r+0x62a>
 800b368:	4ba3      	ldr	r3, [pc, #652]	; (800b5f8 <_dtoa_r+0x998>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	f7f5 f94c 	bl	8000608 <__aeabi_dmul>
 800b370:	2200      	movs	r2, #0
 800b372:	2300      	movs	r3, #0
 800b374:	4606      	mov	r6, r0
 800b376:	460f      	mov	r7, r1
 800b378:	f7f5 fbae 	bl	8000ad8 <__aeabi_dcmpeq>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	d09e      	beq.n	800b2be <_dtoa_r+0x65e>
 800b380:	e7d0      	b.n	800b324 <_dtoa_r+0x6c4>
 800b382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b384:	2a00      	cmp	r2, #0
 800b386:	f000 80ca 	beq.w	800b51e <_dtoa_r+0x8be>
 800b38a:	9a07      	ldr	r2, [sp, #28]
 800b38c:	2a01      	cmp	r2, #1
 800b38e:	f300 80ad 	bgt.w	800b4ec <_dtoa_r+0x88c>
 800b392:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b394:	2a00      	cmp	r2, #0
 800b396:	f000 80a5 	beq.w	800b4e4 <_dtoa_r+0x884>
 800b39a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b39e:	9e08      	ldr	r6, [sp, #32]
 800b3a0:	9d05      	ldr	r5, [sp, #20]
 800b3a2:	9a05      	ldr	r2, [sp, #20]
 800b3a4:	441a      	add	r2, r3
 800b3a6:	9205      	str	r2, [sp, #20]
 800b3a8:	9a06      	ldr	r2, [sp, #24]
 800b3aa:	2101      	movs	r1, #1
 800b3ac:	441a      	add	r2, r3
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	9206      	str	r2, [sp, #24]
 800b3b2:	f000 fc3d 	bl	800bc30 <__i2b>
 800b3b6:	4607      	mov	r7, r0
 800b3b8:	b165      	cbz	r5, 800b3d4 <_dtoa_r+0x774>
 800b3ba:	9b06      	ldr	r3, [sp, #24]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	dd09      	ble.n	800b3d4 <_dtoa_r+0x774>
 800b3c0:	42ab      	cmp	r3, r5
 800b3c2:	9a05      	ldr	r2, [sp, #20]
 800b3c4:	bfa8      	it	ge
 800b3c6:	462b      	movge	r3, r5
 800b3c8:	1ad2      	subs	r2, r2, r3
 800b3ca:	9205      	str	r2, [sp, #20]
 800b3cc:	9a06      	ldr	r2, [sp, #24]
 800b3ce:	1aed      	subs	r5, r5, r3
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	9306      	str	r3, [sp, #24]
 800b3d4:	9b08      	ldr	r3, [sp, #32]
 800b3d6:	b1f3      	cbz	r3, 800b416 <_dtoa_r+0x7b6>
 800b3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f000 80a3 	beq.w	800b526 <_dtoa_r+0x8c6>
 800b3e0:	2e00      	cmp	r6, #0
 800b3e2:	dd10      	ble.n	800b406 <_dtoa_r+0x7a6>
 800b3e4:	4639      	mov	r1, r7
 800b3e6:	4632      	mov	r2, r6
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f000 fce1 	bl	800bdb0 <__pow5mult>
 800b3ee:	4652      	mov	r2, sl
 800b3f0:	4601      	mov	r1, r0
 800b3f2:	4607      	mov	r7, r0
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f000 fc31 	bl	800bc5c <__multiply>
 800b3fa:	4651      	mov	r1, sl
 800b3fc:	4680      	mov	r8, r0
 800b3fe:	4620      	mov	r0, r4
 800b400:	f000 fb60 	bl	800bac4 <_Bfree>
 800b404:	46c2      	mov	sl, r8
 800b406:	9b08      	ldr	r3, [sp, #32]
 800b408:	1b9a      	subs	r2, r3, r6
 800b40a:	d004      	beq.n	800b416 <_dtoa_r+0x7b6>
 800b40c:	4651      	mov	r1, sl
 800b40e:	4620      	mov	r0, r4
 800b410:	f000 fcce 	bl	800bdb0 <__pow5mult>
 800b414:	4682      	mov	sl, r0
 800b416:	2101      	movs	r1, #1
 800b418:	4620      	mov	r0, r4
 800b41a:	f000 fc09 	bl	800bc30 <__i2b>
 800b41e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b420:	2b00      	cmp	r3, #0
 800b422:	4606      	mov	r6, r0
 800b424:	f340 8081 	ble.w	800b52a <_dtoa_r+0x8ca>
 800b428:	461a      	mov	r2, r3
 800b42a:	4601      	mov	r1, r0
 800b42c:	4620      	mov	r0, r4
 800b42e:	f000 fcbf 	bl	800bdb0 <__pow5mult>
 800b432:	9b07      	ldr	r3, [sp, #28]
 800b434:	2b01      	cmp	r3, #1
 800b436:	4606      	mov	r6, r0
 800b438:	dd7a      	ble.n	800b530 <_dtoa_r+0x8d0>
 800b43a:	f04f 0800 	mov.w	r8, #0
 800b43e:	6933      	ldr	r3, [r6, #16]
 800b440:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b444:	6918      	ldr	r0, [r3, #16]
 800b446:	f000 fba5 	bl	800bb94 <__hi0bits>
 800b44a:	f1c0 0020 	rsb	r0, r0, #32
 800b44e:	9b06      	ldr	r3, [sp, #24]
 800b450:	4418      	add	r0, r3
 800b452:	f010 001f 	ands.w	r0, r0, #31
 800b456:	f000 8094 	beq.w	800b582 <_dtoa_r+0x922>
 800b45a:	f1c0 0320 	rsb	r3, r0, #32
 800b45e:	2b04      	cmp	r3, #4
 800b460:	f340 8085 	ble.w	800b56e <_dtoa_r+0x90e>
 800b464:	9b05      	ldr	r3, [sp, #20]
 800b466:	f1c0 001c 	rsb	r0, r0, #28
 800b46a:	4403      	add	r3, r0
 800b46c:	9305      	str	r3, [sp, #20]
 800b46e:	9b06      	ldr	r3, [sp, #24]
 800b470:	4403      	add	r3, r0
 800b472:	4405      	add	r5, r0
 800b474:	9306      	str	r3, [sp, #24]
 800b476:	9b05      	ldr	r3, [sp, #20]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	dd05      	ble.n	800b488 <_dtoa_r+0x828>
 800b47c:	4651      	mov	r1, sl
 800b47e:	461a      	mov	r2, r3
 800b480:	4620      	mov	r0, r4
 800b482:	f000 fcef 	bl	800be64 <__lshift>
 800b486:	4682      	mov	sl, r0
 800b488:	9b06      	ldr	r3, [sp, #24]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	dd05      	ble.n	800b49a <_dtoa_r+0x83a>
 800b48e:	4631      	mov	r1, r6
 800b490:	461a      	mov	r2, r3
 800b492:	4620      	mov	r0, r4
 800b494:	f000 fce6 	bl	800be64 <__lshift>
 800b498:	4606      	mov	r6, r0
 800b49a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d072      	beq.n	800b586 <_dtoa_r+0x926>
 800b4a0:	4631      	mov	r1, r6
 800b4a2:	4650      	mov	r0, sl
 800b4a4:	f000 fd4a 	bl	800bf3c <__mcmp>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	da6c      	bge.n	800b586 <_dtoa_r+0x926>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	4651      	mov	r1, sl
 800b4b0:	220a      	movs	r2, #10
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f000 fb28 	bl	800bb08 <__multadd>
 800b4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b4be:	4682      	mov	sl, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f000 81b0 	beq.w	800b826 <_dtoa_r+0xbc6>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	4639      	mov	r1, r7
 800b4ca:	220a      	movs	r2, #10
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	f000 fb1b 	bl	800bb08 <__multadd>
 800b4d2:	9b01      	ldr	r3, [sp, #4]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	4607      	mov	r7, r0
 800b4d8:	f300 8096 	bgt.w	800b608 <_dtoa_r+0x9a8>
 800b4dc:	9b07      	ldr	r3, [sp, #28]
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	dc59      	bgt.n	800b596 <_dtoa_r+0x936>
 800b4e2:	e091      	b.n	800b608 <_dtoa_r+0x9a8>
 800b4e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b4ea:	e758      	b.n	800b39e <_dtoa_r+0x73e>
 800b4ec:	9b04      	ldr	r3, [sp, #16]
 800b4ee:	1e5e      	subs	r6, r3, #1
 800b4f0:	9b08      	ldr	r3, [sp, #32]
 800b4f2:	42b3      	cmp	r3, r6
 800b4f4:	bfbf      	itttt	lt
 800b4f6:	9b08      	ldrlt	r3, [sp, #32]
 800b4f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b4fa:	9608      	strlt	r6, [sp, #32]
 800b4fc:	1af3      	sublt	r3, r6, r3
 800b4fe:	bfb4      	ite	lt
 800b500:	18d2      	addlt	r2, r2, r3
 800b502:	1b9e      	subge	r6, r3, r6
 800b504:	9b04      	ldr	r3, [sp, #16]
 800b506:	bfbc      	itt	lt
 800b508:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b50a:	2600      	movlt	r6, #0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	bfb7      	itett	lt
 800b510:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b514:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b518:	1a9d      	sublt	r5, r3, r2
 800b51a:	2300      	movlt	r3, #0
 800b51c:	e741      	b.n	800b3a2 <_dtoa_r+0x742>
 800b51e:	9e08      	ldr	r6, [sp, #32]
 800b520:	9d05      	ldr	r5, [sp, #20]
 800b522:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b524:	e748      	b.n	800b3b8 <_dtoa_r+0x758>
 800b526:	9a08      	ldr	r2, [sp, #32]
 800b528:	e770      	b.n	800b40c <_dtoa_r+0x7ac>
 800b52a:	9b07      	ldr	r3, [sp, #28]
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	dc19      	bgt.n	800b564 <_dtoa_r+0x904>
 800b530:	9b02      	ldr	r3, [sp, #8]
 800b532:	b9bb      	cbnz	r3, 800b564 <_dtoa_r+0x904>
 800b534:	9b03      	ldr	r3, [sp, #12]
 800b536:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b53a:	b99b      	cbnz	r3, 800b564 <_dtoa_r+0x904>
 800b53c:	9b03      	ldr	r3, [sp, #12]
 800b53e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b542:	0d1b      	lsrs	r3, r3, #20
 800b544:	051b      	lsls	r3, r3, #20
 800b546:	b183      	cbz	r3, 800b56a <_dtoa_r+0x90a>
 800b548:	9b05      	ldr	r3, [sp, #20]
 800b54a:	3301      	adds	r3, #1
 800b54c:	9305      	str	r3, [sp, #20]
 800b54e:	9b06      	ldr	r3, [sp, #24]
 800b550:	3301      	adds	r3, #1
 800b552:	9306      	str	r3, [sp, #24]
 800b554:	f04f 0801 	mov.w	r8, #1
 800b558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f47f af6f 	bne.w	800b43e <_dtoa_r+0x7de>
 800b560:	2001      	movs	r0, #1
 800b562:	e774      	b.n	800b44e <_dtoa_r+0x7ee>
 800b564:	f04f 0800 	mov.w	r8, #0
 800b568:	e7f6      	b.n	800b558 <_dtoa_r+0x8f8>
 800b56a:	4698      	mov	r8, r3
 800b56c:	e7f4      	b.n	800b558 <_dtoa_r+0x8f8>
 800b56e:	d082      	beq.n	800b476 <_dtoa_r+0x816>
 800b570:	9a05      	ldr	r2, [sp, #20]
 800b572:	331c      	adds	r3, #28
 800b574:	441a      	add	r2, r3
 800b576:	9205      	str	r2, [sp, #20]
 800b578:	9a06      	ldr	r2, [sp, #24]
 800b57a:	441a      	add	r2, r3
 800b57c:	441d      	add	r5, r3
 800b57e:	9206      	str	r2, [sp, #24]
 800b580:	e779      	b.n	800b476 <_dtoa_r+0x816>
 800b582:	4603      	mov	r3, r0
 800b584:	e7f4      	b.n	800b570 <_dtoa_r+0x910>
 800b586:	9b04      	ldr	r3, [sp, #16]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	dc37      	bgt.n	800b5fc <_dtoa_r+0x99c>
 800b58c:	9b07      	ldr	r3, [sp, #28]
 800b58e:	2b02      	cmp	r3, #2
 800b590:	dd34      	ble.n	800b5fc <_dtoa_r+0x99c>
 800b592:	9b04      	ldr	r3, [sp, #16]
 800b594:	9301      	str	r3, [sp, #4]
 800b596:	9b01      	ldr	r3, [sp, #4]
 800b598:	b963      	cbnz	r3, 800b5b4 <_dtoa_r+0x954>
 800b59a:	4631      	mov	r1, r6
 800b59c:	2205      	movs	r2, #5
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f000 fab2 	bl	800bb08 <__multadd>
 800b5a4:	4601      	mov	r1, r0
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	4650      	mov	r0, sl
 800b5aa:	f000 fcc7 	bl	800bf3c <__mcmp>
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	f73f adbb 	bgt.w	800b12a <_dtoa_r+0x4ca>
 800b5b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b6:	9d00      	ldr	r5, [sp, #0]
 800b5b8:	ea6f 0b03 	mvn.w	fp, r3
 800b5bc:	f04f 0800 	mov.w	r8, #0
 800b5c0:	4631      	mov	r1, r6
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f000 fa7e 	bl	800bac4 <_Bfree>
 800b5c8:	2f00      	cmp	r7, #0
 800b5ca:	f43f aeab 	beq.w	800b324 <_dtoa_r+0x6c4>
 800b5ce:	f1b8 0f00 	cmp.w	r8, #0
 800b5d2:	d005      	beq.n	800b5e0 <_dtoa_r+0x980>
 800b5d4:	45b8      	cmp	r8, r7
 800b5d6:	d003      	beq.n	800b5e0 <_dtoa_r+0x980>
 800b5d8:	4641      	mov	r1, r8
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f000 fa72 	bl	800bac4 <_Bfree>
 800b5e0:	4639      	mov	r1, r7
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f000 fa6e 	bl	800bac4 <_Bfree>
 800b5e8:	e69c      	b.n	800b324 <_dtoa_r+0x6c4>
 800b5ea:	2600      	movs	r6, #0
 800b5ec:	4637      	mov	r7, r6
 800b5ee:	e7e1      	b.n	800b5b4 <_dtoa_r+0x954>
 800b5f0:	46bb      	mov	fp, r7
 800b5f2:	4637      	mov	r7, r6
 800b5f4:	e599      	b.n	800b12a <_dtoa_r+0x4ca>
 800b5f6:	bf00      	nop
 800b5f8:	40240000 	.word	0x40240000
 800b5fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f000 80c8 	beq.w	800b794 <_dtoa_r+0xb34>
 800b604:	9b04      	ldr	r3, [sp, #16]
 800b606:	9301      	str	r3, [sp, #4]
 800b608:	2d00      	cmp	r5, #0
 800b60a:	dd05      	ble.n	800b618 <_dtoa_r+0x9b8>
 800b60c:	4639      	mov	r1, r7
 800b60e:	462a      	mov	r2, r5
 800b610:	4620      	mov	r0, r4
 800b612:	f000 fc27 	bl	800be64 <__lshift>
 800b616:	4607      	mov	r7, r0
 800b618:	f1b8 0f00 	cmp.w	r8, #0
 800b61c:	d05b      	beq.n	800b6d6 <_dtoa_r+0xa76>
 800b61e:	6879      	ldr	r1, [r7, #4]
 800b620:	4620      	mov	r0, r4
 800b622:	f000 fa0f 	bl	800ba44 <_Balloc>
 800b626:	4605      	mov	r5, r0
 800b628:	b928      	cbnz	r0, 800b636 <_dtoa_r+0x9d6>
 800b62a:	4b83      	ldr	r3, [pc, #524]	; (800b838 <_dtoa_r+0xbd8>)
 800b62c:	4602      	mov	r2, r0
 800b62e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b632:	f7ff bb2e 	b.w	800ac92 <_dtoa_r+0x32>
 800b636:	693a      	ldr	r2, [r7, #16]
 800b638:	3202      	adds	r2, #2
 800b63a:	0092      	lsls	r2, r2, #2
 800b63c:	f107 010c 	add.w	r1, r7, #12
 800b640:	300c      	adds	r0, #12
 800b642:	f7ff fa77 	bl	800ab34 <memcpy>
 800b646:	2201      	movs	r2, #1
 800b648:	4629      	mov	r1, r5
 800b64a:	4620      	mov	r0, r4
 800b64c:	f000 fc0a 	bl	800be64 <__lshift>
 800b650:	9b00      	ldr	r3, [sp, #0]
 800b652:	3301      	adds	r3, #1
 800b654:	9304      	str	r3, [sp, #16]
 800b656:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b65a:	4413      	add	r3, r2
 800b65c:	9308      	str	r3, [sp, #32]
 800b65e:	9b02      	ldr	r3, [sp, #8]
 800b660:	f003 0301 	and.w	r3, r3, #1
 800b664:	46b8      	mov	r8, r7
 800b666:	9306      	str	r3, [sp, #24]
 800b668:	4607      	mov	r7, r0
 800b66a:	9b04      	ldr	r3, [sp, #16]
 800b66c:	4631      	mov	r1, r6
 800b66e:	3b01      	subs	r3, #1
 800b670:	4650      	mov	r0, sl
 800b672:	9301      	str	r3, [sp, #4]
 800b674:	f7ff fa6c 	bl	800ab50 <quorem>
 800b678:	4641      	mov	r1, r8
 800b67a:	9002      	str	r0, [sp, #8]
 800b67c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b680:	4650      	mov	r0, sl
 800b682:	f000 fc5b 	bl	800bf3c <__mcmp>
 800b686:	463a      	mov	r2, r7
 800b688:	9005      	str	r0, [sp, #20]
 800b68a:	4631      	mov	r1, r6
 800b68c:	4620      	mov	r0, r4
 800b68e:	f000 fc71 	bl	800bf74 <__mdiff>
 800b692:	68c2      	ldr	r2, [r0, #12]
 800b694:	4605      	mov	r5, r0
 800b696:	bb02      	cbnz	r2, 800b6da <_dtoa_r+0xa7a>
 800b698:	4601      	mov	r1, r0
 800b69a:	4650      	mov	r0, sl
 800b69c:	f000 fc4e 	bl	800bf3c <__mcmp>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	9209      	str	r2, [sp, #36]	; 0x24
 800b6a8:	f000 fa0c 	bl	800bac4 <_Bfree>
 800b6ac:	9b07      	ldr	r3, [sp, #28]
 800b6ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6b0:	9d04      	ldr	r5, [sp, #16]
 800b6b2:	ea43 0102 	orr.w	r1, r3, r2
 800b6b6:	9b06      	ldr	r3, [sp, #24]
 800b6b8:	4319      	orrs	r1, r3
 800b6ba:	d110      	bne.n	800b6de <_dtoa_r+0xa7e>
 800b6bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b6c0:	d029      	beq.n	800b716 <_dtoa_r+0xab6>
 800b6c2:	9b05      	ldr	r3, [sp, #20]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	dd02      	ble.n	800b6ce <_dtoa_r+0xa6e>
 800b6c8:	9b02      	ldr	r3, [sp, #8]
 800b6ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b6ce:	9b01      	ldr	r3, [sp, #4]
 800b6d0:	f883 9000 	strb.w	r9, [r3]
 800b6d4:	e774      	b.n	800b5c0 <_dtoa_r+0x960>
 800b6d6:	4638      	mov	r0, r7
 800b6d8:	e7ba      	b.n	800b650 <_dtoa_r+0x9f0>
 800b6da:	2201      	movs	r2, #1
 800b6dc:	e7e1      	b.n	800b6a2 <_dtoa_r+0xa42>
 800b6de:	9b05      	ldr	r3, [sp, #20]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	db04      	blt.n	800b6ee <_dtoa_r+0xa8e>
 800b6e4:	9907      	ldr	r1, [sp, #28]
 800b6e6:	430b      	orrs	r3, r1
 800b6e8:	9906      	ldr	r1, [sp, #24]
 800b6ea:	430b      	orrs	r3, r1
 800b6ec:	d120      	bne.n	800b730 <_dtoa_r+0xad0>
 800b6ee:	2a00      	cmp	r2, #0
 800b6f0:	dded      	ble.n	800b6ce <_dtoa_r+0xa6e>
 800b6f2:	4651      	mov	r1, sl
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f000 fbb4 	bl	800be64 <__lshift>
 800b6fc:	4631      	mov	r1, r6
 800b6fe:	4682      	mov	sl, r0
 800b700:	f000 fc1c 	bl	800bf3c <__mcmp>
 800b704:	2800      	cmp	r0, #0
 800b706:	dc03      	bgt.n	800b710 <_dtoa_r+0xab0>
 800b708:	d1e1      	bne.n	800b6ce <_dtoa_r+0xa6e>
 800b70a:	f019 0f01 	tst.w	r9, #1
 800b70e:	d0de      	beq.n	800b6ce <_dtoa_r+0xa6e>
 800b710:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b714:	d1d8      	bne.n	800b6c8 <_dtoa_r+0xa68>
 800b716:	9a01      	ldr	r2, [sp, #4]
 800b718:	2339      	movs	r3, #57	; 0x39
 800b71a:	7013      	strb	r3, [r2, #0]
 800b71c:	462b      	mov	r3, r5
 800b71e:	461d      	mov	r5, r3
 800b720:	3b01      	subs	r3, #1
 800b722:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b726:	2a39      	cmp	r2, #57	; 0x39
 800b728:	d06c      	beq.n	800b804 <_dtoa_r+0xba4>
 800b72a:	3201      	adds	r2, #1
 800b72c:	701a      	strb	r2, [r3, #0]
 800b72e:	e747      	b.n	800b5c0 <_dtoa_r+0x960>
 800b730:	2a00      	cmp	r2, #0
 800b732:	dd07      	ble.n	800b744 <_dtoa_r+0xae4>
 800b734:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b738:	d0ed      	beq.n	800b716 <_dtoa_r+0xab6>
 800b73a:	9a01      	ldr	r2, [sp, #4]
 800b73c:	f109 0301 	add.w	r3, r9, #1
 800b740:	7013      	strb	r3, [r2, #0]
 800b742:	e73d      	b.n	800b5c0 <_dtoa_r+0x960>
 800b744:	9b04      	ldr	r3, [sp, #16]
 800b746:	9a08      	ldr	r2, [sp, #32]
 800b748:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d043      	beq.n	800b7d8 <_dtoa_r+0xb78>
 800b750:	4651      	mov	r1, sl
 800b752:	2300      	movs	r3, #0
 800b754:	220a      	movs	r2, #10
 800b756:	4620      	mov	r0, r4
 800b758:	f000 f9d6 	bl	800bb08 <__multadd>
 800b75c:	45b8      	cmp	r8, r7
 800b75e:	4682      	mov	sl, r0
 800b760:	f04f 0300 	mov.w	r3, #0
 800b764:	f04f 020a 	mov.w	r2, #10
 800b768:	4641      	mov	r1, r8
 800b76a:	4620      	mov	r0, r4
 800b76c:	d107      	bne.n	800b77e <_dtoa_r+0xb1e>
 800b76e:	f000 f9cb 	bl	800bb08 <__multadd>
 800b772:	4680      	mov	r8, r0
 800b774:	4607      	mov	r7, r0
 800b776:	9b04      	ldr	r3, [sp, #16]
 800b778:	3301      	adds	r3, #1
 800b77a:	9304      	str	r3, [sp, #16]
 800b77c:	e775      	b.n	800b66a <_dtoa_r+0xa0a>
 800b77e:	f000 f9c3 	bl	800bb08 <__multadd>
 800b782:	4639      	mov	r1, r7
 800b784:	4680      	mov	r8, r0
 800b786:	2300      	movs	r3, #0
 800b788:	220a      	movs	r2, #10
 800b78a:	4620      	mov	r0, r4
 800b78c:	f000 f9bc 	bl	800bb08 <__multadd>
 800b790:	4607      	mov	r7, r0
 800b792:	e7f0      	b.n	800b776 <_dtoa_r+0xb16>
 800b794:	9b04      	ldr	r3, [sp, #16]
 800b796:	9301      	str	r3, [sp, #4]
 800b798:	9d00      	ldr	r5, [sp, #0]
 800b79a:	4631      	mov	r1, r6
 800b79c:	4650      	mov	r0, sl
 800b79e:	f7ff f9d7 	bl	800ab50 <quorem>
 800b7a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b7a6:	9b00      	ldr	r3, [sp, #0]
 800b7a8:	f805 9b01 	strb.w	r9, [r5], #1
 800b7ac:	1aea      	subs	r2, r5, r3
 800b7ae:	9b01      	ldr	r3, [sp, #4]
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	dd07      	ble.n	800b7c4 <_dtoa_r+0xb64>
 800b7b4:	4651      	mov	r1, sl
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	220a      	movs	r2, #10
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f000 f9a4 	bl	800bb08 <__multadd>
 800b7c0:	4682      	mov	sl, r0
 800b7c2:	e7ea      	b.n	800b79a <_dtoa_r+0xb3a>
 800b7c4:	9b01      	ldr	r3, [sp, #4]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	bfc8      	it	gt
 800b7ca:	461d      	movgt	r5, r3
 800b7cc:	9b00      	ldr	r3, [sp, #0]
 800b7ce:	bfd8      	it	le
 800b7d0:	2501      	movle	r5, #1
 800b7d2:	441d      	add	r5, r3
 800b7d4:	f04f 0800 	mov.w	r8, #0
 800b7d8:	4651      	mov	r1, sl
 800b7da:	2201      	movs	r2, #1
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f000 fb41 	bl	800be64 <__lshift>
 800b7e2:	4631      	mov	r1, r6
 800b7e4:	4682      	mov	sl, r0
 800b7e6:	f000 fba9 	bl	800bf3c <__mcmp>
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	dc96      	bgt.n	800b71c <_dtoa_r+0xabc>
 800b7ee:	d102      	bne.n	800b7f6 <_dtoa_r+0xb96>
 800b7f0:	f019 0f01 	tst.w	r9, #1
 800b7f4:	d192      	bne.n	800b71c <_dtoa_r+0xabc>
 800b7f6:	462b      	mov	r3, r5
 800b7f8:	461d      	mov	r5, r3
 800b7fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7fe:	2a30      	cmp	r2, #48	; 0x30
 800b800:	d0fa      	beq.n	800b7f8 <_dtoa_r+0xb98>
 800b802:	e6dd      	b.n	800b5c0 <_dtoa_r+0x960>
 800b804:	9a00      	ldr	r2, [sp, #0]
 800b806:	429a      	cmp	r2, r3
 800b808:	d189      	bne.n	800b71e <_dtoa_r+0xabe>
 800b80a:	f10b 0b01 	add.w	fp, fp, #1
 800b80e:	2331      	movs	r3, #49	; 0x31
 800b810:	e796      	b.n	800b740 <_dtoa_r+0xae0>
 800b812:	4b0a      	ldr	r3, [pc, #40]	; (800b83c <_dtoa_r+0xbdc>)
 800b814:	f7ff ba99 	b.w	800ad4a <_dtoa_r+0xea>
 800b818:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f47f aa6d 	bne.w	800acfa <_dtoa_r+0x9a>
 800b820:	4b07      	ldr	r3, [pc, #28]	; (800b840 <_dtoa_r+0xbe0>)
 800b822:	f7ff ba92 	b.w	800ad4a <_dtoa_r+0xea>
 800b826:	9b01      	ldr	r3, [sp, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	dcb5      	bgt.n	800b798 <_dtoa_r+0xb38>
 800b82c:	9b07      	ldr	r3, [sp, #28]
 800b82e:	2b02      	cmp	r3, #2
 800b830:	f73f aeb1 	bgt.w	800b596 <_dtoa_r+0x936>
 800b834:	e7b0      	b.n	800b798 <_dtoa_r+0xb38>
 800b836:	bf00      	nop
 800b838:	0800dbd0 	.word	0x0800dbd0
 800b83c:	0800db30 	.word	0x0800db30
 800b840:	0800db54 	.word	0x0800db54

0800b844 <_free_r>:
 800b844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b846:	2900      	cmp	r1, #0
 800b848:	d044      	beq.n	800b8d4 <_free_r+0x90>
 800b84a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b84e:	9001      	str	r0, [sp, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	f1a1 0404 	sub.w	r4, r1, #4
 800b856:	bfb8      	it	lt
 800b858:	18e4      	addlt	r4, r4, r3
 800b85a:	f000 f8e7 	bl	800ba2c <__malloc_lock>
 800b85e:	4a1e      	ldr	r2, [pc, #120]	; (800b8d8 <_free_r+0x94>)
 800b860:	9801      	ldr	r0, [sp, #4]
 800b862:	6813      	ldr	r3, [r2, #0]
 800b864:	b933      	cbnz	r3, 800b874 <_free_r+0x30>
 800b866:	6063      	str	r3, [r4, #4]
 800b868:	6014      	str	r4, [r2, #0]
 800b86a:	b003      	add	sp, #12
 800b86c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b870:	f000 b8e2 	b.w	800ba38 <__malloc_unlock>
 800b874:	42a3      	cmp	r3, r4
 800b876:	d908      	bls.n	800b88a <_free_r+0x46>
 800b878:	6825      	ldr	r5, [r4, #0]
 800b87a:	1961      	adds	r1, r4, r5
 800b87c:	428b      	cmp	r3, r1
 800b87e:	bf01      	itttt	eq
 800b880:	6819      	ldreq	r1, [r3, #0]
 800b882:	685b      	ldreq	r3, [r3, #4]
 800b884:	1949      	addeq	r1, r1, r5
 800b886:	6021      	streq	r1, [r4, #0]
 800b888:	e7ed      	b.n	800b866 <_free_r+0x22>
 800b88a:	461a      	mov	r2, r3
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	b10b      	cbz	r3, 800b894 <_free_r+0x50>
 800b890:	42a3      	cmp	r3, r4
 800b892:	d9fa      	bls.n	800b88a <_free_r+0x46>
 800b894:	6811      	ldr	r1, [r2, #0]
 800b896:	1855      	adds	r5, r2, r1
 800b898:	42a5      	cmp	r5, r4
 800b89a:	d10b      	bne.n	800b8b4 <_free_r+0x70>
 800b89c:	6824      	ldr	r4, [r4, #0]
 800b89e:	4421      	add	r1, r4
 800b8a0:	1854      	adds	r4, r2, r1
 800b8a2:	42a3      	cmp	r3, r4
 800b8a4:	6011      	str	r1, [r2, #0]
 800b8a6:	d1e0      	bne.n	800b86a <_free_r+0x26>
 800b8a8:	681c      	ldr	r4, [r3, #0]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	6053      	str	r3, [r2, #4]
 800b8ae:	440c      	add	r4, r1
 800b8b0:	6014      	str	r4, [r2, #0]
 800b8b2:	e7da      	b.n	800b86a <_free_r+0x26>
 800b8b4:	d902      	bls.n	800b8bc <_free_r+0x78>
 800b8b6:	230c      	movs	r3, #12
 800b8b8:	6003      	str	r3, [r0, #0]
 800b8ba:	e7d6      	b.n	800b86a <_free_r+0x26>
 800b8bc:	6825      	ldr	r5, [r4, #0]
 800b8be:	1961      	adds	r1, r4, r5
 800b8c0:	428b      	cmp	r3, r1
 800b8c2:	bf04      	itt	eq
 800b8c4:	6819      	ldreq	r1, [r3, #0]
 800b8c6:	685b      	ldreq	r3, [r3, #4]
 800b8c8:	6063      	str	r3, [r4, #4]
 800b8ca:	bf04      	itt	eq
 800b8cc:	1949      	addeq	r1, r1, r5
 800b8ce:	6021      	streq	r1, [r4, #0]
 800b8d0:	6054      	str	r4, [r2, #4]
 800b8d2:	e7ca      	b.n	800b86a <_free_r+0x26>
 800b8d4:	b003      	add	sp, #12
 800b8d6:	bd30      	pop	{r4, r5, pc}
 800b8d8:	200029cc 	.word	0x200029cc

0800b8dc <malloc>:
 800b8dc:	4b02      	ldr	r3, [pc, #8]	; (800b8e8 <malloc+0xc>)
 800b8de:	4601      	mov	r1, r0
 800b8e0:	6818      	ldr	r0, [r3, #0]
 800b8e2:	f000 b823 	b.w	800b92c <_malloc_r>
 800b8e6:	bf00      	nop
 800b8e8:	200001f4 	.word	0x200001f4

0800b8ec <sbrk_aligned>:
 800b8ec:	b570      	push	{r4, r5, r6, lr}
 800b8ee:	4e0e      	ldr	r6, [pc, #56]	; (800b928 <sbrk_aligned+0x3c>)
 800b8f0:	460c      	mov	r4, r1
 800b8f2:	6831      	ldr	r1, [r6, #0]
 800b8f4:	4605      	mov	r5, r0
 800b8f6:	b911      	cbnz	r1, 800b8fe <sbrk_aligned+0x12>
 800b8f8:	f000 fe26 	bl	800c548 <_sbrk_r>
 800b8fc:	6030      	str	r0, [r6, #0]
 800b8fe:	4621      	mov	r1, r4
 800b900:	4628      	mov	r0, r5
 800b902:	f000 fe21 	bl	800c548 <_sbrk_r>
 800b906:	1c43      	adds	r3, r0, #1
 800b908:	d00a      	beq.n	800b920 <sbrk_aligned+0x34>
 800b90a:	1cc4      	adds	r4, r0, #3
 800b90c:	f024 0403 	bic.w	r4, r4, #3
 800b910:	42a0      	cmp	r0, r4
 800b912:	d007      	beq.n	800b924 <sbrk_aligned+0x38>
 800b914:	1a21      	subs	r1, r4, r0
 800b916:	4628      	mov	r0, r5
 800b918:	f000 fe16 	bl	800c548 <_sbrk_r>
 800b91c:	3001      	adds	r0, #1
 800b91e:	d101      	bne.n	800b924 <sbrk_aligned+0x38>
 800b920:	f04f 34ff 	mov.w	r4, #4294967295
 800b924:	4620      	mov	r0, r4
 800b926:	bd70      	pop	{r4, r5, r6, pc}
 800b928:	200029d0 	.word	0x200029d0

0800b92c <_malloc_r>:
 800b92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b930:	1ccd      	adds	r5, r1, #3
 800b932:	f025 0503 	bic.w	r5, r5, #3
 800b936:	3508      	adds	r5, #8
 800b938:	2d0c      	cmp	r5, #12
 800b93a:	bf38      	it	cc
 800b93c:	250c      	movcc	r5, #12
 800b93e:	2d00      	cmp	r5, #0
 800b940:	4607      	mov	r7, r0
 800b942:	db01      	blt.n	800b948 <_malloc_r+0x1c>
 800b944:	42a9      	cmp	r1, r5
 800b946:	d905      	bls.n	800b954 <_malloc_r+0x28>
 800b948:	230c      	movs	r3, #12
 800b94a:	603b      	str	r3, [r7, #0]
 800b94c:	2600      	movs	r6, #0
 800b94e:	4630      	mov	r0, r6
 800b950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b954:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ba28 <_malloc_r+0xfc>
 800b958:	f000 f868 	bl	800ba2c <__malloc_lock>
 800b95c:	f8d8 3000 	ldr.w	r3, [r8]
 800b960:	461c      	mov	r4, r3
 800b962:	bb5c      	cbnz	r4, 800b9bc <_malloc_r+0x90>
 800b964:	4629      	mov	r1, r5
 800b966:	4638      	mov	r0, r7
 800b968:	f7ff ffc0 	bl	800b8ec <sbrk_aligned>
 800b96c:	1c43      	adds	r3, r0, #1
 800b96e:	4604      	mov	r4, r0
 800b970:	d155      	bne.n	800ba1e <_malloc_r+0xf2>
 800b972:	f8d8 4000 	ldr.w	r4, [r8]
 800b976:	4626      	mov	r6, r4
 800b978:	2e00      	cmp	r6, #0
 800b97a:	d145      	bne.n	800ba08 <_malloc_r+0xdc>
 800b97c:	2c00      	cmp	r4, #0
 800b97e:	d048      	beq.n	800ba12 <_malloc_r+0xe6>
 800b980:	6823      	ldr	r3, [r4, #0]
 800b982:	4631      	mov	r1, r6
 800b984:	4638      	mov	r0, r7
 800b986:	eb04 0903 	add.w	r9, r4, r3
 800b98a:	f000 fddd 	bl	800c548 <_sbrk_r>
 800b98e:	4581      	cmp	r9, r0
 800b990:	d13f      	bne.n	800ba12 <_malloc_r+0xe6>
 800b992:	6821      	ldr	r1, [r4, #0]
 800b994:	1a6d      	subs	r5, r5, r1
 800b996:	4629      	mov	r1, r5
 800b998:	4638      	mov	r0, r7
 800b99a:	f7ff ffa7 	bl	800b8ec <sbrk_aligned>
 800b99e:	3001      	adds	r0, #1
 800b9a0:	d037      	beq.n	800ba12 <_malloc_r+0xe6>
 800b9a2:	6823      	ldr	r3, [r4, #0]
 800b9a4:	442b      	add	r3, r5
 800b9a6:	6023      	str	r3, [r4, #0]
 800b9a8:	f8d8 3000 	ldr.w	r3, [r8]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d038      	beq.n	800ba22 <_malloc_r+0xf6>
 800b9b0:	685a      	ldr	r2, [r3, #4]
 800b9b2:	42a2      	cmp	r2, r4
 800b9b4:	d12b      	bne.n	800ba0e <_malloc_r+0xe2>
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	605a      	str	r2, [r3, #4]
 800b9ba:	e00f      	b.n	800b9dc <_malloc_r+0xb0>
 800b9bc:	6822      	ldr	r2, [r4, #0]
 800b9be:	1b52      	subs	r2, r2, r5
 800b9c0:	d41f      	bmi.n	800ba02 <_malloc_r+0xd6>
 800b9c2:	2a0b      	cmp	r2, #11
 800b9c4:	d917      	bls.n	800b9f6 <_malloc_r+0xca>
 800b9c6:	1961      	adds	r1, r4, r5
 800b9c8:	42a3      	cmp	r3, r4
 800b9ca:	6025      	str	r5, [r4, #0]
 800b9cc:	bf18      	it	ne
 800b9ce:	6059      	strne	r1, [r3, #4]
 800b9d0:	6863      	ldr	r3, [r4, #4]
 800b9d2:	bf08      	it	eq
 800b9d4:	f8c8 1000 	streq.w	r1, [r8]
 800b9d8:	5162      	str	r2, [r4, r5]
 800b9da:	604b      	str	r3, [r1, #4]
 800b9dc:	4638      	mov	r0, r7
 800b9de:	f104 060b 	add.w	r6, r4, #11
 800b9e2:	f000 f829 	bl	800ba38 <__malloc_unlock>
 800b9e6:	f026 0607 	bic.w	r6, r6, #7
 800b9ea:	1d23      	adds	r3, r4, #4
 800b9ec:	1af2      	subs	r2, r6, r3
 800b9ee:	d0ae      	beq.n	800b94e <_malloc_r+0x22>
 800b9f0:	1b9b      	subs	r3, r3, r6
 800b9f2:	50a3      	str	r3, [r4, r2]
 800b9f4:	e7ab      	b.n	800b94e <_malloc_r+0x22>
 800b9f6:	42a3      	cmp	r3, r4
 800b9f8:	6862      	ldr	r2, [r4, #4]
 800b9fa:	d1dd      	bne.n	800b9b8 <_malloc_r+0x8c>
 800b9fc:	f8c8 2000 	str.w	r2, [r8]
 800ba00:	e7ec      	b.n	800b9dc <_malloc_r+0xb0>
 800ba02:	4623      	mov	r3, r4
 800ba04:	6864      	ldr	r4, [r4, #4]
 800ba06:	e7ac      	b.n	800b962 <_malloc_r+0x36>
 800ba08:	4634      	mov	r4, r6
 800ba0a:	6876      	ldr	r6, [r6, #4]
 800ba0c:	e7b4      	b.n	800b978 <_malloc_r+0x4c>
 800ba0e:	4613      	mov	r3, r2
 800ba10:	e7cc      	b.n	800b9ac <_malloc_r+0x80>
 800ba12:	230c      	movs	r3, #12
 800ba14:	603b      	str	r3, [r7, #0]
 800ba16:	4638      	mov	r0, r7
 800ba18:	f000 f80e 	bl	800ba38 <__malloc_unlock>
 800ba1c:	e797      	b.n	800b94e <_malloc_r+0x22>
 800ba1e:	6025      	str	r5, [r4, #0]
 800ba20:	e7dc      	b.n	800b9dc <_malloc_r+0xb0>
 800ba22:	605b      	str	r3, [r3, #4]
 800ba24:	deff      	udf	#255	; 0xff
 800ba26:	bf00      	nop
 800ba28:	200029cc 	.word	0x200029cc

0800ba2c <__malloc_lock>:
 800ba2c:	4801      	ldr	r0, [pc, #4]	; (800ba34 <__malloc_lock+0x8>)
 800ba2e:	f7ff b87f 	b.w	800ab30 <__retarget_lock_acquire_recursive>
 800ba32:	bf00      	nop
 800ba34:	200029c8 	.word	0x200029c8

0800ba38 <__malloc_unlock>:
 800ba38:	4801      	ldr	r0, [pc, #4]	; (800ba40 <__malloc_unlock+0x8>)
 800ba3a:	f7ff b87a 	b.w	800ab32 <__retarget_lock_release_recursive>
 800ba3e:	bf00      	nop
 800ba40:	200029c8 	.word	0x200029c8

0800ba44 <_Balloc>:
 800ba44:	b570      	push	{r4, r5, r6, lr}
 800ba46:	69c6      	ldr	r6, [r0, #28]
 800ba48:	4604      	mov	r4, r0
 800ba4a:	460d      	mov	r5, r1
 800ba4c:	b976      	cbnz	r6, 800ba6c <_Balloc+0x28>
 800ba4e:	2010      	movs	r0, #16
 800ba50:	f7ff ff44 	bl	800b8dc <malloc>
 800ba54:	4602      	mov	r2, r0
 800ba56:	61e0      	str	r0, [r4, #28]
 800ba58:	b920      	cbnz	r0, 800ba64 <_Balloc+0x20>
 800ba5a:	4b18      	ldr	r3, [pc, #96]	; (800babc <_Balloc+0x78>)
 800ba5c:	4818      	ldr	r0, [pc, #96]	; (800bac0 <_Balloc+0x7c>)
 800ba5e:	216b      	movs	r1, #107	; 0x6b
 800ba60:	f000 fd82 	bl	800c568 <__assert_func>
 800ba64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba68:	6006      	str	r6, [r0, #0]
 800ba6a:	60c6      	str	r6, [r0, #12]
 800ba6c:	69e6      	ldr	r6, [r4, #28]
 800ba6e:	68f3      	ldr	r3, [r6, #12]
 800ba70:	b183      	cbz	r3, 800ba94 <_Balloc+0x50>
 800ba72:	69e3      	ldr	r3, [r4, #28]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba7a:	b9b8      	cbnz	r0, 800baac <_Balloc+0x68>
 800ba7c:	2101      	movs	r1, #1
 800ba7e:	fa01 f605 	lsl.w	r6, r1, r5
 800ba82:	1d72      	adds	r2, r6, #5
 800ba84:	0092      	lsls	r2, r2, #2
 800ba86:	4620      	mov	r0, r4
 800ba88:	f000 fd8c 	bl	800c5a4 <_calloc_r>
 800ba8c:	b160      	cbz	r0, 800baa8 <_Balloc+0x64>
 800ba8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba92:	e00e      	b.n	800bab2 <_Balloc+0x6e>
 800ba94:	2221      	movs	r2, #33	; 0x21
 800ba96:	2104      	movs	r1, #4
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f000 fd83 	bl	800c5a4 <_calloc_r>
 800ba9e:	69e3      	ldr	r3, [r4, #28]
 800baa0:	60f0      	str	r0, [r6, #12]
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1e4      	bne.n	800ba72 <_Balloc+0x2e>
 800baa8:	2000      	movs	r0, #0
 800baaa:	bd70      	pop	{r4, r5, r6, pc}
 800baac:	6802      	ldr	r2, [r0, #0]
 800baae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bab2:	2300      	movs	r3, #0
 800bab4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bab8:	e7f7      	b.n	800baaa <_Balloc+0x66>
 800baba:	bf00      	nop
 800babc:	0800db61 	.word	0x0800db61
 800bac0:	0800dbe1 	.word	0x0800dbe1

0800bac4 <_Bfree>:
 800bac4:	b570      	push	{r4, r5, r6, lr}
 800bac6:	69c6      	ldr	r6, [r0, #28]
 800bac8:	4605      	mov	r5, r0
 800baca:	460c      	mov	r4, r1
 800bacc:	b976      	cbnz	r6, 800baec <_Bfree+0x28>
 800bace:	2010      	movs	r0, #16
 800bad0:	f7ff ff04 	bl	800b8dc <malloc>
 800bad4:	4602      	mov	r2, r0
 800bad6:	61e8      	str	r0, [r5, #28]
 800bad8:	b920      	cbnz	r0, 800bae4 <_Bfree+0x20>
 800bada:	4b09      	ldr	r3, [pc, #36]	; (800bb00 <_Bfree+0x3c>)
 800badc:	4809      	ldr	r0, [pc, #36]	; (800bb04 <_Bfree+0x40>)
 800bade:	218f      	movs	r1, #143	; 0x8f
 800bae0:	f000 fd42 	bl	800c568 <__assert_func>
 800bae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bae8:	6006      	str	r6, [r0, #0]
 800baea:	60c6      	str	r6, [r0, #12]
 800baec:	b13c      	cbz	r4, 800bafe <_Bfree+0x3a>
 800baee:	69eb      	ldr	r3, [r5, #28]
 800baf0:	6862      	ldr	r2, [r4, #4]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800baf8:	6021      	str	r1, [r4, #0]
 800bafa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bafe:	bd70      	pop	{r4, r5, r6, pc}
 800bb00:	0800db61 	.word	0x0800db61
 800bb04:	0800dbe1 	.word	0x0800dbe1

0800bb08 <__multadd>:
 800bb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb0c:	690d      	ldr	r5, [r1, #16]
 800bb0e:	4607      	mov	r7, r0
 800bb10:	460c      	mov	r4, r1
 800bb12:	461e      	mov	r6, r3
 800bb14:	f101 0c14 	add.w	ip, r1, #20
 800bb18:	2000      	movs	r0, #0
 800bb1a:	f8dc 3000 	ldr.w	r3, [ip]
 800bb1e:	b299      	uxth	r1, r3
 800bb20:	fb02 6101 	mla	r1, r2, r1, r6
 800bb24:	0c1e      	lsrs	r6, r3, #16
 800bb26:	0c0b      	lsrs	r3, r1, #16
 800bb28:	fb02 3306 	mla	r3, r2, r6, r3
 800bb2c:	b289      	uxth	r1, r1
 800bb2e:	3001      	adds	r0, #1
 800bb30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb34:	4285      	cmp	r5, r0
 800bb36:	f84c 1b04 	str.w	r1, [ip], #4
 800bb3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb3e:	dcec      	bgt.n	800bb1a <__multadd+0x12>
 800bb40:	b30e      	cbz	r6, 800bb86 <__multadd+0x7e>
 800bb42:	68a3      	ldr	r3, [r4, #8]
 800bb44:	42ab      	cmp	r3, r5
 800bb46:	dc19      	bgt.n	800bb7c <__multadd+0x74>
 800bb48:	6861      	ldr	r1, [r4, #4]
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	3101      	adds	r1, #1
 800bb4e:	f7ff ff79 	bl	800ba44 <_Balloc>
 800bb52:	4680      	mov	r8, r0
 800bb54:	b928      	cbnz	r0, 800bb62 <__multadd+0x5a>
 800bb56:	4602      	mov	r2, r0
 800bb58:	4b0c      	ldr	r3, [pc, #48]	; (800bb8c <__multadd+0x84>)
 800bb5a:	480d      	ldr	r0, [pc, #52]	; (800bb90 <__multadd+0x88>)
 800bb5c:	21ba      	movs	r1, #186	; 0xba
 800bb5e:	f000 fd03 	bl	800c568 <__assert_func>
 800bb62:	6922      	ldr	r2, [r4, #16]
 800bb64:	3202      	adds	r2, #2
 800bb66:	f104 010c 	add.w	r1, r4, #12
 800bb6a:	0092      	lsls	r2, r2, #2
 800bb6c:	300c      	adds	r0, #12
 800bb6e:	f7fe ffe1 	bl	800ab34 <memcpy>
 800bb72:	4621      	mov	r1, r4
 800bb74:	4638      	mov	r0, r7
 800bb76:	f7ff ffa5 	bl	800bac4 <_Bfree>
 800bb7a:	4644      	mov	r4, r8
 800bb7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb80:	3501      	adds	r5, #1
 800bb82:	615e      	str	r6, [r3, #20]
 800bb84:	6125      	str	r5, [r4, #16]
 800bb86:	4620      	mov	r0, r4
 800bb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb8c:	0800dbd0 	.word	0x0800dbd0
 800bb90:	0800dbe1 	.word	0x0800dbe1

0800bb94 <__hi0bits>:
 800bb94:	0c03      	lsrs	r3, r0, #16
 800bb96:	041b      	lsls	r3, r3, #16
 800bb98:	b9d3      	cbnz	r3, 800bbd0 <__hi0bits+0x3c>
 800bb9a:	0400      	lsls	r0, r0, #16
 800bb9c:	2310      	movs	r3, #16
 800bb9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bba2:	bf04      	itt	eq
 800bba4:	0200      	lsleq	r0, r0, #8
 800bba6:	3308      	addeq	r3, #8
 800bba8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bbac:	bf04      	itt	eq
 800bbae:	0100      	lsleq	r0, r0, #4
 800bbb0:	3304      	addeq	r3, #4
 800bbb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbb6:	bf04      	itt	eq
 800bbb8:	0080      	lsleq	r0, r0, #2
 800bbba:	3302      	addeq	r3, #2
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	db05      	blt.n	800bbcc <__hi0bits+0x38>
 800bbc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbc4:	f103 0301 	add.w	r3, r3, #1
 800bbc8:	bf08      	it	eq
 800bbca:	2320      	moveq	r3, #32
 800bbcc:	4618      	mov	r0, r3
 800bbce:	4770      	bx	lr
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	e7e4      	b.n	800bb9e <__hi0bits+0xa>

0800bbd4 <__lo0bits>:
 800bbd4:	6803      	ldr	r3, [r0, #0]
 800bbd6:	f013 0207 	ands.w	r2, r3, #7
 800bbda:	d00c      	beq.n	800bbf6 <__lo0bits+0x22>
 800bbdc:	07d9      	lsls	r1, r3, #31
 800bbde:	d422      	bmi.n	800bc26 <__lo0bits+0x52>
 800bbe0:	079a      	lsls	r2, r3, #30
 800bbe2:	bf49      	itett	mi
 800bbe4:	085b      	lsrmi	r3, r3, #1
 800bbe6:	089b      	lsrpl	r3, r3, #2
 800bbe8:	6003      	strmi	r3, [r0, #0]
 800bbea:	2201      	movmi	r2, #1
 800bbec:	bf5c      	itt	pl
 800bbee:	6003      	strpl	r3, [r0, #0]
 800bbf0:	2202      	movpl	r2, #2
 800bbf2:	4610      	mov	r0, r2
 800bbf4:	4770      	bx	lr
 800bbf6:	b299      	uxth	r1, r3
 800bbf8:	b909      	cbnz	r1, 800bbfe <__lo0bits+0x2a>
 800bbfa:	0c1b      	lsrs	r3, r3, #16
 800bbfc:	2210      	movs	r2, #16
 800bbfe:	b2d9      	uxtb	r1, r3
 800bc00:	b909      	cbnz	r1, 800bc06 <__lo0bits+0x32>
 800bc02:	3208      	adds	r2, #8
 800bc04:	0a1b      	lsrs	r3, r3, #8
 800bc06:	0719      	lsls	r1, r3, #28
 800bc08:	bf04      	itt	eq
 800bc0a:	091b      	lsreq	r3, r3, #4
 800bc0c:	3204      	addeq	r2, #4
 800bc0e:	0799      	lsls	r1, r3, #30
 800bc10:	bf04      	itt	eq
 800bc12:	089b      	lsreq	r3, r3, #2
 800bc14:	3202      	addeq	r2, #2
 800bc16:	07d9      	lsls	r1, r3, #31
 800bc18:	d403      	bmi.n	800bc22 <__lo0bits+0x4e>
 800bc1a:	085b      	lsrs	r3, r3, #1
 800bc1c:	f102 0201 	add.w	r2, r2, #1
 800bc20:	d003      	beq.n	800bc2a <__lo0bits+0x56>
 800bc22:	6003      	str	r3, [r0, #0]
 800bc24:	e7e5      	b.n	800bbf2 <__lo0bits+0x1e>
 800bc26:	2200      	movs	r2, #0
 800bc28:	e7e3      	b.n	800bbf2 <__lo0bits+0x1e>
 800bc2a:	2220      	movs	r2, #32
 800bc2c:	e7e1      	b.n	800bbf2 <__lo0bits+0x1e>
	...

0800bc30 <__i2b>:
 800bc30:	b510      	push	{r4, lr}
 800bc32:	460c      	mov	r4, r1
 800bc34:	2101      	movs	r1, #1
 800bc36:	f7ff ff05 	bl	800ba44 <_Balloc>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	b928      	cbnz	r0, 800bc4a <__i2b+0x1a>
 800bc3e:	4b05      	ldr	r3, [pc, #20]	; (800bc54 <__i2b+0x24>)
 800bc40:	4805      	ldr	r0, [pc, #20]	; (800bc58 <__i2b+0x28>)
 800bc42:	f240 1145 	movw	r1, #325	; 0x145
 800bc46:	f000 fc8f 	bl	800c568 <__assert_func>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	6144      	str	r4, [r0, #20]
 800bc4e:	6103      	str	r3, [r0, #16]
 800bc50:	bd10      	pop	{r4, pc}
 800bc52:	bf00      	nop
 800bc54:	0800dbd0 	.word	0x0800dbd0
 800bc58:	0800dbe1 	.word	0x0800dbe1

0800bc5c <__multiply>:
 800bc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc60:	4691      	mov	r9, r2
 800bc62:	690a      	ldr	r2, [r1, #16]
 800bc64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	bfb8      	it	lt
 800bc6c:	460b      	movlt	r3, r1
 800bc6e:	460c      	mov	r4, r1
 800bc70:	bfbc      	itt	lt
 800bc72:	464c      	movlt	r4, r9
 800bc74:	4699      	movlt	r9, r3
 800bc76:	6927      	ldr	r7, [r4, #16]
 800bc78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bc7c:	68a3      	ldr	r3, [r4, #8]
 800bc7e:	6861      	ldr	r1, [r4, #4]
 800bc80:	eb07 060a 	add.w	r6, r7, sl
 800bc84:	42b3      	cmp	r3, r6
 800bc86:	b085      	sub	sp, #20
 800bc88:	bfb8      	it	lt
 800bc8a:	3101      	addlt	r1, #1
 800bc8c:	f7ff feda 	bl	800ba44 <_Balloc>
 800bc90:	b930      	cbnz	r0, 800bca0 <__multiply+0x44>
 800bc92:	4602      	mov	r2, r0
 800bc94:	4b44      	ldr	r3, [pc, #272]	; (800bda8 <__multiply+0x14c>)
 800bc96:	4845      	ldr	r0, [pc, #276]	; (800bdac <__multiply+0x150>)
 800bc98:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bc9c:	f000 fc64 	bl	800c568 <__assert_func>
 800bca0:	f100 0514 	add.w	r5, r0, #20
 800bca4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bca8:	462b      	mov	r3, r5
 800bcaa:	2200      	movs	r2, #0
 800bcac:	4543      	cmp	r3, r8
 800bcae:	d321      	bcc.n	800bcf4 <__multiply+0x98>
 800bcb0:	f104 0314 	add.w	r3, r4, #20
 800bcb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bcb8:	f109 0314 	add.w	r3, r9, #20
 800bcbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bcc0:	9202      	str	r2, [sp, #8]
 800bcc2:	1b3a      	subs	r2, r7, r4
 800bcc4:	3a15      	subs	r2, #21
 800bcc6:	f022 0203 	bic.w	r2, r2, #3
 800bcca:	3204      	adds	r2, #4
 800bccc:	f104 0115 	add.w	r1, r4, #21
 800bcd0:	428f      	cmp	r7, r1
 800bcd2:	bf38      	it	cc
 800bcd4:	2204      	movcc	r2, #4
 800bcd6:	9201      	str	r2, [sp, #4]
 800bcd8:	9a02      	ldr	r2, [sp, #8]
 800bcda:	9303      	str	r3, [sp, #12]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d80c      	bhi.n	800bcfa <__multiply+0x9e>
 800bce0:	2e00      	cmp	r6, #0
 800bce2:	dd03      	ble.n	800bcec <__multiply+0x90>
 800bce4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d05b      	beq.n	800bda4 <__multiply+0x148>
 800bcec:	6106      	str	r6, [r0, #16]
 800bcee:	b005      	add	sp, #20
 800bcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf4:	f843 2b04 	str.w	r2, [r3], #4
 800bcf8:	e7d8      	b.n	800bcac <__multiply+0x50>
 800bcfa:	f8b3 a000 	ldrh.w	sl, [r3]
 800bcfe:	f1ba 0f00 	cmp.w	sl, #0
 800bd02:	d024      	beq.n	800bd4e <__multiply+0xf2>
 800bd04:	f104 0e14 	add.w	lr, r4, #20
 800bd08:	46a9      	mov	r9, r5
 800bd0a:	f04f 0c00 	mov.w	ip, #0
 800bd0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd12:	f8d9 1000 	ldr.w	r1, [r9]
 800bd16:	fa1f fb82 	uxth.w	fp, r2
 800bd1a:	b289      	uxth	r1, r1
 800bd1c:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd24:	f8d9 2000 	ldr.w	r2, [r9]
 800bd28:	4461      	add	r1, ip
 800bd2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd2e:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd36:	b289      	uxth	r1, r1
 800bd38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd3c:	4577      	cmp	r7, lr
 800bd3e:	f849 1b04 	str.w	r1, [r9], #4
 800bd42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd46:	d8e2      	bhi.n	800bd0e <__multiply+0xb2>
 800bd48:	9a01      	ldr	r2, [sp, #4]
 800bd4a:	f845 c002 	str.w	ip, [r5, r2]
 800bd4e:	9a03      	ldr	r2, [sp, #12]
 800bd50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd54:	3304      	adds	r3, #4
 800bd56:	f1b9 0f00 	cmp.w	r9, #0
 800bd5a:	d021      	beq.n	800bda0 <__multiply+0x144>
 800bd5c:	6829      	ldr	r1, [r5, #0]
 800bd5e:	f104 0c14 	add.w	ip, r4, #20
 800bd62:	46ae      	mov	lr, r5
 800bd64:	f04f 0a00 	mov.w	sl, #0
 800bd68:	f8bc b000 	ldrh.w	fp, [ip]
 800bd6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bd70:	fb09 220b 	mla	r2, r9, fp, r2
 800bd74:	4452      	add	r2, sl
 800bd76:	b289      	uxth	r1, r1
 800bd78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd7c:	f84e 1b04 	str.w	r1, [lr], #4
 800bd80:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bd84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd88:	f8be 1000 	ldrh.w	r1, [lr]
 800bd8c:	fb09 110a 	mla	r1, r9, sl, r1
 800bd90:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bd94:	4567      	cmp	r7, ip
 800bd96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd9a:	d8e5      	bhi.n	800bd68 <__multiply+0x10c>
 800bd9c:	9a01      	ldr	r2, [sp, #4]
 800bd9e:	50a9      	str	r1, [r5, r2]
 800bda0:	3504      	adds	r5, #4
 800bda2:	e799      	b.n	800bcd8 <__multiply+0x7c>
 800bda4:	3e01      	subs	r6, #1
 800bda6:	e79b      	b.n	800bce0 <__multiply+0x84>
 800bda8:	0800dbd0 	.word	0x0800dbd0
 800bdac:	0800dbe1 	.word	0x0800dbe1

0800bdb0 <__pow5mult>:
 800bdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdb4:	4615      	mov	r5, r2
 800bdb6:	f012 0203 	ands.w	r2, r2, #3
 800bdba:	4606      	mov	r6, r0
 800bdbc:	460f      	mov	r7, r1
 800bdbe:	d007      	beq.n	800bdd0 <__pow5mult+0x20>
 800bdc0:	4c25      	ldr	r4, [pc, #148]	; (800be58 <__pow5mult+0xa8>)
 800bdc2:	3a01      	subs	r2, #1
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdca:	f7ff fe9d 	bl	800bb08 <__multadd>
 800bdce:	4607      	mov	r7, r0
 800bdd0:	10ad      	asrs	r5, r5, #2
 800bdd2:	d03d      	beq.n	800be50 <__pow5mult+0xa0>
 800bdd4:	69f4      	ldr	r4, [r6, #28]
 800bdd6:	b97c      	cbnz	r4, 800bdf8 <__pow5mult+0x48>
 800bdd8:	2010      	movs	r0, #16
 800bdda:	f7ff fd7f 	bl	800b8dc <malloc>
 800bdde:	4602      	mov	r2, r0
 800bde0:	61f0      	str	r0, [r6, #28]
 800bde2:	b928      	cbnz	r0, 800bdf0 <__pow5mult+0x40>
 800bde4:	4b1d      	ldr	r3, [pc, #116]	; (800be5c <__pow5mult+0xac>)
 800bde6:	481e      	ldr	r0, [pc, #120]	; (800be60 <__pow5mult+0xb0>)
 800bde8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bdec:	f000 fbbc 	bl	800c568 <__assert_func>
 800bdf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bdf4:	6004      	str	r4, [r0, #0]
 800bdf6:	60c4      	str	r4, [r0, #12]
 800bdf8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bdfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be00:	b94c      	cbnz	r4, 800be16 <__pow5mult+0x66>
 800be02:	f240 2171 	movw	r1, #625	; 0x271
 800be06:	4630      	mov	r0, r6
 800be08:	f7ff ff12 	bl	800bc30 <__i2b>
 800be0c:	2300      	movs	r3, #0
 800be0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800be12:	4604      	mov	r4, r0
 800be14:	6003      	str	r3, [r0, #0]
 800be16:	f04f 0900 	mov.w	r9, #0
 800be1a:	07eb      	lsls	r3, r5, #31
 800be1c:	d50a      	bpl.n	800be34 <__pow5mult+0x84>
 800be1e:	4639      	mov	r1, r7
 800be20:	4622      	mov	r2, r4
 800be22:	4630      	mov	r0, r6
 800be24:	f7ff ff1a 	bl	800bc5c <__multiply>
 800be28:	4639      	mov	r1, r7
 800be2a:	4680      	mov	r8, r0
 800be2c:	4630      	mov	r0, r6
 800be2e:	f7ff fe49 	bl	800bac4 <_Bfree>
 800be32:	4647      	mov	r7, r8
 800be34:	106d      	asrs	r5, r5, #1
 800be36:	d00b      	beq.n	800be50 <__pow5mult+0xa0>
 800be38:	6820      	ldr	r0, [r4, #0]
 800be3a:	b938      	cbnz	r0, 800be4c <__pow5mult+0x9c>
 800be3c:	4622      	mov	r2, r4
 800be3e:	4621      	mov	r1, r4
 800be40:	4630      	mov	r0, r6
 800be42:	f7ff ff0b 	bl	800bc5c <__multiply>
 800be46:	6020      	str	r0, [r4, #0]
 800be48:	f8c0 9000 	str.w	r9, [r0]
 800be4c:	4604      	mov	r4, r0
 800be4e:	e7e4      	b.n	800be1a <__pow5mult+0x6a>
 800be50:	4638      	mov	r0, r7
 800be52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be56:	bf00      	nop
 800be58:	0800dd30 	.word	0x0800dd30
 800be5c:	0800db61 	.word	0x0800db61
 800be60:	0800dbe1 	.word	0x0800dbe1

0800be64 <__lshift>:
 800be64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be68:	460c      	mov	r4, r1
 800be6a:	6849      	ldr	r1, [r1, #4]
 800be6c:	6923      	ldr	r3, [r4, #16]
 800be6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be72:	68a3      	ldr	r3, [r4, #8]
 800be74:	4607      	mov	r7, r0
 800be76:	4691      	mov	r9, r2
 800be78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be7c:	f108 0601 	add.w	r6, r8, #1
 800be80:	42b3      	cmp	r3, r6
 800be82:	db0b      	blt.n	800be9c <__lshift+0x38>
 800be84:	4638      	mov	r0, r7
 800be86:	f7ff fddd 	bl	800ba44 <_Balloc>
 800be8a:	4605      	mov	r5, r0
 800be8c:	b948      	cbnz	r0, 800bea2 <__lshift+0x3e>
 800be8e:	4602      	mov	r2, r0
 800be90:	4b28      	ldr	r3, [pc, #160]	; (800bf34 <__lshift+0xd0>)
 800be92:	4829      	ldr	r0, [pc, #164]	; (800bf38 <__lshift+0xd4>)
 800be94:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800be98:	f000 fb66 	bl	800c568 <__assert_func>
 800be9c:	3101      	adds	r1, #1
 800be9e:	005b      	lsls	r3, r3, #1
 800bea0:	e7ee      	b.n	800be80 <__lshift+0x1c>
 800bea2:	2300      	movs	r3, #0
 800bea4:	f100 0114 	add.w	r1, r0, #20
 800bea8:	f100 0210 	add.w	r2, r0, #16
 800beac:	4618      	mov	r0, r3
 800beae:	4553      	cmp	r3, sl
 800beb0:	db33      	blt.n	800bf1a <__lshift+0xb6>
 800beb2:	6920      	ldr	r0, [r4, #16]
 800beb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800beb8:	f104 0314 	add.w	r3, r4, #20
 800bebc:	f019 091f 	ands.w	r9, r9, #31
 800bec0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bec4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bec8:	d02b      	beq.n	800bf22 <__lshift+0xbe>
 800beca:	f1c9 0e20 	rsb	lr, r9, #32
 800bece:	468a      	mov	sl, r1
 800bed0:	2200      	movs	r2, #0
 800bed2:	6818      	ldr	r0, [r3, #0]
 800bed4:	fa00 f009 	lsl.w	r0, r0, r9
 800bed8:	4310      	orrs	r0, r2
 800beda:	f84a 0b04 	str.w	r0, [sl], #4
 800bede:	f853 2b04 	ldr.w	r2, [r3], #4
 800bee2:	459c      	cmp	ip, r3
 800bee4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bee8:	d8f3      	bhi.n	800bed2 <__lshift+0x6e>
 800beea:	ebac 0304 	sub.w	r3, ip, r4
 800beee:	3b15      	subs	r3, #21
 800bef0:	f023 0303 	bic.w	r3, r3, #3
 800bef4:	3304      	adds	r3, #4
 800bef6:	f104 0015 	add.w	r0, r4, #21
 800befa:	4584      	cmp	ip, r0
 800befc:	bf38      	it	cc
 800befe:	2304      	movcc	r3, #4
 800bf00:	50ca      	str	r2, [r1, r3]
 800bf02:	b10a      	cbz	r2, 800bf08 <__lshift+0xa4>
 800bf04:	f108 0602 	add.w	r6, r8, #2
 800bf08:	3e01      	subs	r6, #1
 800bf0a:	4638      	mov	r0, r7
 800bf0c:	612e      	str	r6, [r5, #16]
 800bf0e:	4621      	mov	r1, r4
 800bf10:	f7ff fdd8 	bl	800bac4 <_Bfree>
 800bf14:	4628      	mov	r0, r5
 800bf16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf1e:	3301      	adds	r3, #1
 800bf20:	e7c5      	b.n	800beae <__lshift+0x4a>
 800bf22:	3904      	subs	r1, #4
 800bf24:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf28:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf2c:	459c      	cmp	ip, r3
 800bf2e:	d8f9      	bhi.n	800bf24 <__lshift+0xc0>
 800bf30:	e7ea      	b.n	800bf08 <__lshift+0xa4>
 800bf32:	bf00      	nop
 800bf34:	0800dbd0 	.word	0x0800dbd0
 800bf38:	0800dbe1 	.word	0x0800dbe1

0800bf3c <__mcmp>:
 800bf3c:	b530      	push	{r4, r5, lr}
 800bf3e:	6902      	ldr	r2, [r0, #16]
 800bf40:	690c      	ldr	r4, [r1, #16]
 800bf42:	1b12      	subs	r2, r2, r4
 800bf44:	d10e      	bne.n	800bf64 <__mcmp+0x28>
 800bf46:	f100 0314 	add.w	r3, r0, #20
 800bf4a:	3114      	adds	r1, #20
 800bf4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf5c:	42a5      	cmp	r5, r4
 800bf5e:	d003      	beq.n	800bf68 <__mcmp+0x2c>
 800bf60:	d305      	bcc.n	800bf6e <__mcmp+0x32>
 800bf62:	2201      	movs	r2, #1
 800bf64:	4610      	mov	r0, r2
 800bf66:	bd30      	pop	{r4, r5, pc}
 800bf68:	4283      	cmp	r3, r0
 800bf6a:	d3f3      	bcc.n	800bf54 <__mcmp+0x18>
 800bf6c:	e7fa      	b.n	800bf64 <__mcmp+0x28>
 800bf6e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf72:	e7f7      	b.n	800bf64 <__mcmp+0x28>

0800bf74 <__mdiff>:
 800bf74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf78:	460c      	mov	r4, r1
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	4611      	mov	r1, r2
 800bf7e:	4620      	mov	r0, r4
 800bf80:	4690      	mov	r8, r2
 800bf82:	f7ff ffdb 	bl	800bf3c <__mcmp>
 800bf86:	1e05      	subs	r5, r0, #0
 800bf88:	d110      	bne.n	800bfac <__mdiff+0x38>
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	f7ff fd59 	bl	800ba44 <_Balloc>
 800bf92:	b930      	cbnz	r0, 800bfa2 <__mdiff+0x2e>
 800bf94:	4b3a      	ldr	r3, [pc, #232]	; (800c080 <__mdiff+0x10c>)
 800bf96:	4602      	mov	r2, r0
 800bf98:	f240 2137 	movw	r1, #567	; 0x237
 800bf9c:	4839      	ldr	r0, [pc, #228]	; (800c084 <__mdiff+0x110>)
 800bf9e:	f000 fae3 	bl	800c568 <__assert_func>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfac:	bfa4      	itt	ge
 800bfae:	4643      	movge	r3, r8
 800bfb0:	46a0      	movge	r8, r4
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bfb8:	bfa6      	itte	ge
 800bfba:	461c      	movge	r4, r3
 800bfbc:	2500      	movge	r5, #0
 800bfbe:	2501      	movlt	r5, #1
 800bfc0:	f7ff fd40 	bl	800ba44 <_Balloc>
 800bfc4:	b920      	cbnz	r0, 800bfd0 <__mdiff+0x5c>
 800bfc6:	4b2e      	ldr	r3, [pc, #184]	; (800c080 <__mdiff+0x10c>)
 800bfc8:	4602      	mov	r2, r0
 800bfca:	f240 2145 	movw	r1, #581	; 0x245
 800bfce:	e7e5      	b.n	800bf9c <__mdiff+0x28>
 800bfd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bfd4:	6926      	ldr	r6, [r4, #16]
 800bfd6:	60c5      	str	r5, [r0, #12]
 800bfd8:	f104 0914 	add.w	r9, r4, #20
 800bfdc:	f108 0514 	add.w	r5, r8, #20
 800bfe0:	f100 0e14 	add.w	lr, r0, #20
 800bfe4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bfe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bfec:	f108 0210 	add.w	r2, r8, #16
 800bff0:	46f2      	mov	sl, lr
 800bff2:	2100      	movs	r1, #0
 800bff4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bff8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bffc:	fa11 f88b 	uxtah	r8, r1, fp
 800c000:	b299      	uxth	r1, r3
 800c002:	0c1b      	lsrs	r3, r3, #16
 800c004:	eba8 0801 	sub.w	r8, r8, r1
 800c008:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c00c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c010:	fa1f f888 	uxth.w	r8, r8
 800c014:	1419      	asrs	r1, r3, #16
 800c016:	454e      	cmp	r6, r9
 800c018:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c01c:	f84a 3b04 	str.w	r3, [sl], #4
 800c020:	d8e8      	bhi.n	800bff4 <__mdiff+0x80>
 800c022:	1b33      	subs	r3, r6, r4
 800c024:	3b15      	subs	r3, #21
 800c026:	f023 0303 	bic.w	r3, r3, #3
 800c02a:	3304      	adds	r3, #4
 800c02c:	3415      	adds	r4, #21
 800c02e:	42a6      	cmp	r6, r4
 800c030:	bf38      	it	cc
 800c032:	2304      	movcc	r3, #4
 800c034:	441d      	add	r5, r3
 800c036:	4473      	add	r3, lr
 800c038:	469e      	mov	lr, r3
 800c03a:	462e      	mov	r6, r5
 800c03c:	4566      	cmp	r6, ip
 800c03e:	d30e      	bcc.n	800c05e <__mdiff+0xea>
 800c040:	f10c 0203 	add.w	r2, ip, #3
 800c044:	1b52      	subs	r2, r2, r5
 800c046:	f022 0203 	bic.w	r2, r2, #3
 800c04a:	3d03      	subs	r5, #3
 800c04c:	45ac      	cmp	ip, r5
 800c04e:	bf38      	it	cc
 800c050:	2200      	movcc	r2, #0
 800c052:	4413      	add	r3, r2
 800c054:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c058:	b17a      	cbz	r2, 800c07a <__mdiff+0x106>
 800c05a:	6107      	str	r7, [r0, #16]
 800c05c:	e7a4      	b.n	800bfa8 <__mdiff+0x34>
 800c05e:	f856 8b04 	ldr.w	r8, [r6], #4
 800c062:	fa11 f288 	uxtah	r2, r1, r8
 800c066:	1414      	asrs	r4, r2, #16
 800c068:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c06c:	b292      	uxth	r2, r2
 800c06e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c072:	f84e 2b04 	str.w	r2, [lr], #4
 800c076:	1421      	asrs	r1, r4, #16
 800c078:	e7e0      	b.n	800c03c <__mdiff+0xc8>
 800c07a:	3f01      	subs	r7, #1
 800c07c:	e7ea      	b.n	800c054 <__mdiff+0xe0>
 800c07e:	bf00      	nop
 800c080:	0800dbd0 	.word	0x0800dbd0
 800c084:	0800dbe1 	.word	0x0800dbe1

0800c088 <__d2b>:
 800c088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c08c:	460f      	mov	r7, r1
 800c08e:	2101      	movs	r1, #1
 800c090:	ec59 8b10 	vmov	r8, r9, d0
 800c094:	4616      	mov	r6, r2
 800c096:	f7ff fcd5 	bl	800ba44 <_Balloc>
 800c09a:	4604      	mov	r4, r0
 800c09c:	b930      	cbnz	r0, 800c0ac <__d2b+0x24>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	4b24      	ldr	r3, [pc, #144]	; (800c134 <__d2b+0xac>)
 800c0a2:	4825      	ldr	r0, [pc, #148]	; (800c138 <__d2b+0xb0>)
 800c0a4:	f240 310f 	movw	r1, #783	; 0x30f
 800c0a8:	f000 fa5e 	bl	800c568 <__assert_func>
 800c0ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c0b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0b4:	bb2d      	cbnz	r5, 800c102 <__d2b+0x7a>
 800c0b6:	9301      	str	r3, [sp, #4]
 800c0b8:	f1b8 0300 	subs.w	r3, r8, #0
 800c0bc:	d026      	beq.n	800c10c <__d2b+0x84>
 800c0be:	4668      	mov	r0, sp
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	f7ff fd87 	bl	800bbd4 <__lo0bits>
 800c0c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c0ca:	b1e8      	cbz	r0, 800c108 <__d2b+0x80>
 800c0cc:	f1c0 0320 	rsb	r3, r0, #32
 800c0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0d4:	430b      	orrs	r3, r1
 800c0d6:	40c2      	lsrs	r2, r0
 800c0d8:	6163      	str	r3, [r4, #20]
 800c0da:	9201      	str	r2, [sp, #4]
 800c0dc:	9b01      	ldr	r3, [sp, #4]
 800c0de:	61a3      	str	r3, [r4, #24]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	bf14      	ite	ne
 800c0e4:	2202      	movne	r2, #2
 800c0e6:	2201      	moveq	r2, #1
 800c0e8:	6122      	str	r2, [r4, #16]
 800c0ea:	b1bd      	cbz	r5, 800c11c <__d2b+0x94>
 800c0ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0f0:	4405      	add	r5, r0
 800c0f2:	603d      	str	r5, [r7, #0]
 800c0f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0f8:	6030      	str	r0, [r6, #0]
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	b003      	add	sp, #12
 800c0fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c106:	e7d6      	b.n	800c0b6 <__d2b+0x2e>
 800c108:	6161      	str	r1, [r4, #20]
 800c10a:	e7e7      	b.n	800c0dc <__d2b+0x54>
 800c10c:	a801      	add	r0, sp, #4
 800c10e:	f7ff fd61 	bl	800bbd4 <__lo0bits>
 800c112:	9b01      	ldr	r3, [sp, #4]
 800c114:	6163      	str	r3, [r4, #20]
 800c116:	3020      	adds	r0, #32
 800c118:	2201      	movs	r2, #1
 800c11a:	e7e5      	b.n	800c0e8 <__d2b+0x60>
 800c11c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c120:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c124:	6038      	str	r0, [r7, #0]
 800c126:	6918      	ldr	r0, [r3, #16]
 800c128:	f7ff fd34 	bl	800bb94 <__hi0bits>
 800c12c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c130:	e7e2      	b.n	800c0f8 <__d2b+0x70>
 800c132:	bf00      	nop
 800c134:	0800dbd0 	.word	0x0800dbd0
 800c138:	0800dbe1 	.word	0x0800dbe1

0800c13c <__ssputs_r>:
 800c13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c140:	688e      	ldr	r6, [r1, #8]
 800c142:	461f      	mov	r7, r3
 800c144:	42be      	cmp	r6, r7
 800c146:	680b      	ldr	r3, [r1, #0]
 800c148:	4682      	mov	sl, r0
 800c14a:	460c      	mov	r4, r1
 800c14c:	4690      	mov	r8, r2
 800c14e:	d82c      	bhi.n	800c1aa <__ssputs_r+0x6e>
 800c150:	898a      	ldrh	r2, [r1, #12]
 800c152:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c156:	d026      	beq.n	800c1a6 <__ssputs_r+0x6a>
 800c158:	6965      	ldr	r5, [r4, #20]
 800c15a:	6909      	ldr	r1, [r1, #16]
 800c15c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c160:	eba3 0901 	sub.w	r9, r3, r1
 800c164:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c168:	1c7b      	adds	r3, r7, #1
 800c16a:	444b      	add	r3, r9
 800c16c:	106d      	asrs	r5, r5, #1
 800c16e:	429d      	cmp	r5, r3
 800c170:	bf38      	it	cc
 800c172:	461d      	movcc	r5, r3
 800c174:	0553      	lsls	r3, r2, #21
 800c176:	d527      	bpl.n	800c1c8 <__ssputs_r+0x8c>
 800c178:	4629      	mov	r1, r5
 800c17a:	f7ff fbd7 	bl	800b92c <_malloc_r>
 800c17e:	4606      	mov	r6, r0
 800c180:	b360      	cbz	r0, 800c1dc <__ssputs_r+0xa0>
 800c182:	6921      	ldr	r1, [r4, #16]
 800c184:	464a      	mov	r2, r9
 800c186:	f7fe fcd5 	bl	800ab34 <memcpy>
 800c18a:	89a3      	ldrh	r3, [r4, #12]
 800c18c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c194:	81a3      	strh	r3, [r4, #12]
 800c196:	6126      	str	r6, [r4, #16]
 800c198:	6165      	str	r5, [r4, #20]
 800c19a:	444e      	add	r6, r9
 800c19c:	eba5 0509 	sub.w	r5, r5, r9
 800c1a0:	6026      	str	r6, [r4, #0]
 800c1a2:	60a5      	str	r5, [r4, #8]
 800c1a4:	463e      	mov	r6, r7
 800c1a6:	42be      	cmp	r6, r7
 800c1a8:	d900      	bls.n	800c1ac <__ssputs_r+0x70>
 800c1aa:	463e      	mov	r6, r7
 800c1ac:	6820      	ldr	r0, [r4, #0]
 800c1ae:	4632      	mov	r2, r6
 800c1b0:	4641      	mov	r1, r8
 800c1b2:	f7fe fc26 	bl	800aa02 <memmove>
 800c1b6:	68a3      	ldr	r3, [r4, #8]
 800c1b8:	1b9b      	subs	r3, r3, r6
 800c1ba:	60a3      	str	r3, [r4, #8]
 800c1bc:	6823      	ldr	r3, [r4, #0]
 800c1be:	4433      	add	r3, r6
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c8:	462a      	mov	r2, r5
 800c1ca:	f000 fa13 	bl	800c5f4 <_realloc_r>
 800c1ce:	4606      	mov	r6, r0
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	d1e0      	bne.n	800c196 <__ssputs_r+0x5a>
 800c1d4:	6921      	ldr	r1, [r4, #16]
 800c1d6:	4650      	mov	r0, sl
 800c1d8:	f7ff fb34 	bl	800b844 <_free_r>
 800c1dc:	230c      	movs	r3, #12
 800c1de:	f8ca 3000 	str.w	r3, [sl]
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1e8:	81a3      	strh	r3, [r4, #12]
 800c1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ee:	e7e9      	b.n	800c1c4 <__ssputs_r+0x88>

0800c1f0 <_svfiprintf_r>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	4698      	mov	r8, r3
 800c1f6:	898b      	ldrh	r3, [r1, #12]
 800c1f8:	061b      	lsls	r3, r3, #24
 800c1fa:	b09d      	sub	sp, #116	; 0x74
 800c1fc:	4607      	mov	r7, r0
 800c1fe:	460d      	mov	r5, r1
 800c200:	4614      	mov	r4, r2
 800c202:	d50e      	bpl.n	800c222 <_svfiprintf_r+0x32>
 800c204:	690b      	ldr	r3, [r1, #16]
 800c206:	b963      	cbnz	r3, 800c222 <_svfiprintf_r+0x32>
 800c208:	2140      	movs	r1, #64	; 0x40
 800c20a:	f7ff fb8f 	bl	800b92c <_malloc_r>
 800c20e:	6028      	str	r0, [r5, #0]
 800c210:	6128      	str	r0, [r5, #16]
 800c212:	b920      	cbnz	r0, 800c21e <_svfiprintf_r+0x2e>
 800c214:	230c      	movs	r3, #12
 800c216:	603b      	str	r3, [r7, #0]
 800c218:	f04f 30ff 	mov.w	r0, #4294967295
 800c21c:	e0d0      	b.n	800c3c0 <_svfiprintf_r+0x1d0>
 800c21e:	2340      	movs	r3, #64	; 0x40
 800c220:	616b      	str	r3, [r5, #20]
 800c222:	2300      	movs	r3, #0
 800c224:	9309      	str	r3, [sp, #36]	; 0x24
 800c226:	2320      	movs	r3, #32
 800c228:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c22c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c230:	2330      	movs	r3, #48	; 0x30
 800c232:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c3d8 <_svfiprintf_r+0x1e8>
 800c236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c23a:	f04f 0901 	mov.w	r9, #1
 800c23e:	4623      	mov	r3, r4
 800c240:	469a      	mov	sl, r3
 800c242:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c246:	b10a      	cbz	r2, 800c24c <_svfiprintf_r+0x5c>
 800c248:	2a25      	cmp	r2, #37	; 0x25
 800c24a:	d1f9      	bne.n	800c240 <_svfiprintf_r+0x50>
 800c24c:	ebba 0b04 	subs.w	fp, sl, r4
 800c250:	d00b      	beq.n	800c26a <_svfiprintf_r+0x7a>
 800c252:	465b      	mov	r3, fp
 800c254:	4622      	mov	r2, r4
 800c256:	4629      	mov	r1, r5
 800c258:	4638      	mov	r0, r7
 800c25a:	f7ff ff6f 	bl	800c13c <__ssputs_r>
 800c25e:	3001      	adds	r0, #1
 800c260:	f000 80a9 	beq.w	800c3b6 <_svfiprintf_r+0x1c6>
 800c264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c266:	445a      	add	r2, fp
 800c268:	9209      	str	r2, [sp, #36]	; 0x24
 800c26a:	f89a 3000 	ldrb.w	r3, [sl]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	f000 80a1 	beq.w	800c3b6 <_svfiprintf_r+0x1c6>
 800c274:	2300      	movs	r3, #0
 800c276:	f04f 32ff 	mov.w	r2, #4294967295
 800c27a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c27e:	f10a 0a01 	add.w	sl, sl, #1
 800c282:	9304      	str	r3, [sp, #16]
 800c284:	9307      	str	r3, [sp, #28]
 800c286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c28a:	931a      	str	r3, [sp, #104]	; 0x68
 800c28c:	4654      	mov	r4, sl
 800c28e:	2205      	movs	r2, #5
 800c290:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c294:	4850      	ldr	r0, [pc, #320]	; (800c3d8 <_svfiprintf_r+0x1e8>)
 800c296:	f7f3 ffa3 	bl	80001e0 <memchr>
 800c29a:	9a04      	ldr	r2, [sp, #16]
 800c29c:	b9d8      	cbnz	r0, 800c2d6 <_svfiprintf_r+0xe6>
 800c29e:	06d0      	lsls	r0, r2, #27
 800c2a0:	bf44      	itt	mi
 800c2a2:	2320      	movmi	r3, #32
 800c2a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2a8:	0711      	lsls	r1, r2, #28
 800c2aa:	bf44      	itt	mi
 800c2ac:	232b      	movmi	r3, #43	; 0x2b
 800c2ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2b2:	f89a 3000 	ldrb.w	r3, [sl]
 800c2b6:	2b2a      	cmp	r3, #42	; 0x2a
 800c2b8:	d015      	beq.n	800c2e6 <_svfiprintf_r+0xf6>
 800c2ba:	9a07      	ldr	r2, [sp, #28]
 800c2bc:	4654      	mov	r4, sl
 800c2be:	2000      	movs	r0, #0
 800c2c0:	f04f 0c0a 	mov.w	ip, #10
 800c2c4:	4621      	mov	r1, r4
 800c2c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2ca:	3b30      	subs	r3, #48	; 0x30
 800c2cc:	2b09      	cmp	r3, #9
 800c2ce:	d94d      	bls.n	800c36c <_svfiprintf_r+0x17c>
 800c2d0:	b1b0      	cbz	r0, 800c300 <_svfiprintf_r+0x110>
 800c2d2:	9207      	str	r2, [sp, #28]
 800c2d4:	e014      	b.n	800c300 <_svfiprintf_r+0x110>
 800c2d6:	eba0 0308 	sub.w	r3, r0, r8
 800c2da:	fa09 f303 	lsl.w	r3, r9, r3
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	9304      	str	r3, [sp, #16]
 800c2e2:	46a2      	mov	sl, r4
 800c2e4:	e7d2      	b.n	800c28c <_svfiprintf_r+0x9c>
 800c2e6:	9b03      	ldr	r3, [sp, #12]
 800c2e8:	1d19      	adds	r1, r3, #4
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	9103      	str	r1, [sp, #12]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	bfbb      	ittet	lt
 800c2f2:	425b      	neglt	r3, r3
 800c2f4:	f042 0202 	orrlt.w	r2, r2, #2
 800c2f8:	9307      	strge	r3, [sp, #28]
 800c2fa:	9307      	strlt	r3, [sp, #28]
 800c2fc:	bfb8      	it	lt
 800c2fe:	9204      	strlt	r2, [sp, #16]
 800c300:	7823      	ldrb	r3, [r4, #0]
 800c302:	2b2e      	cmp	r3, #46	; 0x2e
 800c304:	d10c      	bne.n	800c320 <_svfiprintf_r+0x130>
 800c306:	7863      	ldrb	r3, [r4, #1]
 800c308:	2b2a      	cmp	r3, #42	; 0x2a
 800c30a:	d134      	bne.n	800c376 <_svfiprintf_r+0x186>
 800c30c:	9b03      	ldr	r3, [sp, #12]
 800c30e:	1d1a      	adds	r2, r3, #4
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	9203      	str	r2, [sp, #12]
 800c314:	2b00      	cmp	r3, #0
 800c316:	bfb8      	it	lt
 800c318:	f04f 33ff 	movlt.w	r3, #4294967295
 800c31c:	3402      	adds	r4, #2
 800c31e:	9305      	str	r3, [sp, #20]
 800c320:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c3e8 <_svfiprintf_r+0x1f8>
 800c324:	7821      	ldrb	r1, [r4, #0]
 800c326:	2203      	movs	r2, #3
 800c328:	4650      	mov	r0, sl
 800c32a:	f7f3 ff59 	bl	80001e0 <memchr>
 800c32e:	b138      	cbz	r0, 800c340 <_svfiprintf_r+0x150>
 800c330:	9b04      	ldr	r3, [sp, #16]
 800c332:	eba0 000a 	sub.w	r0, r0, sl
 800c336:	2240      	movs	r2, #64	; 0x40
 800c338:	4082      	lsls	r2, r0
 800c33a:	4313      	orrs	r3, r2
 800c33c:	3401      	adds	r4, #1
 800c33e:	9304      	str	r3, [sp, #16]
 800c340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c344:	4825      	ldr	r0, [pc, #148]	; (800c3dc <_svfiprintf_r+0x1ec>)
 800c346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c34a:	2206      	movs	r2, #6
 800c34c:	f7f3 ff48 	bl	80001e0 <memchr>
 800c350:	2800      	cmp	r0, #0
 800c352:	d038      	beq.n	800c3c6 <_svfiprintf_r+0x1d6>
 800c354:	4b22      	ldr	r3, [pc, #136]	; (800c3e0 <_svfiprintf_r+0x1f0>)
 800c356:	bb1b      	cbnz	r3, 800c3a0 <_svfiprintf_r+0x1b0>
 800c358:	9b03      	ldr	r3, [sp, #12]
 800c35a:	3307      	adds	r3, #7
 800c35c:	f023 0307 	bic.w	r3, r3, #7
 800c360:	3308      	adds	r3, #8
 800c362:	9303      	str	r3, [sp, #12]
 800c364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c366:	4433      	add	r3, r6
 800c368:	9309      	str	r3, [sp, #36]	; 0x24
 800c36a:	e768      	b.n	800c23e <_svfiprintf_r+0x4e>
 800c36c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c370:	460c      	mov	r4, r1
 800c372:	2001      	movs	r0, #1
 800c374:	e7a6      	b.n	800c2c4 <_svfiprintf_r+0xd4>
 800c376:	2300      	movs	r3, #0
 800c378:	3401      	adds	r4, #1
 800c37a:	9305      	str	r3, [sp, #20]
 800c37c:	4619      	mov	r1, r3
 800c37e:	f04f 0c0a 	mov.w	ip, #10
 800c382:	4620      	mov	r0, r4
 800c384:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c388:	3a30      	subs	r2, #48	; 0x30
 800c38a:	2a09      	cmp	r2, #9
 800c38c:	d903      	bls.n	800c396 <_svfiprintf_r+0x1a6>
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d0c6      	beq.n	800c320 <_svfiprintf_r+0x130>
 800c392:	9105      	str	r1, [sp, #20]
 800c394:	e7c4      	b.n	800c320 <_svfiprintf_r+0x130>
 800c396:	fb0c 2101 	mla	r1, ip, r1, r2
 800c39a:	4604      	mov	r4, r0
 800c39c:	2301      	movs	r3, #1
 800c39e:	e7f0      	b.n	800c382 <_svfiprintf_r+0x192>
 800c3a0:	ab03      	add	r3, sp, #12
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	462a      	mov	r2, r5
 800c3a6:	4b0f      	ldr	r3, [pc, #60]	; (800c3e4 <_svfiprintf_r+0x1f4>)
 800c3a8:	a904      	add	r1, sp, #16
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	f7fd fe50 	bl	800a050 <_printf_float>
 800c3b0:	1c42      	adds	r2, r0, #1
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	d1d6      	bne.n	800c364 <_svfiprintf_r+0x174>
 800c3b6:	89ab      	ldrh	r3, [r5, #12]
 800c3b8:	065b      	lsls	r3, r3, #25
 800c3ba:	f53f af2d 	bmi.w	800c218 <_svfiprintf_r+0x28>
 800c3be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3c0:	b01d      	add	sp, #116	; 0x74
 800c3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c6:	ab03      	add	r3, sp, #12
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	462a      	mov	r2, r5
 800c3cc:	4b05      	ldr	r3, [pc, #20]	; (800c3e4 <_svfiprintf_r+0x1f4>)
 800c3ce:	a904      	add	r1, sp, #16
 800c3d0:	4638      	mov	r0, r7
 800c3d2:	f7fe f8e1 	bl	800a598 <_printf_i>
 800c3d6:	e7eb      	b.n	800c3b0 <_svfiprintf_r+0x1c0>
 800c3d8:	0800dd3c 	.word	0x0800dd3c
 800c3dc:	0800dd46 	.word	0x0800dd46
 800c3e0:	0800a051 	.word	0x0800a051
 800c3e4:	0800c13d 	.word	0x0800c13d
 800c3e8:	0800dd42 	.word	0x0800dd42

0800c3ec <__sflush_r>:
 800c3ec:	898a      	ldrh	r2, [r1, #12]
 800c3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f2:	4605      	mov	r5, r0
 800c3f4:	0710      	lsls	r0, r2, #28
 800c3f6:	460c      	mov	r4, r1
 800c3f8:	d458      	bmi.n	800c4ac <__sflush_r+0xc0>
 800c3fa:	684b      	ldr	r3, [r1, #4]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	dc05      	bgt.n	800c40c <__sflush_r+0x20>
 800c400:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c402:	2b00      	cmp	r3, #0
 800c404:	dc02      	bgt.n	800c40c <__sflush_r+0x20>
 800c406:	2000      	movs	r0, #0
 800c408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c40c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c40e:	2e00      	cmp	r6, #0
 800c410:	d0f9      	beq.n	800c406 <__sflush_r+0x1a>
 800c412:	2300      	movs	r3, #0
 800c414:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c418:	682f      	ldr	r7, [r5, #0]
 800c41a:	6a21      	ldr	r1, [r4, #32]
 800c41c:	602b      	str	r3, [r5, #0]
 800c41e:	d032      	beq.n	800c486 <__sflush_r+0x9a>
 800c420:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c422:	89a3      	ldrh	r3, [r4, #12]
 800c424:	075a      	lsls	r2, r3, #29
 800c426:	d505      	bpl.n	800c434 <__sflush_r+0x48>
 800c428:	6863      	ldr	r3, [r4, #4]
 800c42a:	1ac0      	subs	r0, r0, r3
 800c42c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c42e:	b10b      	cbz	r3, 800c434 <__sflush_r+0x48>
 800c430:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c432:	1ac0      	subs	r0, r0, r3
 800c434:	2300      	movs	r3, #0
 800c436:	4602      	mov	r2, r0
 800c438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c43a:	6a21      	ldr	r1, [r4, #32]
 800c43c:	4628      	mov	r0, r5
 800c43e:	47b0      	blx	r6
 800c440:	1c43      	adds	r3, r0, #1
 800c442:	89a3      	ldrh	r3, [r4, #12]
 800c444:	d106      	bne.n	800c454 <__sflush_r+0x68>
 800c446:	6829      	ldr	r1, [r5, #0]
 800c448:	291d      	cmp	r1, #29
 800c44a:	d82b      	bhi.n	800c4a4 <__sflush_r+0xb8>
 800c44c:	4a29      	ldr	r2, [pc, #164]	; (800c4f4 <__sflush_r+0x108>)
 800c44e:	410a      	asrs	r2, r1
 800c450:	07d6      	lsls	r6, r2, #31
 800c452:	d427      	bmi.n	800c4a4 <__sflush_r+0xb8>
 800c454:	2200      	movs	r2, #0
 800c456:	6062      	str	r2, [r4, #4]
 800c458:	04d9      	lsls	r1, r3, #19
 800c45a:	6922      	ldr	r2, [r4, #16]
 800c45c:	6022      	str	r2, [r4, #0]
 800c45e:	d504      	bpl.n	800c46a <__sflush_r+0x7e>
 800c460:	1c42      	adds	r2, r0, #1
 800c462:	d101      	bne.n	800c468 <__sflush_r+0x7c>
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	b903      	cbnz	r3, 800c46a <__sflush_r+0x7e>
 800c468:	6560      	str	r0, [r4, #84]	; 0x54
 800c46a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c46c:	602f      	str	r7, [r5, #0]
 800c46e:	2900      	cmp	r1, #0
 800c470:	d0c9      	beq.n	800c406 <__sflush_r+0x1a>
 800c472:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c476:	4299      	cmp	r1, r3
 800c478:	d002      	beq.n	800c480 <__sflush_r+0x94>
 800c47a:	4628      	mov	r0, r5
 800c47c:	f7ff f9e2 	bl	800b844 <_free_r>
 800c480:	2000      	movs	r0, #0
 800c482:	6360      	str	r0, [r4, #52]	; 0x34
 800c484:	e7c0      	b.n	800c408 <__sflush_r+0x1c>
 800c486:	2301      	movs	r3, #1
 800c488:	4628      	mov	r0, r5
 800c48a:	47b0      	blx	r6
 800c48c:	1c41      	adds	r1, r0, #1
 800c48e:	d1c8      	bne.n	800c422 <__sflush_r+0x36>
 800c490:	682b      	ldr	r3, [r5, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d0c5      	beq.n	800c422 <__sflush_r+0x36>
 800c496:	2b1d      	cmp	r3, #29
 800c498:	d001      	beq.n	800c49e <__sflush_r+0xb2>
 800c49a:	2b16      	cmp	r3, #22
 800c49c:	d101      	bne.n	800c4a2 <__sflush_r+0xb6>
 800c49e:	602f      	str	r7, [r5, #0]
 800c4a0:	e7b1      	b.n	800c406 <__sflush_r+0x1a>
 800c4a2:	89a3      	ldrh	r3, [r4, #12]
 800c4a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4a8:	81a3      	strh	r3, [r4, #12]
 800c4aa:	e7ad      	b.n	800c408 <__sflush_r+0x1c>
 800c4ac:	690f      	ldr	r7, [r1, #16]
 800c4ae:	2f00      	cmp	r7, #0
 800c4b0:	d0a9      	beq.n	800c406 <__sflush_r+0x1a>
 800c4b2:	0793      	lsls	r3, r2, #30
 800c4b4:	680e      	ldr	r6, [r1, #0]
 800c4b6:	bf08      	it	eq
 800c4b8:	694b      	ldreq	r3, [r1, #20]
 800c4ba:	600f      	str	r7, [r1, #0]
 800c4bc:	bf18      	it	ne
 800c4be:	2300      	movne	r3, #0
 800c4c0:	eba6 0807 	sub.w	r8, r6, r7
 800c4c4:	608b      	str	r3, [r1, #8]
 800c4c6:	f1b8 0f00 	cmp.w	r8, #0
 800c4ca:	dd9c      	ble.n	800c406 <__sflush_r+0x1a>
 800c4cc:	6a21      	ldr	r1, [r4, #32]
 800c4ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4d0:	4643      	mov	r3, r8
 800c4d2:	463a      	mov	r2, r7
 800c4d4:	4628      	mov	r0, r5
 800c4d6:	47b0      	blx	r6
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	dc06      	bgt.n	800c4ea <__sflush_r+0xfe>
 800c4dc:	89a3      	ldrh	r3, [r4, #12]
 800c4de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4e2:	81a3      	strh	r3, [r4, #12]
 800c4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e8:	e78e      	b.n	800c408 <__sflush_r+0x1c>
 800c4ea:	4407      	add	r7, r0
 800c4ec:	eba8 0800 	sub.w	r8, r8, r0
 800c4f0:	e7e9      	b.n	800c4c6 <__sflush_r+0xda>
 800c4f2:	bf00      	nop
 800c4f4:	dfbffffe 	.word	0xdfbffffe

0800c4f8 <_fflush_r>:
 800c4f8:	b538      	push	{r3, r4, r5, lr}
 800c4fa:	690b      	ldr	r3, [r1, #16]
 800c4fc:	4605      	mov	r5, r0
 800c4fe:	460c      	mov	r4, r1
 800c500:	b913      	cbnz	r3, 800c508 <_fflush_r+0x10>
 800c502:	2500      	movs	r5, #0
 800c504:	4628      	mov	r0, r5
 800c506:	bd38      	pop	{r3, r4, r5, pc}
 800c508:	b118      	cbz	r0, 800c512 <_fflush_r+0x1a>
 800c50a:	6a03      	ldr	r3, [r0, #32]
 800c50c:	b90b      	cbnz	r3, 800c512 <_fflush_r+0x1a>
 800c50e:	f7fe f9df 	bl	800a8d0 <__sinit>
 800c512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d0f3      	beq.n	800c502 <_fflush_r+0xa>
 800c51a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c51c:	07d0      	lsls	r0, r2, #31
 800c51e:	d404      	bmi.n	800c52a <_fflush_r+0x32>
 800c520:	0599      	lsls	r1, r3, #22
 800c522:	d402      	bmi.n	800c52a <_fflush_r+0x32>
 800c524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c526:	f7fe fb03 	bl	800ab30 <__retarget_lock_acquire_recursive>
 800c52a:	4628      	mov	r0, r5
 800c52c:	4621      	mov	r1, r4
 800c52e:	f7ff ff5d 	bl	800c3ec <__sflush_r>
 800c532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c534:	07da      	lsls	r2, r3, #31
 800c536:	4605      	mov	r5, r0
 800c538:	d4e4      	bmi.n	800c504 <_fflush_r+0xc>
 800c53a:	89a3      	ldrh	r3, [r4, #12]
 800c53c:	059b      	lsls	r3, r3, #22
 800c53e:	d4e1      	bmi.n	800c504 <_fflush_r+0xc>
 800c540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c542:	f7fe faf6 	bl	800ab32 <__retarget_lock_release_recursive>
 800c546:	e7dd      	b.n	800c504 <_fflush_r+0xc>

0800c548 <_sbrk_r>:
 800c548:	b538      	push	{r3, r4, r5, lr}
 800c54a:	4d06      	ldr	r5, [pc, #24]	; (800c564 <_sbrk_r+0x1c>)
 800c54c:	2300      	movs	r3, #0
 800c54e:	4604      	mov	r4, r0
 800c550:	4608      	mov	r0, r1
 800c552:	602b      	str	r3, [r5, #0]
 800c554:	f7f6 f86a 	bl	800262c <_sbrk>
 800c558:	1c43      	adds	r3, r0, #1
 800c55a:	d102      	bne.n	800c562 <_sbrk_r+0x1a>
 800c55c:	682b      	ldr	r3, [r5, #0]
 800c55e:	b103      	cbz	r3, 800c562 <_sbrk_r+0x1a>
 800c560:	6023      	str	r3, [r4, #0]
 800c562:	bd38      	pop	{r3, r4, r5, pc}
 800c564:	200029c4 	.word	0x200029c4

0800c568 <__assert_func>:
 800c568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c56a:	4614      	mov	r4, r2
 800c56c:	461a      	mov	r2, r3
 800c56e:	4b09      	ldr	r3, [pc, #36]	; (800c594 <__assert_func+0x2c>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4605      	mov	r5, r0
 800c574:	68d8      	ldr	r0, [r3, #12]
 800c576:	b14c      	cbz	r4, 800c58c <__assert_func+0x24>
 800c578:	4b07      	ldr	r3, [pc, #28]	; (800c598 <__assert_func+0x30>)
 800c57a:	9100      	str	r1, [sp, #0]
 800c57c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c580:	4906      	ldr	r1, [pc, #24]	; (800c59c <__assert_func+0x34>)
 800c582:	462b      	mov	r3, r5
 800c584:	f000 f872 	bl	800c66c <fiprintf>
 800c588:	f000 f882 	bl	800c690 <abort>
 800c58c:	4b04      	ldr	r3, [pc, #16]	; (800c5a0 <__assert_func+0x38>)
 800c58e:	461c      	mov	r4, r3
 800c590:	e7f3      	b.n	800c57a <__assert_func+0x12>
 800c592:	bf00      	nop
 800c594:	200001f4 	.word	0x200001f4
 800c598:	0800dd57 	.word	0x0800dd57
 800c59c:	0800dd64 	.word	0x0800dd64
 800c5a0:	0800dd92 	.word	0x0800dd92

0800c5a4 <_calloc_r>:
 800c5a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5a6:	fba1 2402 	umull	r2, r4, r1, r2
 800c5aa:	b94c      	cbnz	r4, 800c5c0 <_calloc_r+0x1c>
 800c5ac:	4611      	mov	r1, r2
 800c5ae:	9201      	str	r2, [sp, #4]
 800c5b0:	f7ff f9bc 	bl	800b92c <_malloc_r>
 800c5b4:	9a01      	ldr	r2, [sp, #4]
 800c5b6:	4605      	mov	r5, r0
 800c5b8:	b930      	cbnz	r0, 800c5c8 <_calloc_r+0x24>
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	b003      	add	sp, #12
 800c5be:	bd30      	pop	{r4, r5, pc}
 800c5c0:	220c      	movs	r2, #12
 800c5c2:	6002      	str	r2, [r0, #0]
 800c5c4:	2500      	movs	r5, #0
 800c5c6:	e7f8      	b.n	800c5ba <_calloc_r+0x16>
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	f7fe fa34 	bl	800aa36 <memset>
 800c5ce:	e7f4      	b.n	800c5ba <_calloc_r+0x16>

0800c5d0 <__ascii_mbtowc>:
 800c5d0:	b082      	sub	sp, #8
 800c5d2:	b901      	cbnz	r1, 800c5d6 <__ascii_mbtowc+0x6>
 800c5d4:	a901      	add	r1, sp, #4
 800c5d6:	b142      	cbz	r2, 800c5ea <__ascii_mbtowc+0x1a>
 800c5d8:	b14b      	cbz	r3, 800c5ee <__ascii_mbtowc+0x1e>
 800c5da:	7813      	ldrb	r3, [r2, #0]
 800c5dc:	600b      	str	r3, [r1, #0]
 800c5de:	7812      	ldrb	r2, [r2, #0]
 800c5e0:	1e10      	subs	r0, r2, #0
 800c5e2:	bf18      	it	ne
 800c5e4:	2001      	movne	r0, #1
 800c5e6:	b002      	add	sp, #8
 800c5e8:	4770      	bx	lr
 800c5ea:	4610      	mov	r0, r2
 800c5ec:	e7fb      	b.n	800c5e6 <__ascii_mbtowc+0x16>
 800c5ee:	f06f 0001 	mvn.w	r0, #1
 800c5f2:	e7f8      	b.n	800c5e6 <__ascii_mbtowc+0x16>

0800c5f4 <_realloc_r>:
 800c5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f8:	4680      	mov	r8, r0
 800c5fa:	4614      	mov	r4, r2
 800c5fc:	460e      	mov	r6, r1
 800c5fe:	b921      	cbnz	r1, 800c60a <_realloc_r+0x16>
 800c600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c604:	4611      	mov	r1, r2
 800c606:	f7ff b991 	b.w	800b92c <_malloc_r>
 800c60a:	b92a      	cbnz	r2, 800c618 <_realloc_r+0x24>
 800c60c:	f7ff f91a 	bl	800b844 <_free_r>
 800c610:	4625      	mov	r5, r4
 800c612:	4628      	mov	r0, r5
 800c614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c618:	f000 f841 	bl	800c69e <_malloc_usable_size_r>
 800c61c:	4284      	cmp	r4, r0
 800c61e:	4607      	mov	r7, r0
 800c620:	d802      	bhi.n	800c628 <_realloc_r+0x34>
 800c622:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c626:	d812      	bhi.n	800c64e <_realloc_r+0x5a>
 800c628:	4621      	mov	r1, r4
 800c62a:	4640      	mov	r0, r8
 800c62c:	f7ff f97e 	bl	800b92c <_malloc_r>
 800c630:	4605      	mov	r5, r0
 800c632:	2800      	cmp	r0, #0
 800c634:	d0ed      	beq.n	800c612 <_realloc_r+0x1e>
 800c636:	42bc      	cmp	r4, r7
 800c638:	4622      	mov	r2, r4
 800c63a:	4631      	mov	r1, r6
 800c63c:	bf28      	it	cs
 800c63e:	463a      	movcs	r2, r7
 800c640:	f7fe fa78 	bl	800ab34 <memcpy>
 800c644:	4631      	mov	r1, r6
 800c646:	4640      	mov	r0, r8
 800c648:	f7ff f8fc 	bl	800b844 <_free_r>
 800c64c:	e7e1      	b.n	800c612 <_realloc_r+0x1e>
 800c64e:	4635      	mov	r5, r6
 800c650:	e7df      	b.n	800c612 <_realloc_r+0x1e>

0800c652 <__ascii_wctomb>:
 800c652:	b149      	cbz	r1, 800c668 <__ascii_wctomb+0x16>
 800c654:	2aff      	cmp	r2, #255	; 0xff
 800c656:	bf85      	ittet	hi
 800c658:	238a      	movhi	r3, #138	; 0x8a
 800c65a:	6003      	strhi	r3, [r0, #0]
 800c65c:	700a      	strbls	r2, [r1, #0]
 800c65e:	f04f 30ff 	movhi.w	r0, #4294967295
 800c662:	bf98      	it	ls
 800c664:	2001      	movls	r0, #1
 800c666:	4770      	bx	lr
 800c668:	4608      	mov	r0, r1
 800c66a:	4770      	bx	lr

0800c66c <fiprintf>:
 800c66c:	b40e      	push	{r1, r2, r3}
 800c66e:	b503      	push	{r0, r1, lr}
 800c670:	4601      	mov	r1, r0
 800c672:	ab03      	add	r3, sp, #12
 800c674:	4805      	ldr	r0, [pc, #20]	; (800c68c <fiprintf+0x20>)
 800c676:	f853 2b04 	ldr.w	r2, [r3], #4
 800c67a:	6800      	ldr	r0, [r0, #0]
 800c67c:	9301      	str	r3, [sp, #4]
 800c67e:	f000 f83f 	bl	800c700 <_vfiprintf_r>
 800c682:	b002      	add	sp, #8
 800c684:	f85d eb04 	ldr.w	lr, [sp], #4
 800c688:	b003      	add	sp, #12
 800c68a:	4770      	bx	lr
 800c68c:	200001f4 	.word	0x200001f4

0800c690 <abort>:
 800c690:	b508      	push	{r3, lr}
 800c692:	2006      	movs	r0, #6
 800c694:	f000 fa0c 	bl	800cab0 <raise>
 800c698:	2001      	movs	r0, #1
 800c69a:	f7f5 ff4f 	bl	800253c <_exit>

0800c69e <_malloc_usable_size_r>:
 800c69e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6a2:	1f18      	subs	r0, r3, #4
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	bfbc      	itt	lt
 800c6a8:	580b      	ldrlt	r3, [r1, r0]
 800c6aa:	18c0      	addlt	r0, r0, r3
 800c6ac:	4770      	bx	lr

0800c6ae <__sfputc_r>:
 800c6ae:	6893      	ldr	r3, [r2, #8]
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	b410      	push	{r4}
 800c6b6:	6093      	str	r3, [r2, #8]
 800c6b8:	da08      	bge.n	800c6cc <__sfputc_r+0x1e>
 800c6ba:	6994      	ldr	r4, [r2, #24]
 800c6bc:	42a3      	cmp	r3, r4
 800c6be:	db01      	blt.n	800c6c4 <__sfputc_r+0x16>
 800c6c0:	290a      	cmp	r1, #10
 800c6c2:	d103      	bne.n	800c6cc <__sfputc_r+0x1e>
 800c6c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6c8:	f000 b934 	b.w	800c934 <__swbuf_r>
 800c6cc:	6813      	ldr	r3, [r2, #0]
 800c6ce:	1c58      	adds	r0, r3, #1
 800c6d0:	6010      	str	r0, [r2, #0]
 800c6d2:	7019      	strb	r1, [r3, #0]
 800c6d4:	4608      	mov	r0, r1
 800c6d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <__sfputs_r>:
 800c6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6de:	4606      	mov	r6, r0
 800c6e0:	460f      	mov	r7, r1
 800c6e2:	4614      	mov	r4, r2
 800c6e4:	18d5      	adds	r5, r2, r3
 800c6e6:	42ac      	cmp	r4, r5
 800c6e8:	d101      	bne.n	800c6ee <__sfputs_r+0x12>
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	e007      	b.n	800c6fe <__sfputs_r+0x22>
 800c6ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6f2:	463a      	mov	r2, r7
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	f7ff ffda 	bl	800c6ae <__sfputc_r>
 800c6fa:	1c43      	adds	r3, r0, #1
 800c6fc:	d1f3      	bne.n	800c6e6 <__sfputs_r+0xa>
 800c6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c700 <_vfiprintf_r>:
 800c700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c704:	460d      	mov	r5, r1
 800c706:	b09d      	sub	sp, #116	; 0x74
 800c708:	4614      	mov	r4, r2
 800c70a:	4698      	mov	r8, r3
 800c70c:	4606      	mov	r6, r0
 800c70e:	b118      	cbz	r0, 800c718 <_vfiprintf_r+0x18>
 800c710:	6a03      	ldr	r3, [r0, #32]
 800c712:	b90b      	cbnz	r3, 800c718 <_vfiprintf_r+0x18>
 800c714:	f7fe f8dc 	bl	800a8d0 <__sinit>
 800c718:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c71a:	07d9      	lsls	r1, r3, #31
 800c71c:	d405      	bmi.n	800c72a <_vfiprintf_r+0x2a>
 800c71e:	89ab      	ldrh	r3, [r5, #12]
 800c720:	059a      	lsls	r2, r3, #22
 800c722:	d402      	bmi.n	800c72a <_vfiprintf_r+0x2a>
 800c724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c726:	f7fe fa03 	bl	800ab30 <__retarget_lock_acquire_recursive>
 800c72a:	89ab      	ldrh	r3, [r5, #12]
 800c72c:	071b      	lsls	r3, r3, #28
 800c72e:	d501      	bpl.n	800c734 <_vfiprintf_r+0x34>
 800c730:	692b      	ldr	r3, [r5, #16]
 800c732:	b99b      	cbnz	r3, 800c75c <_vfiprintf_r+0x5c>
 800c734:	4629      	mov	r1, r5
 800c736:	4630      	mov	r0, r6
 800c738:	f000 f93a 	bl	800c9b0 <__swsetup_r>
 800c73c:	b170      	cbz	r0, 800c75c <_vfiprintf_r+0x5c>
 800c73e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c740:	07dc      	lsls	r4, r3, #31
 800c742:	d504      	bpl.n	800c74e <_vfiprintf_r+0x4e>
 800c744:	f04f 30ff 	mov.w	r0, #4294967295
 800c748:	b01d      	add	sp, #116	; 0x74
 800c74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74e:	89ab      	ldrh	r3, [r5, #12]
 800c750:	0598      	lsls	r0, r3, #22
 800c752:	d4f7      	bmi.n	800c744 <_vfiprintf_r+0x44>
 800c754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c756:	f7fe f9ec 	bl	800ab32 <__retarget_lock_release_recursive>
 800c75a:	e7f3      	b.n	800c744 <_vfiprintf_r+0x44>
 800c75c:	2300      	movs	r3, #0
 800c75e:	9309      	str	r3, [sp, #36]	; 0x24
 800c760:	2320      	movs	r3, #32
 800c762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c766:	f8cd 800c 	str.w	r8, [sp, #12]
 800c76a:	2330      	movs	r3, #48	; 0x30
 800c76c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c920 <_vfiprintf_r+0x220>
 800c770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c774:	f04f 0901 	mov.w	r9, #1
 800c778:	4623      	mov	r3, r4
 800c77a:	469a      	mov	sl, r3
 800c77c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c780:	b10a      	cbz	r2, 800c786 <_vfiprintf_r+0x86>
 800c782:	2a25      	cmp	r2, #37	; 0x25
 800c784:	d1f9      	bne.n	800c77a <_vfiprintf_r+0x7a>
 800c786:	ebba 0b04 	subs.w	fp, sl, r4
 800c78a:	d00b      	beq.n	800c7a4 <_vfiprintf_r+0xa4>
 800c78c:	465b      	mov	r3, fp
 800c78e:	4622      	mov	r2, r4
 800c790:	4629      	mov	r1, r5
 800c792:	4630      	mov	r0, r6
 800c794:	f7ff ffa2 	bl	800c6dc <__sfputs_r>
 800c798:	3001      	adds	r0, #1
 800c79a:	f000 80a9 	beq.w	800c8f0 <_vfiprintf_r+0x1f0>
 800c79e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7a0:	445a      	add	r2, fp
 800c7a2:	9209      	str	r2, [sp, #36]	; 0x24
 800c7a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	f000 80a1 	beq.w	800c8f0 <_vfiprintf_r+0x1f0>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7b8:	f10a 0a01 	add.w	sl, sl, #1
 800c7bc:	9304      	str	r3, [sp, #16]
 800c7be:	9307      	str	r3, [sp, #28]
 800c7c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7c4:	931a      	str	r3, [sp, #104]	; 0x68
 800c7c6:	4654      	mov	r4, sl
 800c7c8:	2205      	movs	r2, #5
 800c7ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ce:	4854      	ldr	r0, [pc, #336]	; (800c920 <_vfiprintf_r+0x220>)
 800c7d0:	f7f3 fd06 	bl	80001e0 <memchr>
 800c7d4:	9a04      	ldr	r2, [sp, #16]
 800c7d6:	b9d8      	cbnz	r0, 800c810 <_vfiprintf_r+0x110>
 800c7d8:	06d1      	lsls	r1, r2, #27
 800c7da:	bf44      	itt	mi
 800c7dc:	2320      	movmi	r3, #32
 800c7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7e2:	0713      	lsls	r3, r2, #28
 800c7e4:	bf44      	itt	mi
 800c7e6:	232b      	movmi	r3, #43	; 0x2b
 800c7e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f0:	2b2a      	cmp	r3, #42	; 0x2a
 800c7f2:	d015      	beq.n	800c820 <_vfiprintf_r+0x120>
 800c7f4:	9a07      	ldr	r2, [sp, #28]
 800c7f6:	4654      	mov	r4, sl
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	f04f 0c0a 	mov.w	ip, #10
 800c7fe:	4621      	mov	r1, r4
 800c800:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c804:	3b30      	subs	r3, #48	; 0x30
 800c806:	2b09      	cmp	r3, #9
 800c808:	d94d      	bls.n	800c8a6 <_vfiprintf_r+0x1a6>
 800c80a:	b1b0      	cbz	r0, 800c83a <_vfiprintf_r+0x13a>
 800c80c:	9207      	str	r2, [sp, #28]
 800c80e:	e014      	b.n	800c83a <_vfiprintf_r+0x13a>
 800c810:	eba0 0308 	sub.w	r3, r0, r8
 800c814:	fa09 f303 	lsl.w	r3, r9, r3
 800c818:	4313      	orrs	r3, r2
 800c81a:	9304      	str	r3, [sp, #16]
 800c81c:	46a2      	mov	sl, r4
 800c81e:	e7d2      	b.n	800c7c6 <_vfiprintf_r+0xc6>
 800c820:	9b03      	ldr	r3, [sp, #12]
 800c822:	1d19      	adds	r1, r3, #4
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	9103      	str	r1, [sp, #12]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	bfbb      	ittet	lt
 800c82c:	425b      	neglt	r3, r3
 800c82e:	f042 0202 	orrlt.w	r2, r2, #2
 800c832:	9307      	strge	r3, [sp, #28]
 800c834:	9307      	strlt	r3, [sp, #28]
 800c836:	bfb8      	it	lt
 800c838:	9204      	strlt	r2, [sp, #16]
 800c83a:	7823      	ldrb	r3, [r4, #0]
 800c83c:	2b2e      	cmp	r3, #46	; 0x2e
 800c83e:	d10c      	bne.n	800c85a <_vfiprintf_r+0x15a>
 800c840:	7863      	ldrb	r3, [r4, #1]
 800c842:	2b2a      	cmp	r3, #42	; 0x2a
 800c844:	d134      	bne.n	800c8b0 <_vfiprintf_r+0x1b0>
 800c846:	9b03      	ldr	r3, [sp, #12]
 800c848:	1d1a      	adds	r2, r3, #4
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	9203      	str	r2, [sp, #12]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	bfb8      	it	lt
 800c852:	f04f 33ff 	movlt.w	r3, #4294967295
 800c856:	3402      	adds	r4, #2
 800c858:	9305      	str	r3, [sp, #20]
 800c85a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c930 <_vfiprintf_r+0x230>
 800c85e:	7821      	ldrb	r1, [r4, #0]
 800c860:	2203      	movs	r2, #3
 800c862:	4650      	mov	r0, sl
 800c864:	f7f3 fcbc 	bl	80001e0 <memchr>
 800c868:	b138      	cbz	r0, 800c87a <_vfiprintf_r+0x17a>
 800c86a:	9b04      	ldr	r3, [sp, #16]
 800c86c:	eba0 000a 	sub.w	r0, r0, sl
 800c870:	2240      	movs	r2, #64	; 0x40
 800c872:	4082      	lsls	r2, r0
 800c874:	4313      	orrs	r3, r2
 800c876:	3401      	adds	r4, #1
 800c878:	9304      	str	r3, [sp, #16]
 800c87a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c87e:	4829      	ldr	r0, [pc, #164]	; (800c924 <_vfiprintf_r+0x224>)
 800c880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c884:	2206      	movs	r2, #6
 800c886:	f7f3 fcab 	bl	80001e0 <memchr>
 800c88a:	2800      	cmp	r0, #0
 800c88c:	d03f      	beq.n	800c90e <_vfiprintf_r+0x20e>
 800c88e:	4b26      	ldr	r3, [pc, #152]	; (800c928 <_vfiprintf_r+0x228>)
 800c890:	bb1b      	cbnz	r3, 800c8da <_vfiprintf_r+0x1da>
 800c892:	9b03      	ldr	r3, [sp, #12]
 800c894:	3307      	adds	r3, #7
 800c896:	f023 0307 	bic.w	r3, r3, #7
 800c89a:	3308      	adds	r3, #8
 800c89c:	9303      	str	r3, [sp, #12]
 800c89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a0:	443b      	add	r3, r7
 800c8a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c8a4:	e768      	b.n	800c778 <_vfiprintf_r+0x78>
 800c8a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8aa:	460c      	mov	r4, r1
 800c8ac:	2001      	movs	r0, #1
 800c8ae:	e7a6      	b.n	800c7fe <_vfiprintf_r+0xfe>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	3401      	adds	r4, #1
 800c8b4:	9305      	str	r3, [sp, #20]
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	f04f 0c0a 	mov.w	ip, #10
 800c8bc:	4620      	mov	r0, r4
 800c8be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8c2:	3a30      	subs	r2, #48	; 0x30
 800c8c4:	2a09      	cmp	r2, #9
 800c8c6:	d903      	bls.n	800c8d0 <_vfiprintf_r+0x1d0>
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d0c6      	beq.n	800c85a <_vfiprintf_r+0x15a>
 800c8cc:	9105      	str	r1, [sp, #20]
 800c8ce:	e7c4      	b.n	800c85a <_vfiprintf_r+0x15a>
 800c8d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e7f0      	b.n	800c8bc <_vfiprintf_r+0x1bc>
 800c8da:	ab03      	add	r3, sp, #12
 800c8dc:	9300      	str	r3, [sp, #0]
 800c8de:	462a      	mov	r2, r5
 800c8e0:	4b12      	ldr	r3, [pc, #72]	; (800c92c <_vfiprintf_r+0x22c>)
 800c8e2:	a904      	add	r1, sp, #16
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	f7fd fbb3 	bl	800a050 <_printf_float>
 800c8ea:	4607      	mov	r7, r0
 800c8ec:	1c78      	adds	r0, r7, #1
 800c8ee:	d1d6      	bne.n	800c89e <_vfiprintf_r+0x19e>
 800c8f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8f2:	07d9      	lsls	r1, r3, #31
 800c8f4:	d405      	bmi.n	800c902 <_vfiprintf_r+0x202>
 800c8f6:	89ab      	ldrh	r3, [r5, #12]
 800c8f8:	059a      	lsls	r2, r3, #22
 800c8fa:	d402      	bmi.n	800c902 <_vfiprintf_r+0x202>
 800c8fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8fe:	f7fe f918 	bl	800ab32 <__retarget_lock_release_recursive>
 800c902:	89ab      	ldrh	r3, [r5, #12]
 800c904:	065b      	lsls	r3, r3, #25
 800c906:	f53f af1d 	bmi.w	800c744 <_vfiprintf_r+0x44>
 800c90a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c90c:	e71c      	b.n	800c748 <_vfiprintf_r+0x48>
 800c90e:	ab03      	add	r3, sp, #12
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	462a      	mov	r2, r5
 800c914:	4b05      	ldr	r3, [pc, #20]	; (800c92c <_vfiprintf_r+0x22c>)
 800c916:	a904      	add	r1, sp, #16
 800c918:	4630      	mov	r0, r6
 800c91a:	f7fd fe3d 	bl	800a598 <_printf_i>
 800c91e:	e7e4      	b.n	800c8ea <_vfiprintf_r+0x1ea>
 800c920:	0800dd3c 	.word	0x0800dd3c
 800c924:	0800dd46 	.word	0x0800dd46
 800c928:	0800a051 	.word	0x0800a051
 800c92c:	0800c6dd 	.word	0x0800c6dd
 800c930:	0800dd42 	.word	0x0800dd42

0800c934 <__swbuf_r>:
 800c934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c936:	460e      	mov	r6, r1
 800c938:	4614      	mov	r4, r2
 800c93a:	4605      	mov	r5, r0
 800c93c:	b118      	cbz	r0, 800c946 <__swbuf_r+0x12>
 800c93e:	6a03      	ldr	r3, [r0, #32]
 800c940:	b90b      	cbnz	r3, 800c946 <__swbuf_r+0x12>
 800c942:	f7fd ffc5 	bl	800a8d0 <__sinit>
 800c946:	69a3      	ldr	r3, [r4, #24]
 800c948:	60a3      	str	r3, [r4, #8]
 800c94a:	89a3      	ldrh	r3, [r4, #12]
 800c94c:	071a      	lsls	r2, r3, #28
 800c94e:	d525      	bpl.n	800c99c <__swbuf_r+0x68>
 800c950:	6923      	ldr	r3, [r4, #16]
 800c952:	b31b      	cbz	r3, 800c99c <__swbuf_r+0x68>
 800c954:	6823      	ldr	r3, [r4, #0]
 800c956:	6922      	ldr	r2, [r4, #16]
 800c958:	1a98      	subs	r0, r3, r2
 800c95a:	6963      	ldr	r3, [r4, #20]
 800c95c:	b2f6      	uxtb	r6, r6
 800c95e:	4283      	cmp	r3, r0
 800c960:	4637      	mov	r7, r6
 800c962:	dc04      	bgt.n	800c96e <__swbuf_r+0x3a>
 800c964:	4621      	mov	r1, r4
 800c966:	4628      	mov	r0, r5
 800c968:	f7ff fdc6 	bl	800c4f8 <_fflush_r>
 800c96c:	b9e0      	cbnz	r0, 800c9a8 <__swbuf_r+0x74>
 800c96e:	68a3      	ldr	r3, [r4, #8]
 800c970:	3b01      	subs	r3, #1
 800c972:	60a3      	str	r3, [r4, #8]
 800c974:	6823      	ldr	r3, [r4, #0]
 800c976:	1c5a      	adds	r2, r3, #1
 800c978:	6022      	str	r2, [r4, #0]
 800c97a:	701e      	strb	r6, [r3, #0]
 800c97c:	6962      	ldr	r2, [r4, #20]
 800c97e:	1c43      	adds	r3, r0, #1
 800c980:	429a      	cmp	r2, r3
 800c982:	d004      	beq.n	800c98e <__swbuf_r+0x5a>
 800c984:	89a3      	ldrh	r3, [r4, #12]
 800c986:	07db      	lsls	r3, r3, #31
 800c988:	d506      	bpl.n	800c998 <__swbuf_r+0x64>
 800c98a:	2e0a      	cmp	r6, #10
 800c98c:	d104      	bne.n	800c998 <__swbuf_r+0x64>
 800c98e:	4621      	mov	r1, r4
 800c990:	4628      	mov	r0, r5
 800c992:	f7ff fdb1 	bl	800c4f8 <_fflush_r>
 800c996:	b938      	cbnz	r0, 800c9a8 <__swbuf_r+0x74>
 800c998:	4638      	mov	r0, r7
 800c99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c99c:	4621      	mov	r1, r4
 800c99e:	4628      	mov	r0, r5
 800c9a0:	f000 f806 	bl	800c9b0 <__swsetup_r>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	d0d5      	beq.n	800c954 <__swbuf_r+0x20>
 800c9a8:	f04f 37ff 	mov.w	r7, #4294967295
 800c9ac:	e7f4      	b.n	800c998 <__swbuf_r+0x64>
	...

0800c9b0 <__swsetup_r>:
 800c9b0:	b538      	push	{r3, r4, r5, lr}
 800c9b2:	4b2a      	ldr	r3, [pc, #168]	; (800ca5c <__swsetup_r+0xac>)
 800c9b4:	4605      	mov	r5, r0
 800c9b6:	6818      	ldr	r0, [r3, #0]
 800c9b8:	460c      	mov	r4, r1
 800c9ba:	b118      	cbz	r0, 800c9c4 <__swsetup_r+0x14>
 800c9bc:	6a03      	ldr	r3, [r0, #32]
 800c9be:	b90b      	cbnz	r3, 800c9c4 <__swsetup_r+0x14>
 800c9c0:	f7fd ff86 	bl	800a8d0 <__sinit>
 800c9c4:	89a3      	ldrh	r3, [r4, #12]
 800c9c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9ca:	0718      	lsls	r0, r3, #28
 800c9cc:	d422      	bmi.n	800ca14 <__swsetup_r+0x64>
 800c9ce:	06d9      	lsls	r1, r3, #27
 800c9d0:	d407      	bmi.n	800c9e2 <__swsetup_r+0x32>
 800c9d2:	2309      	movs	r3, #9
 800c9d4:	602b      	str	r3, [r5, #0]
 800c9d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9da:	81a3      	strh	r3, [r4, #12]
 800c9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e0:	e034      	b.n	800ca4c <__swsetup_r+0x9c>
 800c9e2:	0758      	lsls	r0, r3, #29
 800c9e4:	d512      	bpl.n	800ca0c <__swsetup_r+0x5c>
 800c9e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9e8:	b141      	cbz	r1, 800c9fc <__swsetup_r+0x4c>
 800c9ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9ee:	4299      	cmp	r1, r3
 800c9f0:	d002      	beq.n	800c9f8 <__swsetup_r+0x48>
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	f7fe ff26 	bl	800b844 <_free_r>
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	6363      	str	r3, [r4, #52]	; 0x34
 800c9fc:	89a3      	ldrh	r3, [r4, #12]
 800c9fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca02:	81a3      	strh	r3, [r4, #12]
 800ca04:	2300      	movs	r3, #0
 800ca06:	6063      	str	r3, [r4, #4]
 800ca08:	6923      	ldr	r3, [r4, #16]
 800ca0a:	6023      	str	r3, [r4, #0]
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	f043 0308 	orr.w	r3, r3, #8
 800ca12:	81a3      	strh	r3, [r4, #12]
 800ca14:	6923      	ldr	r3, [r4, #16]
 800ca16:	b94b      	cbnz	r3, 800ca2c <__swsetup_r+0x7c>
 800ca18:	89a3      	ldrh	r3, [r4, #12]
 800ca1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca22:	d003      	beq.n	800ca2c <__swsetup_r+0x7c>
 800ca24:	4621      	mov	r1, r4
 800ca26:	4628      	mov	r0, r5
 800ca28:	f000 f884 	bl	800cb34 <__smakebuf_r>
 800ca2c:	89a0      	ldrh	r0, [r4, #12]
 800ca2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca32:	f010 0301 	ands.w	r3, r0, #1
 800ca36:	d00a      	beq.n	800ca4e <__swsetup_r+0x9e>
 800ca38:	2300      	movs	r3, #0
 800ca3a:	60a3      	str	r3, [r4, #8]
 800ca3c:	6963      	ldr	r3, [r4, #20]
 800ca3e:	425b      	negs	r3, r3
 800ca40:	61a3      	str	r3, [r4, #24]
 800ca42:	6923      	ldr	r3, [r4, #16]
 800ca44:	b943      	cbnz	r3, 800ca58 <__swsetup_r+0xa8>
 800ca46:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca4a:	d1c4      	bne.n	800c9d6 <__swsetup_r+0x26>
 800ca4c:	bd38      	pop	{r3, r4, r5, pc}
 800ca4e:	0781      	lsls	r1, r0, #30
 800ca50:	bf58      	it	pl
 800ca52:	6963      	ldrpl	r3, [r4, #20]
 800ca54:	60a3      	str	r3, [r4, #8]
 800ca56:	e7f4      	b.n	800ca42 <__swsetup_r+0x92>
 800ca58:	2000      	movs	r0, #0
 800ca5a:	e7f7      	b.n	800ca4c <__swsetup_r+0x9c>
 800ca5c:	200001f4 	.word	0x200001f4

0800ca60 <_raise_r>:
 800ca60:	291f      	cmp	r1, #31
 800ca62:	b538      	push	{r3, r4, r5, lr}
 800ca64:	4604      	mov	r4, r0
 800ca66:	460d      	mov	r5, r1
 800ca68:	d904      	bls.n	800ca74 <_raise_r+0x14>
 800ca6a:	2316      	movs	r3, #22
 800ca6c:	6003      	str	r3, [r0, #0]
 800ca6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca72:	bd38      	pop	{r3, r4, r5, pc}
 800ca74:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ca76:	b112      	cbz	r2, 800ca7e <_raise_r+0x1e>
 800ca78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca7c:	b94b      	cbnz	r3, 800ca92 <_raise_r+0x32>
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f000 f830 	bl	800cae4 <_getpid_r>
 800ca84:	462a      	mov	r2, r5
 800ca86:	4601      	mov	r1, r0
 800ca88:	4620      	mov	r0, r4
 800ca8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca8e:	f000 b817 	b.w	800cac0 <_kill_r>
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d00a      	beq.n	800caac <_raise_r+0x4c>
 800ca96:	1c59      	adds	r1, r3, #1
 800ca98:	d103      	bne.n	800caa2 <_raise_r+0x42>
 800ca9a:	2316      	movs	r3, #22
 800ca9c:	6003      	str	r3, [r0, #0]
 800ca9e:	2001      	movs	r0, #1
 800caa0:	e7e7      	b.n	800ca72 <_raise_r+0x12>
 800caa2:	2400      	movs	r4, #0
 800caa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800caa8:	4628      	mov	r0, r5
 800caaa:	4798      	blx	r3
 800caac:	2000      	movs	r0, #0
 800caae:	e7e0      	b.n	800ca72 <_raise_r+0x12>

0800cab0 <raise>:
 800cab0:	4b02      	ldr	r3, [pc, #8]	; (800cabc <raise+0xc>)
 800cab2:	4601      	mov	r1, r0
 800cab4:	6818      	ldr	r0, [r3, #0]
 800cab6:	f7ff bfd3 	b.w	800ca60 <_raise_r>
 800caba:	bf00      	nop
 800cabc:	200001f4 	.word	0x200001f4

0800cac0 <_kill_r>:
 800cac0:	b538      	push	{r3, r4, r5, lr}
 800cac2:	4d07      	ldr	r5, [pc, #28]	; (800cae0 <_kill_r+0x20>)
 800cac4:	2300      	movs	r3, #0
 800cac6:	4604      	mov	r4, r0
 800cac8:	4608      	mov	r0, r1
 800caca:	4611      	mov	r1, r2
 800cacc:	602b      	str	r3, [r5, #0]
 800cace:	f7f5 fd25 	bl	800251c <_kill>
 800cad2:	1c43      	adds	r3, r0, #1
 800cad4:	d102      	bne.n	800cadc <_kill_r+0x1c>
 800cad6:	682b      	ldr	r3, [r5, #0]
 800cad8:	b103      	cbz	r3, 800cadc <_kill_r+0x1c>
 800cada:	6023      	str	r3, [r4, #0]
 800cadc:	bd38      	pop	{r3, r4, r5, pc}
 800cade:	bf00      	nop
 800cae0:	200029c4 	.word	0x200029c4

0800cae4 <_getpid_r>:
 800cae4:	f7f5 bd12 	b.w	800250c <_getpid>

0800cae8 <__swhatbuf_r>:
 800cae8:	b570      	push	{r4, r5, r6, lr}
 800caea:	460c      	mov	r4, r1
 800caec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caf0:	2900      	cmp	r1, #0
 800caf2:	b096      	sub	sp, #88	; 0x58
 800caf4:	4615      	mov	r5, r2
 800caf6:	461e      	mov	r6, r3
 800caf8:	da0d      	bge.n	800cb16 <__swhatbuf_r+0x2e>
 800cafa:	89a3      	ldrh	r3, [r4, #12]
 800cafc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cb00:	f04f 0100 	mov.w	r1, #0
 800cb04:	bf0c      	ite	eq
 800cb06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cb0a:	2340      	movne	r3, #64	; 0x40
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	6031      	str	r1, [r6, #0]
 800cb10:	602b      	str	r3, [r5, #0]
 800cb12:	b016      	add	sp, #88	; 0x58
 800cb14:	bd70      	pop	{r4, r5, r6, pc}
 800cb16:	466a      	mov	r2, sp
 800cb18:	f000 f848 	bl	800cbac <_fstat_r>
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	dbec      	blt.n	800cafa <__swhatbuf_r+0x12>
 800cb20:	9901      	ldr	r1, [sp, #4]
 800cb22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cb26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cb2a:	4259      	negs	r1, r3
 800cb2c:	4159      	adcs	r1, r3
 800cb2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb32:	e7eb      	b.n	800cb0c <__swhatbuf_r+0x24>

0800cb34 <__smakebuf_r>:
 800cb34:	898b      	ldrh	r3, [r1, #12]
 800cb36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb38:	079d      	lsls	r5, r3, #30
 800cb3a:	4606      	mov	r6, r0
 800cb3c:	460c      	mov	r4, r1
 800cb3e:	d507      	bpl.n	800cb50 <__smakebuf_r+0x1c>
 800cb40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	6123      	str	r3, [r4, #16]
 800cb48:	2301      	movs	r3, #1
 800cb4a:	6163      	str	r3, [r4, #20]
 800cb4c:	b002      	add	sp, #8
 800cb4e:	bd70      	pop	{r4, r5, r6, pc}
 800cb50:	ab01      	add	r3, sp, #4
 800cb52:	466a      	mov	r2, sp
 800cb54:	f7ff ffc8 	bl	800cae8 <__swhatbuf_r>
 800cb58:	9900      	ldr	r1, [sp, #0]
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	f7fe fee5 	bl	800b92c <_malloc_r>
 800cb62:	b948      	cbnz	r0, 800cb78 <__smakebuf_r+0x44>
 800cb64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb68:	059a      	lsls	r2, r3, #22
 800cb6a:	d4ef      	bmi.n	800cb4c <__smakebuf_r+0x18>
 800cb6c:	f023 0303 	bic.w	r3, r3, #3
 800cb70:	f043 0302 	orr.w	r3, r3, #2
 800cb74:	81a3      	strh	r3, [r4, #12]
 800cb76:	e7e3      	b.n	800cb40 <__smakebuf_r+0xc>
 800cb78:	89a3      	ldrh	r3, [r4, #12]
 800cb7a:	6020      	str	r0, [r4, #0]
 800cb7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb80:	81a3      	strh	r3, [r4, #12]
 800cb82:	9b00      	ldr	r3, [sp, #0]
 800cb84:	6163      	str	r3, [r4, #20]
 800cb86:	9b01      	ldr	r3, [sp, #4]
 800cb88:	6120      	str	r0, [r4, #16]
 800cb8a:	b15b      	cbz	r3, 800cba4 <__smakebuf_r+0x70>
 800cb8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb90:	4630      	mov	r0, r6
 800cb92:	f000 f81d 	bl	800cbd0 <_isatty_r>
 800cb96:	b128      	cbz	r0, 800cba4 <__smakebuf_r+0x70>
 800cb98:	89a3      	ldrh	r3, [r4, #12]
 800cb9a:	f023 0303 	bic.w	r3, r3, #3
 800cb9e:	f043 0301 	orr.w	r3, r3, #1
 800cba2:	81a3      	strh	r3, [r4, #12]
 800cba4:	89a3      	ldrh	r3, [r4, #12]
 800cba6:	431d      	orrs	r5, r3
 800cba8:	81a5      	strh	r5, [r4, #12]
 800cbaa:	e7cf      	b.n	800cb4c <__smakebuf_r+0x18>

0800cbac <_fstat_r>:
 800cbac:	b538      	push	{r3, r4, r5, lr}
 800cbae:	4d07      	ldr	r5, [pc, #28]	; (800cbcc <_fstat_r+0x20>)
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	4608      	mov	r0, r1
 800cbb6:	4611      	mov	r1, r2
 800cbb8:	602b      	str	r3, [r5, #0]
 800cbba:	f7f5 fd0e 	bl	80025da <_fstat>
 800cbbe:	1c43      	adds	r3, r0, #1
 800cbc0:	d102      	bne.n	800cbc8 <_fstat_r+0x1c>
 800cbc2:	682b      	ldr	r3, [r5, #0]
 800cbc4:	b103      	cbz	r3, 800cbc8 <_fstat_r+0x1c>
 800cbc6:	6023      	str	r3, [r4, #0]
 800cbc8:	bd38      	pop	{r3, r4, r5, pc}
 800cbca:	bf00      	nop
 800cbcc:	200029c4 	.word	0x200029c4

0800cbd0 <_isatty_r>:
 800cbd0:	b538      	push	{r3, r4, r5, lr}
 800cbd2:	4d06      	ldr	r5, [pc, #24]	; (800cbec <_isatty_r+0x1c>)
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	4608      	mov	r0, r1
 800cbda:	602b      	str	r3, [r5, #0]
 800cbdc:	f7f5 fd0d 	bl	80025fa <_isatty>
 800cbe0:	1c43      	adds	r3, r0, #1
 800cbe2:	d102      	bne.n	800cbea <_isatty_r+0x1a>
 800cbe4:	682b      	ldr	r3, [r5, #0]
 800cbe6:	b103      	cbz	r3, 800cbea <_isatty_r+0x1a>
 800cbe8:	6023      	str	r3, [r4, #0]
 800cbea:	bd38      	pop	{r3, r4, r5, pc}
 800cbec:	200029c4 	.word	0x200029c4

0800cbf0 <atan2>:
 800cbf0:	f000 bab2 	b.w	800d158 <__ieee754_atan2>

0800cbf4 <sqrt>:
 800cbf4:	b538      	push	{r3, r4, r5, lr}
 800cbf6:	ed2d 8b02 	vpush	{d8}
 800cbfa:	ec55 4b10 	vmov	r4, r5, d0
 800cbfe:	f000 f9d1 	bl	800cfa4 <__ieee754_sqrt>
 800cc02:	4622      	mov	r2, r4
 800cc04:	462b      	mov	r3, r5
 800cc06:	4620      	mov	r0, r4
 800cc08:	4629      	mov	r1, r5
 800cc0a:	eeb0 8a40 	vmov.f32	s16, s0
 800cc0e:	eef0 8a60 	vmov.f32	s17, s1
 800cc12:	f7f3 ff93 	bl	8000b3c <__aeabi_dcmpun>
 800cc16:	b990      	cbnz	r0, 800cc3e <sqrt+0x4a>
 800cc18:	2200      	movs	r2, #0
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	4629      	mov	r1, r5
 800cc20:	f7f3 ff64 	bl	8000aec <__aeabi_dcmplt>
 800cc24:	b158      	cbz	r0, 800cc3e <sqrt+0x4a>
 800cc26:	f7fd ff59 	bl	800aadc <__errno>
 800cc2a:	2321      	movs	r3, #33	; 0x21
 800cc2c:	6003      	str	r3, [r0, #0]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	2300      	movs	r3, #0
 800cc32:	4610      	mov	r0, r2
 800cc34:	4619      	mov	r1, r3
 800cc36:	f7f3 fe11 	bl	800085c <__aeabi_ddiv>
 800cc3a:	ec41 0b18 	vmov	d8, r0, r1
 800cc3e:	eeb0 0a48 	vmov.f32	s0, s16
 800cc42:	eef0 0a68 	vmov.f32	s1, s17
 800cc46:	ecbd 8b02 	vpop	{d8}
 800cc4a:	bd38      	pop	{r3, r4, r5, pc}
 800cc4c:	0000      	movs	r0, r0
	...

0800cc50 <atan>:
 800cc50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc54:	ec55 4b10 	vmov	r4, r5, d0
 800cc58:	4bc3      	ldr	r3, [pc, #780]	; (800cf68 <atan+0x318>)
 800cc5a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cc5e:	429e      	cmp	r6, r3
 800cc60:	46ab      	mov	fp, r5
 800cc62:	dd18      	ble.n	800cc96 <atan+0x46>
 800cc64:	4bc1      	ldr	r3, [pc, #772]	; (800cf6c <atan+0x31c>)
 800cc66:	429e      	cmp	r6, r3
 800cc68:	dc01      	bgt.n	800cc6e <atan+0x1e>
 800cc6a:	d109      	bne.n	800cc80 <atan+0x30>
 800cc6c:	b144      	cbz	r4, 800cc80 <atan+0x30>
 800cc6e:	4622      	mov	r2, r4
 800cc70:	462b      	mov	r3, r5
 800cc72:	4620      	mov	r0, r4
 800cc74:	4629      	mov	r1, r5
 800cc76:	f7f3 fb11 	bl	800029c <__adddf3>
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	460d      	mov	r5, r1
 800cc7e:	e006      	b.n	800cc8e <atan+0x3e>
 800cc80:	f1bb 0f00 	cmp.w	fp, #0
 800cc84:	f300 8131 	bgt.w	800ceea <atan+0x29a>
 800cc88:	a59b      	add	r5, pc, #620	; (adr r5, 800cef8 <atan+0x2a8>)
 800cc8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cc8e:	ec45 4b10 	vmov	d0, r4, r5
 800cc92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc96:	4bb6      	ldr	r3, [pc, #728]	; (800cf70 <atan+0x320>)
 800cc98:	429e      	cmp	r6, r3
 800cc9a:	dc14      	bgt.n	800ccc6 <atan+0x76>
 800cc9c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cca0:	429e      	cmp	r6, r3
 800cca2:	dc0d      	bgt.n	800ccc0 <atan+0x70>
 800cca4:	a396      	add	r3, pc, #600	; (adr r3, 800cf00 <atan+0x2b0>)
 800cca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccaa:	ee10 0a10 	vmov	r0, s0
 800ccae:	4629      	mov	r1, r5
 800ccb0:	f7f3 faf4 	bl	800029c <__adddf3>
 800ccb4:	4baf      	ldr	r3, [pc, #700]	; (800cf74 <atan+0x324>)
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f7f3 ff36 	bl	8000b28 <__aeabi_dcmpgt>
 800ccbc:	2800      	cmp	r0, #0
 800ccbe:	d1e6      	bne.n	800cc8e <atan+0x3e>
 800ccc0:	f04f 3aff 	mov.w	sl, #4294967295
 800ccc4:	e02b      	b.n	800cd1e <atan+0xce>
 800ccc6:	f000 f963 	bl	800cf90 <fabs>
 800ccca:	4bab      	ldr	r3, [pc, #684]	; (800cf78 <atan+0x328>)
 800cccc:	429e      	cmp	r6, r3
 800ccce:	ec55 4b10 	vmov	r4, r5, d0
 800ccd2:	f300 80bf 	bgt.w	800ce54 <atan+0x204>
 800ccd6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ccda:	429e      	cmp	r6, r3
 800ccdc:	f300 80a0 	bgt.w	800ce20 <atan+0x1d0>
 800cce0:	ee10 2a10 	vmov	r2, s0
 800cce4:	ee10 0a10 	vmov	r0, s0
 800cce8:	462b      	mov	r3, r5
 800ccea:	4629      	mov	r1, r5
 800ccec:	f7f3 fad6 	bl	800029c <__adddf3>
 800ccf0:	4ba0      	ldr	r3, [pc, #640]	; (800cf74 <atan+0x324>)
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f7f3 fad0 	bl	8000298 <__aeabi_dsub>
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	4606      	mov	r6, r0
 800ccfc:	460f      	mov	r7, r1
 800ccfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd02:	4620      	mov	r0, r4
 800cd04:	4629      	mov	r1, r5
 800cd06:	f7f3 fac9 	bl	800029c <__adddf3>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	4630      	mov	r0, r6
 800cd10:	4639      	mov	r1, r7
 800cd12:	f7f3 fda3 	bl	800085c <__aeabi_ddiv>
 800cd16:	f04f 0a00 	mov.w	sl, #0
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	460d      	mov	r5, r1
 800cd1e:	4622      	mov	r2, r4
 800cd20:	462b      	mov	r3, r5
 800cd22:	4620      	mov	r0, r4
 800cd24:	4629      	mov	r1, r5
 800cd26:	f7f3 fc6f 	bl	8000608 <__aeabi_dmul>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	4680      	mov	r8, r0
 800cd30:	4689      	mov	r9, r1
 800cd32:	f7f3 fc69 	bl	8000608 <__aeabi_dmul>
 800cd36:	a374      	add	r3, pc, #464	; (adr r3, 800cf08 <atan+0x2b8>)
 800cd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3c:	4606      	mov	r6, r0
 800cd3e:	460f      	mov	r7, r1
 800cd40:	f7f3 fc62 	bl	8000608 <__aeabi_dmul>
 800cd44:	a372      	add	r3, pc, #456	; (adr r3, 800cf10 <atan+0x2c0>)
 800cd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4a:	f7f3 faa7 	bl	800029c <__adddf3>
 800cd4e:	4632      	mov	r2, r6
 800cd50:	463b      	mov	r3, r7
 800cd52:	f7f3 fc59 	bl	8000608 <__aeabi_dmul>
 800cd56:	a370      	add	r3, pc, #448	; (adr r3, 800cf18 <atan+0x2c8>)
 800cd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5c:	f7f3 fa9e 	bl	800029c <__adddf3>
 800cd60:	4632      	mov	r2, r6
 800cd62:	463b      	mov	r3, r7
 800cd64:	f7f3 fc50 	bl	8000608 <__aeabi_dmul>
 800cd68:	a36d      	add	r3, pc, #436	; (adr r3, 800cf20 <atan+0x2d0>)
 800cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6e:	f7f3 fa95 	bl	800029c <__adddf3>
 800cd72:	4632      	mov	r2, r6
 800cd74:	463b      	mov	r3, r7
 800cd76:	f7f3 fc47 	bl	8000608 <__aeabi_dmul>
 800cd7a:	a36b      	add	r3, pc, #428	; (adr r3, 800cf28 <atan+0x2d8>)
 800cd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd80:	f7f3 fa8c 	bl	800029c <__adddf3>
 800cd84:	4632      	mov	r2, r6
 800cd86:	463b      	mov	r3, r7
 800cd88:	f7f3 fc3e 	bl	8000608 <__aeabi_dmul>
 800cd8c:	a368      	add	r3, pc, #416	; (adr r3, 800cf30 <atan+0x2e0>)
 800cd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd92:	f7f3 fa83 	bl	800029c <__adddf3>
 800cd96:	4642      	mov	r2, r8
 800cd98:	464b      	mov	r3, r9
 800cd9a:	f7f3 fc35 	bl	8000608 <__aeabi_dmul>
 800cd9e:	a366      	add	r3, pc, #408	; (adr r3, 800cf38 <atan+0x2e8>)
 800cda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda4:	4680      	mov	r8, r0
 800cda6:	4689      	mov	r9, r1
 800cda8:	4630      	mov	r0, r6
 800cdaa:	4639      	mov	r1, r7
 800cdac:	f7f3 fc2c 	bl	8000608 <__aeabi_dmul>
 800cdb0:	a363      	add	r3, pc, #396	; (adr r3, 800cf40 <atan+0x2f0>)
 800cdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb6:	f7f3 fa6f 	bl	8000298 <__aeabi_dsub>
 800cdba:	4632      	mov	r2, r6
 800cdbc:	463b      	mov	r3, r7
 800cdbe:	f7f3 fc23 	bl	8000608 <__aeabi_dmul>
 800cdc2:	a361      	add	r3, pc, #388	; (adr r3, 800cf48 <atan+0x2f8>)
 800cdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc8:	f7f3 fa66 	bl	8000298 <__aeabi_dsub>
 800cdcc:	4632      	mov	r2, r6
 800cdce:	463b      	mov	r3, r7
 800cdd0:	f7f3 fc1a 	bl	8000608 <__aeabi_dmul>
 800cdd4:	a35e      	add	r3, pc, #376	; (adr r3, 800cf50 <atan+0x300>)
 800cdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdda:	f7f3 fa5d 	bl	8000298 <__aeabi_dsub>
 800cdde:	4632      	mov	r2, r6
 800cde0:	463b      	mov	r3, r7
 800cde2:	f7f3 fc11 	bl	8000608 <__aeabi_dmul>
 800cde6:	a35c      	add	r3, pc, #368	; (adr r3, 800cf58 <atan+0x308>)
 800cde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdec:	f7f3 fa54 	bl	8000298 <__aeabi_dsub>
 800cdf0:	4632      	mov	r2, r6
 800cdf2:	463b      	mov	r3, r7
 800cdf4:	f7f3 fc08 	bl	8000608 <__aeabi_dmul>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	4640      	mov	r0, r8
 800cdfe:	4649      	mov	r1, r9
 800ce00:	f7f3 fa4c 	bl	800029c <__adddf3>
 800ce04:	4622      	mov	r2, r4
 800ce06:	462b      	mov	r3, r5
 800ce08:	f7f3 fbfe 	bl	8000608 <__aeabi_dmul>
 800ce0c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ce10:	4602      	mov	r2, r0
 800ce12:	460b      	mov	r3, r1
 800ce14:	d14b      	bne.n	800ceae <atan+0x25e>
 800ce16:	4620      	mov	r0, r4
 800ce18:	4629      	mov	r1, r5
 800ce1a:	f7f3 fa3d 	bl	8000298 <__aeabi_dsub>
 800ce1e:	e72c      	b.n	800cc7a <atan+0x2a>
 800ce20:	ee10 0a10 	vmov	r0, s0
 800ce24:	4b53      	ldr	r3, [pc, #332]	; (800cf74 <atan+0x324>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	4629      	mov	r1, r5
 800ce2a:	f7f3 fa35 	bl	8000298 <__aeabi_dsub>
 800ce2e:	4b51      	ldr	r3, [pc, #324]	; (800cf74 <atan+0x324>)
 800ce30:	4606      	mov	r6, r0
 800ce32:	460f      	mov	r7, r1
 800ce34:	2200      	movs	r2, #0
 800ce36:	4620      	mov	r0, r4
 800ce38:	4629      	mov	r1, r5
 800ce3a:	f7f3 fa2f 	bl	800029c <__adddf3>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	460b      	mov	r3, r1
 800ce42:	4630      	mov	r0, r6
 800ce44:	4639      	mov	r1, r7
 800ce46:	f7f3 fd09 	bl	800085c <__aeabi_ddiv>
 800ce4a:	f04f 0a01 	mov.w	sl, #1
 800ce4e:	4604      	mov	r4, r0
 800ce50:	460d      	mov	r5, r1
 800ce52:	e764      	b.n	800cd1e <atan+0xce>
 800ce54:	4b49      	ldr	r3, [pc, #292]	; (800cf7c <atan+0x32c>)
 800ce56:	429e      	cmp	r6, r3
 800ce58:	da1d      	bge.n	800ce96 <atan+0x246>
 800ce5a:	ee10 0a10 	vmov	r0, s0
 800ce5e:	4b48      	ldr	r3, [pc, #288]	; (800cf80 <atan+0x330>)
 800ce60:	2200      	movs	r2, #0
 800ce62:	4629      	mov	r1, r5
 800ce64:	f7f3 fa18 	bl	8000298 <__aeabi_dsub>
 800ce68:	4b45      	ldr	r3, [pc, #276]	; (800cf80 <atan+0x330>)
 800ce6a:	4606      	mov	r6, r0
 800ce6c:	460f      	mov	r7, r1
 800ce6e:	2200      	movs	r2, #0
 800ce70:	4620      	mov	r0, r4
 800ce72:	4629      	mov	r1, r5
 800ce74:	f7f3 fbc8 	bl	8000608 <__aeabi_dmul>
 800ce78:	4b3e      	ldr	r3, [pc, #248]	; (800cf74 <atan+0x324>)
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f7f3 fa0e 	bl	800029c <__adddf3>
 800ce80:	4602      	mov	r2, r0
 800ce82:	460b      	mov	r3, r1
 800ce84:	4630      	mov	r0, r6
 800ce86:	4639      	mov	r1, r7
 800ce88:	f7f3 fce8 	bl	800085c <__aeabi_ddiv>
 800ce8c:	f04f 0a02 	mov.w	sl, #2
 800ce90:	4604      	mov	r4, r0
 800ce92:	460d      	mov	r5, r1
 800ce94:	e743      	b.n	800cd1e <atan+0xce>
 800ce96:	462b      	mov	r3, r5
 800ce98:	ee10 2a10 	vmov	r2, s0
 800ce9c:	4939      	ldr	r1, [pc, #228]	; (800cf84 <atan+0x334>)
 800ce9e:	2000      	movs	r0, #0
 800cea0:	f7f3 fcdc 	bl	800085c <__aeabi_ddiv>
 800cea4:	f04f 0a03 	mov.w	sl, #3
 800cea8:	4604      	mov	r4, r0
 800ceaa:	460d      	mov	r5, r1
 800ceac:	e737      	b.n	800cd1e <atan+0xce>
 800ceae:	4b36      	ldr	r3, [pc, #216]	; (800cf88 <atan+0x338>)
 800ceb0:	4e36      	ldr	r6, [pc, #216]	; (800cf8c <atan+0x33c>)
 800ceb2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ceb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceba:	f7f3 f9ed 	bl	8000298 <__aeabi_dsub>
 800cebe:	4622      	mov	r2, r4
 800cec0:	462b      	mov	r3, r5
 800cec2:	f7f3 f9e9 	bl	8000298 <__aeabi_dsub>
 800cec6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ceca:	4602      	mov	r2, r0
 800cecc:	460b      	mov	r3, r1
 800cece:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ced2:	f7f3 f9e1 	bl	8000298 <__aeabi_dsub>
 800ced6:	f1bb 0f00 	cmp.w	fp, #0
 800ceda:	4604      	mov	r4, r0
 800cedc:	460d      	mov	r5, r1
 800cede:	f6bf aed6 	bge.w	800cc8e <atan+0x3e>
 800cee2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cee6:	461d      	mov	r5, r3
 800cee8:	e6d1      	b.n	800cc8e <atan+0x3e>
 800ceea:	a51d      	add	r5, pc, #116	; (adr r5, 800cf60 <atan+0x310>)
 800ceec:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cef0:	e6cd      	b.n	800cc8e <atan+0x3e>
 800cef2:	bf00      	nop
 800cef4:	f3af 8000 	nop.w
 800cef8:	54442d18 	.word	0x54442d18
 800cefc:	bff921fb 	.word	0xbff921fb
 800cf00:	8800759c 	.word	0x8800759c
 800cf04:	7e37e43c 	.word	0x7e37e43c
 800cf08:	e322da11 	.word	0xe322da11
 800cf0c:	3f90ad3a 	.word	0x3f90ad3a
 800cf10:	24760deb 	.word	0x24760deb
 800cf14:	3fa97b4b 	.word	0x3fa97b4b
 800cf18:	a0d03d51 	.word	0xa0d03d51
 800cf1c:	3fb10d66 	.word	0x3fb10d66
 800cf20:	c54c206e 	.word	0xc54c206e
 800cf24:	3fb745cd 	.word	0x3fb745cd
 800cf28:	920083ff 	.word	0x920083ff
 800cf2c:	3fc24924 	.word	0x3fc24924
 800cf30:	5555550d 	.word	0x5555550d
 800cf34:	3fd55555 	.word	0x3fd55555
 800cf38:	2c6a6c2f 	.word	0x2c6a6c2f
 800cf3c:	bfa2b444 	.word	0xbfa2b444
 800cf40:	52defd9a 	.word	0x52defd9a
 800cf44:	3fadde2d 	.word	0x3fadde2d
 800cf48:	af749a6d 	.word	0xaf749a6d
 800cf4c:	3fb3b0f2 	.word	0x3fb3b0f2
 800cf50:	fe231671 	.word	0xfe231671
 800cf54:	3fbc71c6 	.word	0x3fbc71c6
 800cf58:	9998ebc4 	.word	0x9998ebc4
 800cf5c:	3fc99999 	.word	0x3fc99999
 800cf60:	54442d18 	.word	0x54442d18
 800cf64:	3ff921fb 	.word	0x3ff921fb
 800cf68:	440fffff 	.word	0x440fffff
 800cf6c:	7ff00000 	.word	0x7ff00000
 800cf70:	3fdbffff 	.word	0x3fdbffff
 800cf74:	3ff00000 	.word	0x3ff00000
 800cf78:	3ff2ffff 	.word	0x3ff2ffff
 800cf7c:	40038000 	.word	0x40038000
 800cf80:	3ff80000 	.word	0x3ff80000
 800cf84:	bff00000 	.word	0xbff00000
 800cf88:	0800deb8 	.word	0x0800deb8
 800cf8c:	0800de98 	.word	0x0800de98

0800cf90 <fabs>:
 800cf90:	ec51 0b10 	vmov	r0, r1, d0
 800cf94:	ee10 2a10 	vmov	r2, s0
 800cf98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cf9c:	ec43 2b10 	vmov	d0, r2, r3
 800cfa0:	4770      	bx	lr
	...

0800cfa4 <__ieee754_sqrt>:
 800cfa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa8:	ec55 4b10 	vmov	r4, r5, d0
 800cfac:	4e67      	ldr	r6, [pc, #412]	; (800d14c <__ieee754_sqrt+0x1a8>)
 800cfae:	43ae      	bics	r6, r5
 800cfb0:	ee10 0a10 	vmov	r0, s0
 800cfb4:	ee10 2a10 	vmov	r2, s0
 800cfb8:	4629      	mov	r1, r5
 800cfba:	462b      	mov	r3, r5
 800cfbc:	d10d      	bne.n	800cfda <__ieee754_sqrt+0x36>
 800cfbe:	f7f3 fb23 	bl	8000608 <__aeabi_dmul>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	4629      	mov	r1, r5
 800cfca:	f7f3 f967 	bl	800029c <__adddf3>
 800cfce:	4604      	mov	r4, r0
 800cfd0:	460d      	mov	r5, r1
 800cfd2:	ec45 4b10 	vmov	d0, r4, r5
 800cfd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfda:	2d00      	cmp	r5, #0
 800cfdc:	dc0b      	bgt.n	800cff6 <__ieee754_sqrt+0x52>
 800cfde:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cfe2:	4326      	orrs	r6, r4
 800cfe4:	d0f5      	beq.n	800cfd2 <__ieee754_sqrt+0x2e>
 800cfe6:	b135      	cbz	r5, 800cff6 <__ieee754_sqrt+0x52>
 800cfe8:	f7f3 f956 	bl	8000298 <__aeabi_dsub>
 800cfec:	4602      	mov	r2, r0
 800cfee:	460b      	mov	r3, r1
 800cff0:	f7f3 fc34 	bl	800085c <__aeabi_ddiv>
 800cff4:	e7eb      	b.n	800cfce <__ieee754_sqrt+0x2a>
 800cff6:	1509      	asrs	r1, r1, #20
 800cff8:	f000 808d 	beq.w	800d116 <__ieee754_sqrt+0x172>
 800cffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d000:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d008:	07c9      	lsls	r1, r1, #31
 800d00a:	bf5c      	itt	pl
 800d00c:	005b      	lslpl	r3, r3, #1
 800d00e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d012:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d016:	bf58      	it	pl
 800d018:	0052      	lslpl	r2, r2, #1
 800d01a:	2500      	movs	r5, #0
 800d01c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d020:	1076      	asrs	r6, r6, #1
 800d022:	0052      	lsls	r2, r2, #1
 800d024:	f04f 0e16 	mov.w	lr, #22
 800d028:	46ac      	mov	ip, r5
 800d02a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d02e:	eb0c 0001 	add.w	r0, ip, r1
 800d032:	4298      	cmp	r0, r3
 800d034:	bfde      	ittt	le
 800d036:	1a1b      	suble	r3, r3, r0
 800d038:	eb00 0c01 	addle.w	ip, r0, r1
 800d03c:	186d      	addle	r5, r5, r1
 800d03e:	005b      	lsls	r3, r3, #1
 800d040:	f1be 0e01 	subs.w	lr, lr, #1
 800d044:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d048:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d04c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d050:	d1ed      	bne.n	800d02e <__ieee754_sqrt+0x8a>
 800d052:	4674      	mov	r4, lr
 800d054:	2720      	movs	r7, #32
 800d056:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d05a:	4563      	cmp	r3, ip
 800d05c:	eb01 000e 	add.w	r0, r1, lr
 800d060:	dc02      	bgt.n	800d068 <__ieee754_sqrt+0xc4>
 800d062:	d113      	bne.n	800d08c <__ieee754_sqrt+0xe8>
 800d064:	4290      	cmp	r0, r2
 800d066:	d811      	bhi.n	800d08c <__ieee754_sqrt+0xe8>
 800d068:	2800      	cmp	r0, #0
 800d06a:	eb00 0e01 	add.w	lr, r0, r1
 800d06e:	da57      	bge.n	800d120 <__ieee754_sqrt+0x17c>
 800d070:	f1be 0f00 	cmp.w	lr, #0
 800d074:	db54      	blt.n	800d120 <__ieee754_sqrt+0x17c>
 800d076:	f10c 0801 	add.w	r8, ip, #1
 800d07a:	eba3 030c 	sub.w	r3, r3, ip
 800d07e:	4290      	cmp	r0, r2
 800d080:	bf88      	it	hi
 800d082:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d086:	1a12      	subs	r2, r2, r0
 800d088:	440c      	add	r4, r1
 800d08a:	46c4      	mov	ip, r8
 800d08c:	005b      	lsls	r3, r3, #1
 800d08e:	3f01      	subs	r7, #1
 800d090:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d094:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d098:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d09c:	d1dd      	bne.n	800d05a <__ieee754_sqrt+0xb6>
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	d01b      	beq.n	800d0da <__ieee754_sqrt+0x136>
 800d0a2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d150 <__ieee754_sqrt+0x1ac>
 800d0a6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d154 <__ieee754_sqrt+0x1b0>
 800d0aa:	e9da 0100 	ldrd	r0, r1, [sl]
 800d0ae:	e9db 2300 	ldrd	r2, r3, [fp]
 800d0b2:	f7f3 f8f1 	bl	8000298 <__aeabi_dsub>
 800d0b6:	e9da 8900 	ldrd	r8, r9, [sl]
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	460b      	mov	r3, r1
 800d0be:	4640      	mov	r0, r8
 800d0c0:	4649      	mov	r1, r9
 800d0c2:	f7f3 fd1d 	bl	8000b00 <__aeabi_dcmple>
 800d0c6:	b140      	cbz	r0, 800d0da <__ieee754_sqrt+0x136>
 800d0c8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d0cc:	e9da 0100 	ldrd	r0, r1, [sl]
 800d0d0:	e9db 2300 	ldrd	r2, r3, [fp]
 800d0d4:	d126      	bne.n	800d124 <__ieee754_sqrt+0x180>
 800d0d6:	3501      	adds	r5, #1
 800d0d8:	463c      	mov	r4, r7
 800d0da:	106a      	asrs	r2, r5, #1
 800d0dc:	0863      	lsrs	r3, r4, #1
 800d0de:	07e9      	lsls	r1, r5, #31
 800d0e0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d0e4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d0e8:	bf48      	it	mi
 800d0ea:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d0ee:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d0f2:	461c      	mov	r4, r3
 800d0f4:	e76d      	b.n	800cfd2 <__ieee754_sqrt+0x2e>
 800d0f6:	0ad3      	lsrs	r3, r2, #11
 800d0f8:	3815      	subs	r0, #21
 800d0fa:	0552      	lsls	r2, r2, #21
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d0fa      	beq.n	800d0f6 <__ieee754_sqrt+0x152>
 800d100:	02dc      	lsls	r4, r3, #11
 800d102:	d50a      	bpl.n	800d11a <__ieee754_sqrt+0x176>
 800d104:	f1c1 0420 	rsb	r4, r1, #32
 800d108:	fa22 f404 	lsr.w	r4, r2, r4
 800d10c:	1e4d      	subs	r5, r1, #1
 800d10e:	408a      	lsls	r2, r1
 800d110:	4323      	orrs	r3, r4
 800d112:	1b41      	subs	r1, r0, r5
 800d114:	e772      	b.n	800cffc <__ieee754_sqrt+0x58>
 800d116:	4608      	mov	r0, r1
 800d118:	e7f0      	b.n	800d0fc <__ieee754_sqrt+0x158>
 800d11a:	005b      	lsls	r3, r3, #1
 800d11c:	3101      	adds	r1, #1
 800d11e:	e7ef      	b.n	800d100 <__ieee754_sqrt+0x15c>
 800d120:	46e0      	mov	r8, ip
 800d122:	e7aa      	b.n	800d07a <__ieee754_sqrt+0xd6>
 800d124:	f7f3 f8ba 	bl	800029c <__adddf3>
 800d128:	e9da 8900 	ldrd	r8, r9, [sl]
 800d12c:	4602      	mov	r2, r0
 800d12e:	460b      	mov	r3, r1
 800d130:	4640      	mov	r0, r8
 800d132:	4649      	mov	r1, r9
 800d134:	f7f3 fcda 	bl	8000aec <__aeabi_dcmplt>
 800d138:	b120      	cbz	r0, 800d144 <__ieee754_sqrt+0x1a0>
 800d13a:	1ca0      	adds	r0, r4, #2
 800d13c:	bf08      	it	eq
 800d13e:	3501      	addeq	r5, #1
 800d140:	3402      	adds	r4, #2
 800d142:	e7ca      	b.n	800d0da <__ieee754_sqrt+0x136>
 800d144:	3401      	adds	r4, #1
 800d146:	f024 0401 	bic.w	r4, r4, #1
 800d14a:	e7c6      	b.n	800d0da <__ieee754_sqrt+0x136>
 800d14c:	7ff00000 	.word	0x7ff00000
 800d150:	20000368 	.word	0x20000368
 800d154:	20000370 	.word	0x20000370

0800d158 <__ieee754_atan2>:
 800d158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d15c:	ec57 6b11 	vmov	r6, r7, d1
 800d160:	4273      	negs	r3, r6
 800d162:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800d2e0 <__ieee754_atan2+0x188>
 800d166:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d16a:	4333      	orrs	r3, r6
 800d16c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d170:	4543      	cmp	r3, r8
 800d172:	ec51 0b10 	vmov	r0, r1, d0
 800d176:	ee11 5a10 	vmov	r5, s2
 800d17a:	d80a      	bhi.n	800d192 <__ieee754_atan2+0x3a>
 800d17c:	4244      	negs	r4, r0
 800d17e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d182:	4304      	orrs	r4, r0
 800d184:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d188:	4544      	cmp	r4, r8
 800d18a:	ee10 9a10 	vmov	r9, s0
 800d18e:	468e      	mov	lr, r1
 800d190:	d907      	bls.n	800d1a2 <__ieee754_atan2+0x4a>
 800d192:	4632      	mov	r2, r6
 800d194:	463b      	mov	r3, r7
 800d196:	f7f3 f881 	bl	800029c <__adddf3>
 800d19a:	ec41 0b10 	vmov	d0, r0, r1
 800d19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1a2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d1a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d1aa:	4334      	orrs	r4, r6
 800d1ac:	d103      	bne.n	800d1b6 <__ieee754_atan2+0x5e>
 800d1ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1b2:	f7ff bd4d 	b.w	800cc50 <atan>
 800d1b6:	17bc      	asrs	r4, r7, #30
 800d1b8:	f004 0402 	and.w	r4, r4, #2
 800d1bc:	ea53 0909 	orrs.w	r9, r3, r9
 800d1c0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d1c4:	d107      	bne.n	800d1d6 <__ieee754_atan2+0x7e>
 800d1c6:	2c02      	cmp	r4, #2
 800d1c8:	d05f      	beq.n	800d28a <__ieee754_atan2+0x132>
 800d1ca:	2c03      	cmp	r4, #3
 800d1cc:	d1e5      	bne.n	800d19a <__ieee754_atan2+0x42>
 800d1ce:	a140      	add	r1, pc, #256	; (adr r1, 800d2d0 <__ieee754_atan2+0x178>)
 800d1d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1d4:	e7e1      	b.n	800d19a <__ieee754_atan2+0x42>
 800d1d6:	4315      	orrs	r5, r2
 800d1d8:	d106      	bne.n	800d1e8 <__ieee754_atan2+0x90>
 800d1da:	f1be 0f00 	cmp.w	lr, #0
 800d1de:	da5f      	bge.n	800d2a0 <__ieee754_atan2+0x148>
 800d1e0:	a13d      	add	r1, pc, #244	; (adr r1, 800d2d8 <__ieee754_atan2+0x180>)
 800d1e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1e6:	e7d8      	b.n	800d19a <__ieee754_atan2+0x42>
 800d1e8:	4542      	cmp	r2, r8
 800d1ea:	d10f      	bne.n	800d20c <__ieee754_atan2+0xb4>
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	f104 34ff 	add.w	r4, r4, #4294967295
 800d1f2:	d107      	bne.n	800d204 <__ieee754_atan2+0xac>
 800d1f4:	2c02      	cmp	r4, #2
 800d1f6:	d84c      	bhi.n	800d292 <__ieee754_atan2+0x13a>
 800d1f8:	4b33      	ldr	r3, [pc, #204]	; (800d2c8 <__ieee754_atan2+0x170>)
 800d1fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d1fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d202:	e7ca      	b.n	800d19a <__ieee754_atan2+0x42>
 800d204:	2c02      	cmp	r4, #2
 800d206:	d848      	bhi.n	800d29a <__ieee754_atan2+0x142>
 800d208:	4b30      	ldr	r3, [pc, #192]	; (800d2cc <__ieee754_atan2+0x174>)
 800d20a:	e7f6      	b.n	800d1fa <__ieee754_atan2+0xa2>
 800d20c:	4543      	cmp	r3, r8
 800d20e:	d0e4      	beq.n	800d1da <__ieee754_atan2+0x82>
 800d210:	1a9b      	subs	r3, r3, r2
 800d212:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d216:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d21a:	da1e      	bge.n	800d25a <__ieee754_atan2+0x102>
 800d21c:	2f00      	cmp	r7, #0
 800d21e:	da01      	bge.n	800d224 <__ieee754_atan2+0xcc>
 800d220:	323c      	adds	r2, #60	; 0x3c
 800d222:	db1e      	blt.n	800d262 <__ieee754_atan2+0x10a>
 800d224:	4632      	mov	r2, r6
 800d226:	463b      	mov	r3, r7
 800d228:	f7f3 fb18 	bl	800085c <__aeabi_ddiv>
 800d22c:	ec41 0b10 	vmov	d0, r0, r1
 800d230:	f7ff feae 	bl	800cf90 <fabs>
 800d234:	f7ff fd0c 	bl	800cc50 <atan>
 800d238:	ec51 0b10 	vmov	r0, r1, d0
 800d23c:	2c01      	cmp	r4, #1
 800d23e:	d013      	beq.n	800d268 <__ieee754_atan2+0x110>
 800d240:	2c02      	cmp	r4, #2
 800d242:	d015      	beq.n	800d270 <__ieee754_atan2+0x118>
 800d244:	2c00      	cmp	r4, #0
 800d246:	d0a8      	beq.n	800d19a <__ieee754_atan2+0x42>
 800d248:	a317      	add	r3, pc, #92	; (adr r3, 800d2a8 <__ieee754_atan2+0x150>)
 800d24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24e:	f7f3 f823 	bl	8000298 <__aeabi_dsub>
 800d252:	a317      	add	r3, pc, #92	; (adr r3, 800d2b0 <__ieee754_atan2+0x158>)
 800d254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d258:	e014      	b.n	800d284 <__ieee754_atan2+0x12c>
 800d25a:	a117      	add	r1, pc, #92	; (adr r1, 800d2b8 <__ieee754_atan2+0x160>)
 800d25c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d260:	e7ec      	b.n	800d23c <__ieee754_atan2+0xe4>
 800d262:	2000      	movs	r0, #0
 800d264:	2100      	movs	r1, #0
 800d266:	e7e9      	b.n	800d23c <__ieee754_atan2+0xe4>
 800d268:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d26c:	4619      	mov	r1, r3
 800d26e:	e794      	b.n	800d19a <__ieee754_atan2+0x42>
 800d270:	a30d      	add	r3, pc, #52	; (adr r3, 800d2a8 <__ieee754_atan2+0x150>)
 800d272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d276:	f7f3 f80f 	bl	8000298 <__aeabi_dsub>
 800d27a:	4602      	mov	r2, r0
 800d27c:	460b      	mov	r3, r1
 800d27e:	a10c      	add	r1, pc, #48	; (adr r1, 800d2b0 <__ieee754_atan2+0x158>)
 800d280:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d284:	f7f3 f808 	bl	8000298 <__aeabi_dsub>
 800d288:	e787      	b.n	800d19a <__ieee754_atan2+0x42>
 800d28a:	a109      	add	r1, pc, #36	; (adr r1, 800d2b0 <__ieee754_atan2+0x158>)
 800d28c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d290:	e783      	b.n	800d19a <__ieee754_atan2+0x42>
 800d292:	a10b      	add	r1, pc, #44	; (adr r1, 800d2c0 <__ieee754_atan2+0x168>)
 800d294:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d298:	e77f      	b.n	800d19a <__ieee754_atan2+0x42>
 800d29a:	2000      	movs	r0, #0
 800d29c:	2100      	movs	r1, #0
 800d29e:	e77c      	b.n	800d19a <__ieee754_atan2+0x42>
 800d2a0:	a105      	add	r1, pc, #20	; (adr r1, 800d2b8 <__ieee754_atan2+0x160>)
 800d2a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2a6:	e778      	b.n	800d19a <__ieee754_atan2+0x42>
 800d2a8:	33145c07 	.word	0x33145c07
 800d2ac:	3ca1a626 	.word	0x3ca1a626
 800d2b0:	54442d18 	.word	0x54442d18
 800d2b4:	400921fb 	.word	0x400921fb
 800d2b8:	54442d18 	.word	0x54442d18
 800d2bc:	3ff921fb 	.word	0x3ff921fb
 800d2c0:	54442d18 	.word	0x54442d18
 800d2c4:	3fe921fb 	.word	0x3fe921fb
 800d2c8:	0800ded8 	.word	0x0800ded8
 800d2cc:	0800def0 	.word	0x0800def0
 800d2d0:	54442d18 	.word	0x54442d18
 800d2d4:	c00921fb 	.word	0xc00921fb
 800d2d8:	54442d18 	.word	0x54442d18
 800d2dc:	bff921fb 	.word	0xbff921fb
 800d2e0:	7ff00000 	.word	0x7ff00000

0800d2e4 <_init>:
 800d2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2e6:	bf00      	nop
 800d2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ea:	bc08      	pop	{r3}
 800d2ec:	469e      	mov	lr, r3
 800d2ee:	4770      	bx	lr

0800d2f0 <_fini>:
 800d2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2f2:	bf00      	nop
 800d2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2f6:	bc08      	pop	{r3}
 800d2f8:	469e      	mov	lr, r3
 800d2fa:	4770      	bx	lr
